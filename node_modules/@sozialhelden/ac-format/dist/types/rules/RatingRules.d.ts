import { Quantity } from '../Units';
declare type Comparable = number | string | Quantity;
declare type ExistsValue = {
    $exists: boolean;
};
declare type UnknownOrValue = {
    $unknownOr: boolean;
};
declare type DefinedValue = {
    $defined: true;
};
declare type LessThan = {
    $lt: Comparable;
};
declare type LessThanEquals = {
    $lte: Comparable;
};
declare type GreaterThan = {
    $gt: Comparable;
};
declare type GreaterThanEquals = {
    $gte: Comparable;
};
declare type Equals = {
    $eq: Comparable;
};
declare type NotEquals = {
    $ne: Comparable;
};
declare type MatchValue = string | number | undefined | null | boolean | DefinedValue | ExistsValue | UnknownOrValue | LessThan | LessThanEquals | GreaterThan | GreaterThanEquals | Equals | NotEquals;
declare type MatchRule = {
    [key: string]: MatchValue;
};
declare type OrRule = {
    $or: ReadonlyArray<Rule>;
};
declare type AndRule = {
    $and: ReadonlyArray<Rule>;
};
export declare type Rule = OrRule | AndRule | MatchRule;
export declare type RuleEvaluationResult = 'true' | 'false' | 'unknown';
export declare function evaluateRule(data: {}, rule: Rule): RuleEvaluationResult;
export {};
