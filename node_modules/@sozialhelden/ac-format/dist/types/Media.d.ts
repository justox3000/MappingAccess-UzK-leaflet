import SimpleSchema from 'simpl-schema';
import './SimpleSchemaExtensions';
import { Length } from './Units';
import { IetfLanguageTagOrSignLanguageCode } from './ietfLanguageTags';
import { LocalizedString } from './LocalizedString';
/**
 * Describes a media unit provided at this place, for example an exhibit at a museum or a movie in
 * a cinema.
 */
export interface Media {
    /**
     * Type of the media unit
     */
    type: 'document' | 'menu' | 'guide' | 'presentation' | 'exhibit' | 'movie' | 'play' | 'screen';
    /**
     * Name of the media unit (relevant if there are multiple units of the same kind)
     */
    name?: LocalizedString;
    /**
     * Is the media unit consumable or described for Braille readers?
     */
    isBraille?: boolean;
    /**
     * Is the media unit consumable as audio-only option?
     */
    isAudio?: boolean;
    /**
     * If the media unit is printed, is the print large?
     */
    isLargePrint?: boolean;
    /**
     * If the media unit is printed or on a screen, does it have high contrast between background and
     * foreground?
     */
    hasContrastingBackground?: boolean;
    /**
     * Relevant for movies, screens and presentations: Is there a dedicated screen where subtitles can
     * be read?
     */
    hasDedicatedScreenForSubtitles?: boolean;
    /**
     * Is the media unit provided with subtitles?
     */
    hasSubtitles?: boolean;
    /**
     * Does the media unit have [real time captioning](https://www.washington.edu/doit/what-real-time-captioning)?
     */
    hasRealTimeCaptioning?: boolean;
    /**
     * Is the media unit provided in a [Plain Language](https://en.wikipedia.org/wiki/Plain_language) option?
     */
    hasPlainLanguageOption?: boolean;
    /**
     * Specifies which languages (including sign languages) in which the media unit is provided
     */
    languages?: ArrayLike<IetfLanguageTagOrSignLanguageCode>;
    /**
     * If the media is consumed while the consumer is directly in front of it, this property specifies
     * how much turning space there is in front of it.
     */
    turningSpaceInFront?: Length;
}
export declare const MediaSchema: SimpleSchema;
