import SimpleSchema from 'simpl-schema';
import './SimpleSchemaExtensions';
import { Length } from './Units';
import { LocalizedString } from './LocalizedString';
/**
 * Describes one or more wheelchair parking lots.
 */
export interface WheelchairParking {
    /**
     * Describes where the parking is located.
     */
    location?: LocalizedString;
    /**
     * How far away is the parking from the main entrance? If there is a separate wheelchair entrance,
     * the distance to this entrance MUST be used.
     */
    distanceToEntrance?: Length;
    /**
     * Defines many wheelchair accessible parking lots are provided
     */
    count?: number;
    /**
     * `true` if the parking is inside a building or under a roof, `false` if not, `undefined` if
     * unknown.
     */
    isLocatedInside?: boolean;
    /**
     * Width constraint of the parking lots.
     */
    width?: Length;
    /**
     * Length constraint of the parking lots.
     */
    length?: Length;
    /**
     * Maximal allowed vehicle height for users of this parking.
     */
    maxVehicleHeight?: Length;
    /**
     * `true` if there is dedicated signage at all relevant turning points from the street to the
     * parking, `false` if not, `undefined` if this is unknown.
     */
    hasDedicatedSignage?: boolean;
    /**
     * `true` if the parking has to be paid by space, `false` if not, `undefined` if unknown.
     */
    paymentBySpace?: boolean;
    /**
     * `true` if the parking has to be paid by parking zone, `false` if not, `undefined` if unknown.
     */
    paymentByZone?: boolean;
    /**
     * List of permit names that allow using this parking.
     *
     * @example `['Blue Badge', 'Red badge', 'Turqouise badge']
     */
    neededParkingPermits?: ArrayLike<LocalizedString>;
}
export declare const WheelchairParkingSchema: SimpleSchema;
export interface Parking {
    forWheelchairUsers?: WheelchairParking | null;
}
export declare const ParkingSchema: SimpleSchema;
