import SimpleSchema from 'simpl-schema';
/**
 * Context for the question function, to read additional fields or generate questions dynamically
 */
export declare class QuestionFunctionContext<T> {
    value?: T;
    path?: string;
    schema?: SimpleSchema;
    userName?: string;
    field?: (fieldName: string) => any;
}
export declare function makeQuestionContext<T>(path: string, value: T, schema: SimpleSchema): QuestionFunctionContext<T>;
/**
 * A function that gets evaluated in a questionnaire context
 */
export declare type QuestionFunction<T> = (context: QuestionFunctionContext<T>) => string;
/**
 * Definition for a question, can be either a String, an Array of Strings (value will be picked at random),
 * or a function that will be evaluated
 */
export declare type QuestionValue<T> = string | string[] | QuestionFunction<T>;
/**
 * Describes additional data that can be stored within a SimpleSchema for accessibility data
 */
export interface AccessibilitySchemaExtension<T> {
    /**
     * Example value for this accessibility field
     */
    example?: string;
    /**
     * Description for this accessibility field
     */
    description?: string;
    /**
     * uri to a wiki or explanation page for this field
     */
    extendedInformationUrl?: string;
    /**
     * List of explicit choices with translated label
     */
    options?: Array<{
        value: T;
        label: string;
    }>;
    /**
     * End user question to be asked
     */
    question?: QuestionValue<T>;
    /**
     * End user question to be asked when more array entries should be added
     */
    questionMore?: QuestionValue<T>;
    /**
     * End user question to be asked when starting a new accessibility block (toilet, entrance, beds...)
     */
    questionBlockBegin?: QuestionValue<T>;
    /**
     * Should this field be presented to users?
     */
    machineData?: boolean;
    /**
     * Which component should be used for this field
     */
    componentHint?: string;
    /**
     * Can this fields sub-fields be chosen for individual inspection?
     */
    inseparable?: boolean;
    /**
     * The preferred unit this field is usually documented in (e.g. seconds, meter, centimeter)
     */
    preferredUnit?: string;
    /**
     * This field is deprecated, should not be used anymore
     */
    deprecated?: boolean;
}
export interface EvaluatedAccessibilitySchemaExtension<T> extends AccessibilitySchemaExtension<T> {
    /**
     * End user question to be asked
     */
    question?: string;
    /**
     * End user question to be asked when more array entries should be added
     */
    questionMore?: string;
    /**
     * End user question to be asked when starting a new accessibility block (toilet, entrance, beds...)
     */
    questionBlockBegin?: string;
}
export declare function evaluateQuestionValue<T>(question: QuestionValue<T>, context: QuestionFunctionContext<T>): string | undefined;
export declare function evaluateAccessibilitySchemaExtension<T>(extension: AccessibilitySchemaExtension<T>, context: QuestionFunctionContext<T>): EvaluatedAccessibilitySchemaExtension<T>;
export declare type ExtendedSchema = {
    __schemaType: string;
    __schemaVersion: string;
} & SimpleSchema;
/**
 * Internal helper for creating schemata with attached schemaType
 */
export declare function createSchemaInstance(type: string, definition: {
    [key: string]: SchemaDefinition | SchemaType;
}, baseSchema?: SimpleSchema | null, schemaOptions?: {
    humanizeAutoLabels?: boolean;
    tracker?: any;
    check?: any;
}): ExtendedSchema;
/**
 * A schema for validating the AccessibilitySchemaExtension. Used for internal tests.
 */
export declare const AccessibilitySchemaExtensionSchema: SimpleSchema;
