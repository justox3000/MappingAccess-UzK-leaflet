"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makePluralFunc = makePluralFunc;
exports.getPluralFunc = getPluralFunc;
exports.transformTranslateObj = transformTranslateObj;
exports.transformCompactObj = transformCompactObj;
exports.dedentStr = dedentStr;
exports.getPluralFnForTrans = getPluralFnForTrans;
exports.buildArr = exports.buildStr = exports.msgid2Orig = exports.getMsgid = void 0;

var _dedent = _interopRequireDefault(require("dedent"));

var _minimal = require("plural-forms/dist/minimal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var getMsgid = function getMsgid(str, exprs) {
  return str.reduce(function (s, l, i) {
    return s + l + (exprs[i] !== undefined && "${".concat(i, "}") || '');
  }, '');
};

exports.getMsgid = getMsgid;

var removeSpaces = function removeSpaces(str) {
  return str.replace(/\s/g, '');
};

var mem = {};

var memoize1 = function memoize1(f) {
  return function (arg) {
    if (mem[arg]) {
      return mem[arg];
    }

    mem[arg] = f(arg);
    return mem[arg];
  };
};

var reg = function reg(i) {
  return new RegExp("\\$\\{(?:[\\s]+?|\\s?)".concat(i, "(?:[\\s]+?|\\s?)}"));
};

var memReg = memoize1(reg);

var msgid2Orig = function msgid2Orig(id, exprs) {
  return exprs.reduce(function (r, expr, i) {
    return r.replace(memReg(i), expr);
  }, id);
};

exports.msgid2Orig = msgid2Orig;

var buildStr = function buildStr(strs, exprs) {
  return strs.reduce(function (r, s, i) {
    return r + s + (exprs[i] !== undefined ? exprs[i] : '');
  }, '');
};

exports.buildStr = buildStr;

var buildArr = function buildArr(strs, exprs) {
  return strs.reduce(function (r, s, i) {
    return exprs[i] !== undefined ? r.concat(s, exprs[i]) : r.concat(s);
  }, []);
};

exports.buildArr = buildArr;

function pluralFnBody(pluralStr) {
  return "return args[+ (".concat(pluralStr, ")];");
}

var fnCache = {};

function makePluralFunc(pluralStr) {
  /* eslint-disable no-new-func */
  var fn = fnCache[pluralStr];

  if (!fn) {
    fn = new Function('n', 'args', pluralFnBody(pluralStr));
    fnCache[pluralStr] = fn;
  }

  return fn;
}

var pluralRegex = /\splural ?=?([\s\S]*);?/;

function getPluralFunc(headers) {
  var pluralFn = pluralRegex.exec(headers['plural-forms'])[1];

  if (pluralFn[pluralFn.length - 1] === ';') {
    pluralFn = pluralFn.slice(0, -1);
  }

  return pluralFn;
}

var variableREG = /\$\{\s*([.\w+\[\]])*\s*\}/g;

function getObjectKeys(obj) {
  var keys = [];

  for (var key in obj) {
    // eslint-disable-line no-restricted-syntax
    if (obj.hasOwnProperty(key)) {
      keys.push(key);
    }
  }

  return keys;
}

function replaceVariables(str, obj) {
  return str.replace(variableREG, function (variable) {
    return "${".concat(obj[removeSpaces(variable)], "}");
  });
}

function getVariablesMap(msgid) {
  var variableNumberMap = {};
  var variables = msgid.match(variableREG);
  if (!variables) return null;

  for (var i = 0; i < variables.length; i++) {
    variableNumberMap[removeSpaces(variables[i])] = i;
  }

  return variableNumberMap;
}

function transformTranslate(translate) {
  var variableNumberMap = getVariablesMap(translate.msgid);

  if (!variableNumberMap) {
    return translate;
  }

  var msgid = replaceVariables(translate.msgid, variableNumberMap);
  var newTranslate = {
    msgid: msgid
  };

  if (translate.msgid_plural) {
    newTranslate.msgid_plural = replaceVariables(translate.msgid_plural, variableNumberMap);
  }

  newTranslate.msgstr = [];
  var transStrs = translate.msgstr;

  for (var i = 0; i < transStrs.length; i++) {
    newTranslate.msgstr.push(replaceVariables(transStrs[i], variableNumberMap));
  }

  newTranslate.comments = translate.comments;
  return newTranslate;
}

function transformTranslateObj(translateObj) {
  var newTranslations = {};
  var transKeys = getObjectKeys(translateObj.translations);

  for (var i = 0; i < transKeys.length; i++) {
    var key = transKeys[i];
    var translation = translateObj.translations[key];
    var newTranslation = {};
    var msgids = getObjectKeys(translation);

    for (var j = 0; j < msgids.length; j++) {
      var msgid = msgids[j];
      var newTranslate = transformTranslate(translation[msgid]);
      newTranslation[newTranslate.msgid] = newTranslate;
    }

    newTranslations[key] = newTranslation;
  }

  translateObj.translations = newTranslations;
  return translateObj;
}

function transformCompactTranslate(msgid, translations) {
  var variableNumberMap = getVariablesMap(msgid);

  if (!variableNumberMap) {
    return [msgid, translations];
  }

  var newMsgid = replaceVariables(msgid, variableNumberMap);
  var newTranslations = translations.map(function (trans) {
    return replaceVariables(trans, variableNumberMap);
  });
  return [newMsgid, newTranslations];
}

function transformCompactObj(compactObj) {
  var newObj = {
    headers: compactObj.headers
  };
  var newContexts = {};
  var keys = getObjectKeys(compactObj.contexts);

  for (var i = 0; i < keys.length; i++) {
    var ctx = keys[i];
    var newContext = {};
    var msgids = getObjectKeys(compactObj.contexts[ctx]);

    for (var j = 0; j < msgids.length; j++) {
      var msgid = msgids[j];
      var translations = compactObj.contexts[ctx][msgid];

      var _transformCompactTran = transformCompactTranslate(msgid, translations),
          _transformCompactTran2 = _slicedToArray(_transformCompactTran, 2),
          newMsgid = _transformCompactTran2[0],
          newTranslations = _transformCompactTran2[1];

      newContext[newMsgid] = newTranslations;
    }

    newContexts[ctx] = newContext;
  }

  newObj.contexts = newContexts;
  return newObj;
}

function dedentStr(rawStr) {
  if (!(typeof rawStr === 'string')) {
    return rawStr;
  }

  if (rawStr.indexOf('\n') === -1) {
    return rawStr;
  }

  return (0, _dedent.default)(rawStr);
}

function getPluralFnForTrans(config) {
  var headers = config.getCurrentLocaleHeaders();
  var language = headers.language | headers.Language;

  if (language) {
    return (0, _minimal.getPluralFunc)(language);
  }

  var pluralStr = getPluralFunc(headers);
  return makePluralFunc(pluralStr);
}