{
	"id": 0,
	"name": "@sozialhelden/ac-format",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 2,
			"name": "QuestionFunctionContext",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Context for the question function, to read additional fields or generate questions dynamically"
			},
			"typeParameter": [
				{
					"id": 3,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 8,
					"name": "field",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 17,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 9,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 10,
											"name": "__call",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 11,
													"name": "fieldName",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 5,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 14,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 6,
					"name": "schema",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 15,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "SimpleSchema"
					}
				},
				{
					"id": 7,
					"name": "userName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 16,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 4,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 13,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"name": "T",
						"id": 3
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						8,
						5,
						6,
						7,
						4
					]
				}
			],
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 12,
					"character": 36
				}
			]
		},
		{
			"id": 374,
			"name": "Accessibility",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes the physical (and sometimes human rated) accessibility of a place."
			},
			"children": [
				{
					"id": 375,
					"name": "accessibleWith",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 27,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "PersonalProfile",
						"id": 87
					}
				},
				{
					"id": 383,
					"name": "animalPolicy",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Object describing the owner's policy regarding visitors bringing animals with them."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 63,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "AnimalPolicy",
						"id": 362
					}
				},
				{
					"id": 399,
					"name": "beds",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 130,
							"character": 6
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						]
					}
				},
				{
					"id": 403,
					"name": "cashRegister",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 146,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 401,
					"name": "changingRoom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 138,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 388,
					"name": "entrances",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Describes the accessibility of entrances to the place."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 83,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "ArrayLike",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Entrance",
										"id": 180
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 386,
					"name": "ground",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Object describing the place's ground condition. If there are very different ground conditions, you can create multiple places and nest them."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 75,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Ground",
								"id": 354
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 385,
					"name": "hasInductionLoop",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the venue has induction loops installed in its functional units where this is relevant."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 71,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 384,
					"name": "hasTactileGuideStrips",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the venue has tactile guide strips on the floor or at the walls, `false` if not. `undefined` or missing property indicates unknown."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 67,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 406,
					"name": "infoDesk",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 158,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 381,
					"name": "isQuiet",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines if the venue is quiet (subjectively, by the assessor). Will be replaced by a measurable ambient noise level in the future."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 53,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 380,
					"name": "isWellLit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Determines if the venue is well lit (subjectively, by the assessor).  Will be replaced by a measurable lumen value in the future."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 49,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 394,
					"name": "media",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Information about media.\n`null` indicates there is no media, `undefined` or missing property indicates unknown."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 110,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "ArrayLike",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Media",
										"id": 286
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 377,
					"name": "offersActivitiesForPeopleWith",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 31,
							"character": 31
						}
					],
					"type": {
						"type": "reference",
						"name": "PersonalProfile",
						"id": 87
					}
				},
				{
					"id": 379,
					"name": "parking",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Information about parking facilities at/around the venue.\n`null` indicates there is no parking, `undefined` or missing property indicates unknown."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 44,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Parking",
								"id": 350
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 376,
					"name": "partiallyAccessibleWith",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 29,
							"character": 25
						}
					],
					"type": {
						"type": "reference",
						"name": "PersonalProfile",
						"id": 87
					}
				},
				{
					"id": 387,
					"name": "pathways",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Describes the accessibility of pathways to the place or inside the place’s boundaries."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 79,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Pathways",
								"id": 332
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 390,
					"name": "payment",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Information about payment at the place.\n`null` indicates there is no payment possible/required,\n`undefined` or missing property indicates unknown."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 94,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Payment",
								"id": 300
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 398,
					"name": "powerOutlets",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 126,
							"character": 14
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						]
					}
				},
				{
					"id": 389,
					"name": "restrooms",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Describes the accessibility of restrooms in the place."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 87,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "ArrayLike",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Restroom",
										"id": 250
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 404,
					"name": "seats",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 150,
							"character": 7
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 393,
					"name": "serviceContact",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 105,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 405,
					"name": "services",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 154,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 407,
					"name": "signage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 162,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 395,
					"name": "sitemap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 114,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 382,
					"name": "smokingPolicy",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Object describing the owner's smoking policy."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 59,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "SmokingPolicy",
						"id": 369
					}
				},
				{
					"id": 378,
					"name": "staff",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Information about the service staff.\n`null` indicates there is no staff, `undefined` or missing property indicates unknown."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 38,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Staff",
								"id": 277
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 402,
					"name": "stage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 142,
							"character": 7
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 396,
					"name": "switches",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 118,
							"character": 10
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						]
					}
				},
				{
					"id": 392,
					"name": "tables",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Information about tables.\n`null` indicates there are no tables, `undefined` or missing property indicates unknown."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 104,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Tables",
								"id": 309
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 397,
					"name": "vendingMachines",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 122,
							"character": 17
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "any"
							}
						]
					}
				},
				{
					"id": 400,
					"name": "wardrobe",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "TODO"
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 134,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 391,
					"name": "wheelchairPlaces",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Information about wheelchair places.\n`null` indicates there are no places, `undefined` or missing property indicates unknown."
					},
					"sources": [
						{
							"fileName": "Accessibility.ts",
							"line": 99,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "WheelchairPlaces",
								"id": 282
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						375,
						383,
						399,
						403,
						401,
						388,
						386,
						385,
						384,
						406,
						381,
						380,
						394,
						377,
						379,
						376,
						387,
						390,
						398,
						389,
						404,
						393,
						405,
						407,
						395,
						382,
						378,
						402,
						396,
						392,
						397,
						400,
						391
					]
				}
			],
			"sources": [
				{
					"fileName": "Accessibility.ts",
					"line": 25,
					"character": 30
				}
			]
		},
		{
			"id": 12,
			"name": "AccessibilitySchemaExtension",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes additional data that can be stored within a SimpleSchema for accessibility data"
			},
			"typeParameter": [
				{
					"id": 13,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 25,
					"name": "componentHint",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Which component should be used for this field"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 81,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 28,
					"name": "deprecated",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "This field is deprecated, should not be used anymore"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 93,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 15,
					"name": "description",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Description for this accessibility field"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 50,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 14,
					"name": "example",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Example value for this accessibility field"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 46,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 16,
					"name": "extendedInformationUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "uri to a wiki or explanation page for this field"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 54,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 26,
					"name": "inseparable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Can this fields sub-fields be chosen for individual inspection?"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 85,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 24,
					"name": "machineData",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Should this field be presented to users?"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 77,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 17,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "List of explicit choices with translated label"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 58,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"name": "Array",
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 18,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 20,
											"name": "label",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "SimpleSchemaExtensions.ts",
													"line": 60,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 19,
											"name": "value",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "SimpleSchemaExtensions.ts",
													"line": 59,
													"character": 9
												}
											],
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												20,
												19
											]
										}
									],
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 58,
											"character": 18
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 27,
					"name": "preferredUnit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The preferred unit this field is usually documented in (e.g. seconds, meter, centimeter)"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 89,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 21,
					"name": "question",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "End user question to be asked"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 65,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "QuestionValue",
						"id": 57,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "T"
							}
						]
					}
				},
				{
					"id": 23,
					"name": "questionBlockBegin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "End user question to be asked when starting a new accessibility block (toilet, entrance, beds...)"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 73,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "QuestionValue",
						"id": 57,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "T"
							}
						]
					}
				},
				{
					"id": 22,
					"name": "questionMore",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "End user question to be asked when more array entries should be added"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 69,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "QuestionValue",
						"id": 57,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "T"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						25,
						28,
						15,
						14,
						16,
						26,
						24,
						17,
						27,
						21,
						23,
						22
					]
				}
			],
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 42,
					"character": 45
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "EvaluatedAccessibilitySchemaExtension",
					"id": 29
				}
			]
		},
		{
			"id": 362,
			"name": "AnimalPolicy",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 366,
					"name": "allowsAnyAnimals",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the place allows bringing any kind of animal, `false` or `undefined` if not or if there are exceptions."
					},
					"sources": [
						{
							"fileName": "AnimalPolicy.ts",
							"line": 21,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 364,
					"name": "allowsDogs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the place allows visitors to bring dogs in general, `false` if bringing them is explicitly prohibited (with exception of dogs specified by `allowsGuideDogs` and `allowsTherapyAnimals`), `undefined` if the policy is unknown."
					},
					"sources": [
						{
							"fileName": "AnimalPolicy.ts",
							"line": 13,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 363,
					"name": "allowsGuideDogs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the place allows visitors to bring guide dogs, `false` if bringing them is explicitly prohibited, `undefined` if the policy is unknown."
					},
					"sources": [
						{
							"fileName": "AnimalPolicy.ts",
							"line": 9,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 365,
					"name": "dogsNeedMuzzle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the place denies entry to visitors bringing a dogs without muzzles, `false` if dogs without muzzles are explicitly allowed."
					},
					"sources": [
						{
							"fileName": "AnimalPolicy.ts",
							"line": 17,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 367,
					"name": "suppliesWaterForPets",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the place supplies water for accompanying animals, `false` if explicitly not, or `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "AnimalPolicy.ts",
							"line": 25,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						366,
						364,
						363,
						365,
						367
					]
				}
			],
			"sources": [
				{
					"fileName": "AnimalPolicy.ts",
					"line": 5,
					"character": 29
				}
			]
		},
		{
			"id": 146,
			"name": "Door",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes the door of a place's entrance or to one of its facilities (e.g. to a shower, or to an elevator)"
			},
			"children": [
				{
					"id": 148,
					"name": "doorOpensToOutside",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the door opens to the outside, `false` if it opens to the inside, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Door.ts",
							"line": 19,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 151,
					"name": "hasClearMarkingOnGlassDoor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the door is a glass door, but is marked, `false` if the door is an unmarked glass door, `undefined` if it is no glass door or it is unknown."
					},
					"sources": [
						{
							"fileName": "Door.ts",
							"line": 34,
							"character": 28
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 153,
					"name": "hasErgonomicDoorHandle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the door's handle is easy to use (subjectively by the assessor), `false` if not, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Door.ts",
							"line": 44,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 149,
					"name": "isAutomaticOrAlwaysOpen",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the door is always open or automatic, `false` if it has to be opened manually, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Door.ts",
							"line": 24,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 152,
					"name": "isEasyToHoldOpen",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the door is easy to hold open (subjectively by the assessor), `false` if not, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Door.ts",
							"line": 39,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 154,
					"name": "isRevolving",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the door is revolving, `false` if not, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Door.ts",
							"line": 49,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 156,
					"name": "needsEuroKey",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if you need a [Euro key](https://en.wikipedia.org/wiki/Euro_key) to open the door, `false` if it's in Europe outside UK and works without a key, `undefined` if it is unknown or needs a different key."
					},
					"sources": [
						{
							"fileName": "Door.ts",
							"line": 57,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 155,
					"name": "needsRadarKey",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if you need a [RADAR key](https://en.wikipedia.org/wiki/Disability_Rights_UK#National_Key_Scheme) to open the door, `false` if it's in the UK but you need no key, `undefined` if it is unknown or needs a different key."
					},
					"sources": [
						{
							"fileName": "Door.ts",
							"line": 53,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 147,
					"name": "turningSpaceInFront",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Turning space in front of the door."
					},
					"sources": [
						{
							"fileName": "Door.ts",
							"line": 15,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 150,
					"name": "width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of the door."
					},
					"sources": [
						{
							"fileName": "Door.ts",
							"line": 29,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						148,
						151,
						153,
						149,
						152,
						154,
						156,
						155,
						147,
						150
					]
				}
			],
			"sources": [
				{
					"fileName": "Door.ts",
					"line": 11,
					"character": 21
				}
			]
		},
		{
			"id": 180,
			"name": "Entrance",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes an entrance to a place."
			},
			"children": [
				{
					"id": 188,
					"name": "door",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": " Object that describes the entrance’s door. `null` if there is no doof, `undefined` if it is unknown."
					},
					"sources": [
						{
							"fileName": "Entrance.ts",
							"line": 48,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Door",
								"id": 146
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 189,
					"name": "elevatorEquipmentId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": " reference to the equipment id if this entrance is an elevator (on accessibility.cloud)"
					},
					"sources": [
						{
							"fileName": "Entrance.ts",
							"line": 52,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 184,
					"name": "hasFixedRamp",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if this entrance has a fixed ramp, `false` if not, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Entrance.ts",
							"line": 30,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 186,
					"name": "hasRemovableRamp",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": " `true` if there is a removable ramp, `false` if not, `undefined` if unknown. If there is a fixed ramp, this property MUST be `undefined`."
					},
					"sources": [
						{
							"fileName": "Entrance.ts",
							"line": 39,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 190,
					"name": "intercomEquipmentId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "reference to the equipment id of the intercom of this entrance (on accessibility.cloud)"
					},
					"sources": [
						{
							"fileName": "Entrance.ts",
							"line": 56,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 183,
					"name": "isLevel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if this entrance has no steps and needs no ramp, `false` if there are steps or a ramp, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Entrance.ts",
							"line": 26,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 182,
					"name": "isMainEntrance",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if this is the main entrance, `false` if not, `undefined` if unknown. If there is only one entrance, this attribute SHOULD be `undefined`."
					},
					"sources": [
						{
							"fileName": "Entrance.ts",
							"line": 21,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 181,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Name of the entrance (helpful if there are multiple entrances)."
					},
					"sources": [
						{
							"fileName": "Entrance.ts",
							"line": 17,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 185,
					"name": "slopeAngle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "grade in percent as calculated by `100 * rise / run` or the tangent of the angle of inclination times 100, or `undefined` if there is no slope."
					},
					"sources": [
						{
							"fileName": "Entrance.ts",
							"line": 35,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 187,
					"name": "stairs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": " Object that describes stairs that you have to take to use the entrance."
					},
					"sources": [
						{
							"fileName": "Entrance.ts",
							"line": 44,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Stairs",
						"id": 166
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						188,
						189,
						184,
						186,
						190,
						183,
						182,
						181,
						185,
						187
					]
				}
			],
			"sources": [
				{
					"fileName": "Entrance.ts",
					"line": 13,
					"character": 25
				}
			]
		},
		{
			"id": 489,
			"name": "EquipmentInfo",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes a facility equipment that is part of a place, like an elevator, an escalator, or a\nsitemap. Can contain attributes that are realtime updated to indicate operational status."
			},
			"children": [
				{
					"id": 490,
					"name": "formatVersion",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The format version this place info document was created with\n(Uses the npm module version from `package.json`)\nNot used right now, but added for future compatibility."
					},
					"sources": [
						{
							"fileName": "EquipmentInfo.ts",
							"line": 20,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 492,
					"name": "geometry",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The physical location of the place in WGS84 coordinates. Currently only a GeoJSON `PointGeometry` is supported."
					},
					"sources": [
						{
							"fileName": "EquipmentInfo.ts",
							"line": 25,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "PointGeometry",
						"id": 436
					}
				},
				{
					"id": 491,
					"name": "properties",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "EquipmentInfo.ts",
							"line": 21,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "EquipmentProperties",
						"id": 447
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						490,
						492,
						491
					]
				}
			],
			"sources": [
				{
					"fileName": "EquipmentInfo.ts",
					"line": 14,
					"character": 30
				}
			]
		},
		{
			"id": 447,
			"name": "EquipmentProperties",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 473,
					"name": "alternativeRouteInstructions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Short alternative routing instructions for travelers when they cannot use this facility.",
						"text": "The text MUST NOT have abbreviations to be readable aloud by a screen reader or voice\nassistant.\n\nSoftware using this attribute MUST NOT assume that the equipment is out of operation if it the\nattribute is defined.\n",
						"tags": [
							{
								"tag": "example",
								"text": "‘Take the elevator near the Main Street entrance.’\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 218,
							"character": 30
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 454,
					"name": "cabinLength",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Length / depth of the cabin when facing the equipment’s entrance, or `undefined` if the equipment has no cabin. For a hoist, this refers to the hoist platform itself."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 101,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 453,
					"name": "cabinWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Width of the cabin when facing the equipment’s entrance, or `undefined` if the equipment has no cabin. For a hoist, this refers to the hoist platform itself."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 96,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 451,
					"name": "category",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Type of the equipment or facility."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 85,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "EquipmentTypes",
						"id": 486
					}
				},
				{
					"id": 448,
					"name": "description",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Describes where the equipment is located. If only one description string is technically\npossible to maintain, it MUST not contain any abbreviations to allow being readable aloud by\nscreen readers or voice assistants.",
						"tags": [
							{
								"tag": "example",
								"text": "‘Between ticket counter and Central Line platforms’, ‘From basement upwards towards Main Street exit’\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 55,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 479,
					"name": "disruptionSourceImportId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Data source ID of a secondary source used for realtime status info on accessibility.cloud"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 265,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 455,
					"name": "door",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Object describing the door to the equipment, or `undefined` if there is no door."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 106,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "Door",
						"id": 146
					}
				},
				{
					"id": 460,
					"name": "hasBrailleText",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the equipment’s controls or signs are printed in braille letters, `false` if not, or `undefined` if this is unknown."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 131,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 456,
					"name": "hasDoorsInBothDirections",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the equipment has doors in two directions, so wheelchair, rollator, bike or pushchair users do not have to move backwards to exit."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 111,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 465,
					"name": "hasHeadPhoneJack",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the equipment has a headphone jack for speech output (common for ATMs), `false` if not, or `undefined` if this is unknown."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 155,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 463,
					"name": "hasLargePrint",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the equipment’s controls or signs do not use small fonts, `false` if they do, or `undefined` if this is unknown."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 146,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 459,
					"name": "hasRaisedText",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the equipment’s controls or signs have raised letters, `false` if not, or `undefined` if this is unknown."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 126,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 461,
					"name": "hasSpeech",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the equipment has speech output, `false` if not, or `undefined` if this is unknown."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 136,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 452,
					"name": "heightOfControls",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Height of the lowest working controls that are needed to operate this equipment.\n`undefined` if the equipment needs no controls."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 91,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 485,
					"name": "ids",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "IDs of this equipment in external data sources, for example in GTFS, IMDF or other sources."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 298,
							"character": 5
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayLike",
						"typeArguments": [
							{
								"type": "reference",
								"name": "ExternalId",
								"id": 442
							}
						]
					}
				},
				{
					"id": 466,
					"name": "isEasyToUnderstand",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the equipment is easy to operate, `false` if people might face difficulties trying to understand how the equipment works, or `undefined` if this is unknown or irrelevant."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 160,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 462,
					"name": "isHighContrast",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the equipment’s controls or signs have high contrast, `false` if not, or `undefined` if this is unknown."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 141,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 458,
					"name": "isIndoors",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the equipment is indoors, `false` if it’s fully or partially outdoors, or `undefined` if this is unknown."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 121,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 464,
					"name": "isVoiceActivated",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the equipment needs to be activated by voice, `false` if not, or `undefined` if this is unknown."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 151,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 471,
					"name": "isWorking",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Live status update.",
						"text": "`true` if the equipment is in operation, `false` if not, or `undefined` if it is unknown. When\nreading this attribute for showing it in a user interface, the user interface MUST show the\noperational status as ‘unknown’ if the status could be out of date, for example if it is older\nthan 10 minutes.\n\nWhen displaying the operational status, user interfaces SHOULD show the date saved in\n`stateLastUpdate` next to the operational status additionally for transparency.\n"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 195,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 457,
					"name": "languages",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Languages of the equipment’s visible controls and/or voice output."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 116,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayLike",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IetfLanguageTagOrSignLanguageCode",
								"id": 276
							}
						]
					}
				},
				{
					"id": 449,
					"name": "longDescription",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Contains the same information as description, but in a longer form which can be read out by a\nscreen reader or voice assistant.",
						"text": "Words MUST be written out fully (e.g. ‘direction’ instead of ‘dir.‘, ‘ground’ instead of ‘G‘,\n‘platform’ instead of ‘pl.’). The field MUST NOT contain any symbols (e.g. \\`->\\`, \\`<->\\`,\nor \\`→\\`).\n\nThis MUST be suitable for people who have a visual impairment or use a screen reader or voice\nassistant (e.g. Amazon’s Alexa).\n\nIf only one description field can be used for technical reasons, then the written-out form\nMUST be given preference, because a short form can be generated from the long form more easily\nthan the other way around.\n\nThis attribute SHOULD be used as \\`aria-label\\`-attribute in web content.\n"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 73,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 467,
					"name": "manufacturerName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Official name of the company that manufactured the equipment."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 165,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 468,
					"name": "manufacturerSerialNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Manufacturer serial number of the equipment / facility.",
						"text": "Intentionally not localizable to allow matching with other data, e.g. from manufacturer's own APIs.\n"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 172,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 483,
					"name": "originalData",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Original source data for this equipment (for easier debugging)"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 287,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 484,
					"name": "originalId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of this equipment in the original data source. To simplify communication with the operator,\nit’s a good idea to use the operator facility management system ID here."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 293,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 482,
					"name": "originalPlaceInfoId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the place that this equipment belongs to (unique in the original data source)"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 282,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 472,
					"name": "outOfOrderReason",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Live status update.",
						"text": "Reason why the equipment is not in operation. MUST be `undefined` if the equipment is in\noperation.\n",
						"tags": [
							{
								"tag": "example",
								"text": "‘Construction work’, ‘Vandalism’, ’Because of renovations the elevator on the west side is expected to be unavailable until April 1’\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 205,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 480,
					"name": "placeInfoId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Place info ID that this equipment belongs to (accessibility.cloud ID)"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 270,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 481,
					"name": "placeSourceId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "ID of the place data source that this equipment belongs to (accessibility.cloud ID)"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 276,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 476,
					"name": "plannedCompletionDate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Live status update.",
						"text": "If `isWorking` is false, this is the planned date when the equipment will be in operation\nagain.\n\nMUST be `undefined` if the facility is currently in operation.\n"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 250,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					}
				},
				{
					"id": 469,
					"name": "servicePhoneNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Phone number where a service operator can be reached for help using this facility."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 177,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 470,
					"name": "serviceWebsiteUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "URL pointing to a website that describes the equipnent or it's current operational status."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 182,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 450,
					"name": "shortDescription",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Contains the same information as description, but in a shorter form, to save space on the\nscreen. This CAN contain Unicode characters such as ⟷ or ↘︎ as well as abbreviations (e.g.\n‘pl.’ instead of ‘platform’, ‘dir.’ instead of ‘direction’)."
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 80,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 477,
					"name": "sourceId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Data source ID on accessibility.cloud"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 255,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 478,
					"name": "sourceImportId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Data import ID on accessibility.cloud"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 260,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 474,
					"name": "stateExplanation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Live status update.",
						"text": "Information about the current state. If `isWorking` is true, this can show information about\nfuture planned maintenance or construction work rendering this facility unusable.\n\nThe text MUST NOT have abbreviations to be readable aloud by a screen reader or voice\nassistant.\n\nThis field SHOULD only be used if a separation into individual disorder attributes\n(`state`, `outOfOrderReason`) is not technically possible (e.g. when existing APIs can not\nbe further developed and users are only given one text field to describe the problem.)\n"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 233,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 475,
					"name": "stateLastUpdate",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Live status update.",
						"text": "Date when the `isWorking` flag was updated by a realtime system.\n"
					},
					"sources": [
						{
							"fileName": "EquipmentProperties.ts",
							"line": 240,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "Date"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						473,
						454,
						453,
						451,
						448,
						479,
						455,
						460,
						456,
						465,
						463,
						459,
						461,
						452,
						485,
						466,
						462,
						458,
						464,
						471,
						457,
						449,
						467,
						468,
						483,
						484,
						482,
						472,
						480,
						481,
						476,
						469,
						470,
						450,
						477,
						478,
						474,
						475
					]
				}
			],
			"sources": [
				{
					"fileName": "EquipmentProperties.ts",
					"line": 47,
					"character": 36
				}
			]
		},
		{
			"id": 29,
			"name": "EvaluatedAccessibilitySchemaExtension",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"typeParameter": [
				{
					"id": 30,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"children": [
				{
					"id": 42,
					"name": "componentHint",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Which component should be used for this field"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 81,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.componentHint",
						"id": 25
					}
				},
				{
					"id": 45,
					"name": "deprecated",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "This field is deprecated, should not be used anymore"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 93,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.deprecated",
						"id": 28
					}
				},
				{
					"id": 35,
					"name": "description",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Description for this accessibility field"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 50,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.description",
						"id": 15
					}
				},
				{
					"id": 34,
					"name": "example",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Example value for this accessibility field"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 46,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.example",
						"id": 14
					}
				},
				{
					"id": 36,
					"name": "extendedInformationUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "uri to a wiki or explanation page for this field"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 54,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.extendedInformationUrl",
						"id": 16
					}
				},
				{
					"id": 43,
					"name": "inseparable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Can this fields sub-fields be chosen for individual inspection?"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 85,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.inseparable",
						"id": 26
					}
				},
				{
					"id": 41,
					"name": "machineData",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Should this field be presented to users?"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 77,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.machineData",
						"id": 24
					}
				},
				{
					"id": 37,
					"name": "options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "List of explicit choices with translated label"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 58,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"name": "Array",
						"typeArguments": [
							{
								"type": "reflection",
								"declaration": {
									"id": 38,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 40,
											"name": "label",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "SimpleSchemaExtensions.ts",
													"line": 60,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 39,
											"name": "value",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "SimpleSchemaExtensions.ts",
													"line": 59,
													"character": 9
												}
											],
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												40,
												39
											]
										}
									],
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 58,
											"character": 18
										}
									]
								}
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.options",
						"id": 17
					}
				},
				{
					"id": 44,
					"name": "preferredUnit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The preferred unit this field is usually documented in (e.g. seconds, meter, centimeter)"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 89,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.preferredUnit",
						"id": 27
					}
				},
				{
					"id": 31,
					"name": "question",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "End user question to be asked"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 100,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.question",
						"id": 21
					}
				},
				{
					"id": 33,
					"name": "questionBlockBegin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "End user question to be asked when starting a new accessibility block (toilet, entrance, beds...)"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 108,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.questionBlockBegin",
						"id": 23
					}
				},
				{
					"id": 32,
					"name": "questionMore",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "End user question to be asked when more array entries should be added"
					},
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 104,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"overwrites": {
						"type": "reference",
						"name": "AccessibilitySchemaExtension.questionMore",
						"id": 22
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						42,
						45,
						35,
						34,
						36,
						43,
						41,
						37,
						44,
						31,
						33,
						32
					]
				}
			],
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 96,
					"character": 54
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "AccessibilitySchemaExtension",
					"id": 12,
					"typeArguments": [
						{
							"type": "typeParameter",
							"name": "T"
						}
					]
				}
			]
		},
		{
			"id": 442,
			"name": "ExternalId",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 445,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ExternalId.ts",
							"line": 12,
							"character": 4
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 443,
					"name": "provider",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "ExternalId.ts",
							"line": 8,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 444,
					"name": "schemaName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "ExternalId.ts",
							"line": 10,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						445,
						443,
						444
					]
				}
			],
			"sources": [
				{
					"fileName": "ExternalId.ts",
					"line": 6,
					"character": 27
				}
			]
		},
		{
			"id": 216,
			"name": "FoldingHandles",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 220,
					"name": "distanceBetweenHandles",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates how far the handles are apart."
					},
					"sources": [
						{
							"fileName": "FoldingHandles.ts",
							"line": 23,
							"character": 24
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 217,
					"name": "onUsersLeftSide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if there is a folding handle on left side (from the perspective of somebody using the\ntoilet), `false` if not, `undefined` if condition is unknown."
					},
					"sources": [
						{
							"fileName": "FoldingHandles.ts",
							"line": 10,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 218,
					"name": "onUsersRightSide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if there is a folding handle on right side (from the perspective of somebody using the\ntoilet), `false` if not, `undefined` if condition is unknown."
					},
					"sources": [
						{
							"fileName": "FoldingHandles.ts",
							"line": 15,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 219,
					"name": "topHeightFromFloor",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates how high the folding handles are (top edge, measured from the floor)."
					},
					"sources": [
						{
							"fileName": "FoldingHandles.ts",
							"line": 19,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						220,
						217,
						218,
						219
					]
				}
			],
			"sources": [
				{
					"fileName": "FoldingHandles.ts",
					"line": 5,
					"character": 31
				}
			]
		},
		{
			"id": 354,
			"name": "Ground",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 357,
					"name": "distanceToDroppedCurb",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Specifies the distance between the main entrance and the next dropped curb if the place is\nreachable from a street.",
						"text": "If people with mobility impairments have to use a secondary entrance, the walking distance\nbetween this entrance and the main entrance has to be added to this value.\n"
					},
					"sources": [
						{
							"fileName": "Ground.ts",
							"line": 23,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 359,
					"name": "evenPavement",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the pavement is even and not plastered, `false` if not. `undefined` if this condition\nis unknown."
					},
					"sources": [
						{
							"fileName": "Ground.ts",
							"line": 34,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 356,
					"name": "isLevel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the ground is level, `false` if not, `undefined` if the condition is unknown."
					},
					"sources": [
						{
							"fileName": "Ground.ts",
							"line": 15,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 355,
					"name": "sidewalkConditions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Rating value (range `[0..1]`) with subjective sidewalk conditions."
					},
					"sources": [
						{
							"fileName": "Ground.ts",
							"line": 11,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 358,
					"name": "slopeAngle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Angle of the slope that this ground has, if applicable. `undefined` if the slope is unknown."
					},
					"sources": [
						{
							"fileName": "Ground.ts",
							"line": 28,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 360,
					"name": "turningSpace",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Turning space that this ground provides to people."
					},
					"sources": [
						{
							"fileName": "Ground.ts",
							"line": 39,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						357,
						359,
						356,
						355,
						358,
						360
					]
				}
			],
			"sources": [
				{
					"fileName": "Ground.ts",
					"line": 7,
					"character": 23
				}
			]
		},
		{
			"id": 286,
			"name": "Media",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes a media unit provided at this place, for example an exhibit at a museum or a movie in\na cinema."
			},
			"children": [
				{
					"id": 292,
					"name": "hasContrastingBackground",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "If the media unit is printed or on a screen, does it have high contrast between background and\nforeground?"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 49,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 293,
					"name": "hasDedicatedScreenForSubtitles",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Relevant for movies, screens and presentations: Is there a dedicated screen where subtitles can\nbe read?"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 55,
							"character": 32
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 296,
					"name": "hasPlainLanguageOption",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Is the media unit provided in a [Plain Language](https://en.wikipedia.org/wiki/Plain_language) option?"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 70,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 295,
					"name": "hasRealTimeCaptioning",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Does the media unit have [real time captioning](https://www.washington.edu/doit/what-real-time-captioning)?"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 65,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 294,
					"name": "hasSubtitles",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Is the media unit provided with subtitles?"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 60,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 290,
					"name": "isAudio",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Is the media unit consumable as audio-only option?"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 38,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 289,
					"name": "isBraille",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Is the media unit consumable or described for Braille readers?"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 33,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 291,
					"name": "isLargePrint",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "If the media unit is printed, is the print large?"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 43,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 297,
					"name": "languages",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Specifies which languages (including sign languages) in which the media unit is provided"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 75,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayLike",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IetfLanguageTagOrSignLanguageCode",
								"id": 276
							}
						]
					}
				},
				{
					"id": 288,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Name of the media unit (relevant if there are multiple units of the same kind)"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 28,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 298,
					"name": "turningSpaceInFront",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "If the media is consumed while the consumer is directly in front of it, this property specifies\nhow much turning space there is in front of it."
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 81,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 287,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Type of the media unit"
					},
					"sources": [
						{
							"fileName": "Media.ts",
							"line": 23,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "document"
							},
							{
								"type": "stringLiteral",
								"value": "menu"
							},
							{
								"type": "stringLiteral",
								"value": "guide"
							},
							{
								"type": "stringLiteral",
								"value": "presentation"
							},
							{
								"type": "stringLiteral",
								"value": "exhibit"
							},
							{
								"type": "stringLiteral",
								"value": "movie"
							},
							{
								"type": "stringLiteral",
								"value": "play"
							},
							{
								"type": "stringLiteral",
								"value": "screen"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						292,
						293,
						296,
						295,
						294,
						290,
						289,
						291,
						297,
						288,
						298,
						287
					]
				}
			],
			"sources": [
				{
					"fileName": "Media.ts",
					"line": 19,
					"character": 22
				}
			]
		},
		{
			"id": 198,
			"name": "Mirror",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 201,
					"name": "heightFromGround",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "How far is the mirror's bottom from the ground?"
					},
					"sources": [
						{
							"fileName": "Mirror.ts",
							"line": 19,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 200,
					"name": "isAccessibleWhileSeated",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "`true` if the mirror is accessible while sitting in a wheelchair, `false` if not, `undefined`\nif condition is unknown."
					},
					"sources": [
						{
							"fileName": "Mirror.ts",
							"line": 15,
							"character": 25
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 199,
					"name": "isLocatedInsideRestroom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the mirror is located inside the restroom, `false` if not, `undefined` if\ncondition is unknown."
					},
					"sources": [
						{
							"fileName": "Mirror.ts",
							"line": 10,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						201,
						200,
						199
					]
				}
			],
			"sources": [
				{
					"fileName": "Mirror.ts",
					"line": 5,
					"character": 23
				}
			]
		},
		{
			"id": 350,
			"name": "Parking",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 351,
					"name": "forWheelchairUsers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 146,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "WheelchairParking",
								"id": 338
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						351
					]
				}
			],
			"sources": [
				{
					"fileName": "Parking.ts",
					"line": 145,
					"character": 24
				}
			]
		},
		{
			"id": 332,
			"name": "Pathways",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes pathways inside a place."
			},
			"children": [
				{
					"id": 336,
					"name": "maxLateralSlope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Maximal lateral slope, in percent as calculated by `100 * rise / run` or the tangent of the angle of inclination, multiplied by 100"
					},
					"sources": [
						{
							"fileName": "Pathways.ts",
							"line": 30,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 335,
					"name": "maxLongitudinalSlope",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Maximal longitudinal slope, in percent as calculated by `100 * rise / run` or the tangent of the angle of inclination, multiplied by 100"
					},
					"sources": [
						{
							"fileName": "Pathways.ts",
							"line": 25,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 333,
					"name": "width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Width constraints of all pathways inside a place relevant for consumers."
					},
					"sources": [
						{
							"fileName": "Pathways.ts",
							"line": 15,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 334,
					"name": "widthAtObstacles",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Width constraints of all pathways inside a place relevant for consumers."
					},
					"sources": [
						{
							"fileName": "Pathways.ts",
							"line": 20,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						336,
						335,
						333,
						334
					]
				}
			],
			"sources": [
				{
					"fileName": "Pathways.ts",
					"line": 11,
					"character": 25
				}
			]
		},
		{
			"id": 300,
			"name": "Payment",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 306,
					"name": "acceptsBills",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Payment.ts",
							"line": 15,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 305,
					"name": "acceptsCoins",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Payment.ts",
							"line": 14,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 303,
					"name": "acceptsCreditCards",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Payment.ts",
							"line": 12,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 304,
					"name": "acceptsDebitCards",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Payment.ts",
							"line": 13,
							"character": 19
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 302,
					"name": "acceptsPaymentByMobilePhone",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Payment.ts",
							"line": 10,
							"character": 29
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 307,
					"name": "customPaymentMetaInfo",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Payment.ts",
							"line": 17,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Array",
						"typeArguments": [
							{
								"type": "reference",
								"name": "LocalizedString",
								"id": 158
							}
						]
					}
				},
				{
					"id": 301,
					"name": "hasPortablePaymentSystem",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Payment.ts",
							"line": 8,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						306,
						305,
						303,
						304,
						302,
						307,
						301
					]
				}
			],
			"sources": [
				{
					"fileName": "Payment.ts",
					"line": 7,
					"character": 24
				}
			]
		},
		{
			"id": 87,
			"name": "PersonalProfile",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes a person. This exists only to transform data from sources where no physical attributes\nof places have been captured as data directly. It's better to describe physical attributes of\nplaces and let people decide themselves which facilities they need or which place condition works\nfor them.",
				"tags": [
					{
						"tag": "deprecated",
						"text": "\n"
					}
				]
			},
			"children": [
				{
					"id": 94,
					"name": "blindness",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` for a person that has is blind."
					},
					"sources": [
						{
							"fileName": "PersonalProfile.ts",
							"line": 28,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 89,
					"name": "guideDog",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` for a person that has a guide dog."
					},
					"sources": [
						{
							"fileName": "PersonalProfile.ts",
							"line": 18,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 90,
					"name": "hearingImpairment",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` for a person that has a hearing impairment."
					},
					"sources": [
						{
							"fileName": "PersonalProfile.ts",
							"line": 20,
							"character": 19
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 91,
					"name": "learningImpairment",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` for a person that has a learning impairment."
					},
					"sources": [
						{
							"fileName": "PersonalProfile.ts",
							"line": 22,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 92,
					"name": "mobilityImpairment",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` for a person that has a mobility impairment."
					},
					"sources": [
						{
							"fileName": "PersonalProfile.ts",
							"line": 24,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 88,
					"name": "muteness",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` for a person that is inable to speak."
					},
					"sources": [
						{
							"fileName": "PersonalProfile.ts",
							"line": 16,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 93,
					"name": "visualImpairment",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` for a person that has a visual impairment."
					},
					"sources": [
						{
							"fileName": "PersonalProfile.ts",
							"line": 26,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 95,
					"name": "wheelchair",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` for a person that uses a wheelchair."
					},
					"sources": [
						{
							"fileName": "PersonalProfile.ts",
							"line": 30,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						94,
						89,
						90,
						91,
						92,
						88,
						93,
						95
					]
				}
			],
			"sources": [
				{
					"fileName": "PersonalProfile.ts",
					"line": 14,
					"character": 32
				}
			]
		},
		{
			"id": 514,
			"name": "PlaceInfo",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The PlaceInfo interface describes a physical location with added accessibility properties."
			},
			"children": [
				{
					"id": 515,
					"name": "formatVersion",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The format version this place info document was created with\n(Uses the npm module version from `package.json`)\nNot used right now, but added for future compatibility."
					},
					"sources": [
						{
							"fileName": "PlaceInfo.ts",
							"line": 18,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 517,
					"name": "geometry",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The physical location of the place in WGS84 coordinates. Currently only a GeoJSON `PointGeometry` is supported."
					},
					"sources": [
						{
							"fileName": "PlaceInfo.ts",
							"line": 26,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "Geometry",
						"id": 440
					}
				},
				{
					"id": 516,
					"name": "properties",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Holds additional place properties such as name and category and accessibility information"
					},
					"sources": [
						{
							"fileName": "PlaceInfo.ts",
							"line": 22,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "PlaceProperties",
						"id": 494
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						515,
						517,
						516
					]
				}
			],
			"sources": [
				{
					"fileName": "PlaceInfo.ts",
					"line": 12,
					"character": 26
				}
			]
		},
		{
			"id": 494,
			"name": "PlaceProperties",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 501,
					"name": "accessibility",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The accessibility of this place.\n`null` indicates that this place has no data, `undefined` or missing property indicates unknown."
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 49,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Accessibility",
								"id": 374
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 496,
					"name": "address",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The address of this place.\n`null` indicates that this place has no address, `undefined` or missing property indicates\nunknown."
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 22,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Address",
								"id": 435
							},
							{
								"type": "intrinsic",
								"name": "null"
							}
						]
					}
				},
				{
					"id": 500,
					"name": "category",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Category name of the place",
						"tags": [
							{
								"tag": "example",
								"text": "‘Restaurant’\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 43,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 503,
					"name": "creatorId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 56,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 497,
					"name": "description",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Text description containing helpful information for people with disabilities."
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 27,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 511,
					"name": "editPageUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "URL of the original data source’s website on a subpage that allows to edit the original data."
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 77,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 499,
					"name": "emailAddress",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Email address of the place's operator where you can get accessibility relevant information."
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 37,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 502,
					"name": "eventId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 55,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 508,
					"name": "ids",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 66,
							"character": 5
						}
					],
					"type": {
						"type": "reference",
						"name": "Array",
						"typeArguments": [
							{
								"type": "reference",
								"name": "ExternalId",
								"id": 442
							}
						]
					}
				},
				{
					"id": 510,
					"name": "infoPageUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "URL of the original data source’s website describing this place."
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 72,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 495,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The official name of this place."
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 16,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 509,
					"name": "originalData",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 67,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 507,
					"name": "originalId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 65,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 504,
					"name": "parentPlaceId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 60,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 498,
					"name": "phoneNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Phone number to call a representant of the place's operator."
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 32,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 512,
					"name": "placeWebsiteUrl",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "URL of the place’s own website."
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 82,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 505,
					"name": "sourceId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 61,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 506,
					"name": "sourceImportId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "PlaceProperties.ts",
							"line": 62,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						501,
						496,
						500,
						503,
						497,
						511,
						499,
						502,
						508,
						510,
						495,
						509,
						507,
						504,
						498,
						512,
						505,
						506
					]
				}
			],
			"sources": [
				{
					"fileName": "PlaceProperties.ts",
					"line": 11,
					"character": 32
				}
			]
		},
		{
			"id": 436,
			"name": "PointGeometry",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "[GeoJSON](https://tools.ietf.org/html/rfc7946) `Point` object."
			},
			"children": [
				{
					"id": 438,
					"name": "coordinates",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "Geometry.ts",
							"line": 11,
							"character": 13
						}
					],
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 437,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "Geometry.ts",
							"line": 10,
							"character": 6
						}
					],
					"type": {
						"type": "stringLiteral",
						"value": "Point"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						438,
						437
					]
				}
			],
			"sources": [
				{
					"fileName": "Geometry.ts",
					"line": 9,
					"character": 30
				}
			]
		},
		{
			"id": 97,
			"name": "Quantity",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes a quantity of a unit type."
			},
			"children": [
				{
					"id": 102,
					"name": "accuracy",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "± in given units, uniform error"
					},
					"sources": [
						{
							"fileName": "Units.ts",
							"line": 60,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 98,
					"name": "operator",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "the operator, indicating the value is not an absolute value"
					},
					"sources": [
						{
							"fileName": "Units.ts",
							"line": 52,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "Operator",
						"id": 108
					}
				},
				{
					"id": 101,
					"name": "rawValue",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "raw, imported value, eg. '90 .. 120cm' - only required when importing"
					},
					"sources": [
						{
							"fileName": "Units.ts",
							"line": 58,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 100,
					"name": "unit",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "one of the length units in js-quantities"
					},
					"sources": [
						{
							"fileName": "Units.ts",
							"line": 56,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 99,
					"name": "value",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "the value in the specified unit"
					},
					"sources": [
						{
							"fileName": "Units.ts",
							"line": 54,
							"character": 7
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						102,
						98,
						101,
						100,
						99
					]
				}
			],
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 50,
					"character": 25
				}
			]
		},
		{
			"id": 250,
			"name": "Restroom",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 258,
					"name": "entrance",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Object describing the entrance to this restroom."
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 76,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "Entrance",
						"id": 180
					}
				},
				{
					"id": 257,
					"name": "hasBathTub",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if there is a bath tub in this room, `false` if not, `undefined` if condition is\nunknown."
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 71,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 252,
					"name": "hasMirror",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the restroom has a mirror, `false` if not, `undefined` if condition is unknown."
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 47,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 259,
					"name": "hasShower",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the restroom has a shower, `false` if not, `undefined` if condition is unknown."
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 80,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 255,
					"name": "hasSupportRails",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if there support rails on the walls"
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 59,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 262,
					"name": "heightOfDrier",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "At which height from the floor is the drier or towel?"
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 93,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 261,
					"name": "heightOfSoap",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "At which height from the floor is the soap?"
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 89,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 264,
					"name": "isAccessibleWithWheelchair",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the room's relevant facilities are completely accessible while using a wheelchair,\n`false` if not, `undefined` if the condition is unknown or difficult to assess."
					},
					"sources": [
						{
							"fileName": "Room.ts",
							"line": 12,
							"character": 28
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "Room.isAccessibleWithWheelchair",
						"id": 193
					}
				},
				{
					"id": 253,
					"name": "mirror",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Describes a mirror, if existing."
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 51,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Mirror",
						"id": 198
					}
				},
				{
					"id": 260,
					"name": "shower",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Object describing a shower inside this restroom, if existing."
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 85,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Shower",
						"id": 236
					}
				},
				{
					"id": 251,
					"name": "signIcons",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Visible icons on the restroom’s sign"
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 43,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "Array",
						"typeArguments": [
							{
								"type": "reference",
								"name": "RestroomSignIcon",
								"id": 266
							}
						]
					}
				},
				{
					"id": 256,
					"name": "toilet",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Object describing a toilet inside the restroom, if existing."
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 63,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Toilet",
						"id": 225
					}
				},
				{
					"id": 254,
					"name": "turningSpaceInside",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "How wide is the space inside that is usable for turning?"
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 55,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 263,
					"name": "washBasin",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Object describing a wash basin belonging to this restroom. It can be outside of the restroom."
					},
					"sources": [
						{
							"fileName": "Restroom.ts",
							"line": 98,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "WashBasin",
						"id": 206
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						258,
						257,
						252,
						259,
						255,
						262,
						261,
						264,
						253,
						260,
						251,
						256,
						254,
						263
					]
				}
			],
			"sources": [
				{
					"fileName": "Restroom.ts",
					"line": 39,
					"character": 25
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "Room",
					"id": 192
				}
			]
		},
		{
			"id": 192,
			"name": "Room",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 193,
					"name": "isAccessibleWithWheelchair",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the room's relevant facilities are completely accessible while using a wheelchair,\n`false` if not, `undefined` if the condition is unknown or difficult to assess."
					},
					"sources": [
						{
							"fileName": "Room.ts",
							"line": 12,
							"character": 28
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						193
					]
				}
			],
			"sources": [
				{
					"fileName": "Room.ts",
					"line": 6,
					"character": 21
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"name": "Restroom",
					"id": 250
				}
			]
		},
		{
			"id": 236,
			"name": "Shower",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 245,
					"name": "hasErgonomicHandle",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the shower has an ergonomic handle, `false` if not, `undefined` if condition is\nunknown."
					},
					"sources": [
						{
							"fileName": "Shower.ts",
							"line": 46,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 242,
					"name": "hasShowerSeat",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the shower has a seat, `false` if not, `undefined` if condition is unknown.."
					},
					"sources": [
						{
							"fileName": "Shower.ts",
							"line": 32,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 239,
					"name": "hasSupportRails",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the shower has support rails, `false` if not, `undefined` if condition is unknown."
					},
					"sources": [
						{
							"fileName": "Shower.ts",
							"line": 19,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 238,
					"name": "isLevel",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the shower is step-free and level with the space in front of it, `false` if not,\n`undefined` if condition is unknown."
					},
					"sources": [
						{
							"fileName": "Shower.ts",
							"line": 15,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 244,
					"name": "showerSeatIsFolding",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the shower seat can be folded, `false` if not, `undefined` if condition is unknown."
					},
					"sources": [
						{
							"fileName": "Shower.ts",
							"line": 41,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 243,
					"name": "showerSeatIsRemovable",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the shower seat can be removed from the shower easily, `false` if not, `undefined`\nif condition is unknown."
					},
					"sources": [
						{
							"fileName": "Shower.ts",
							"line": 37,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 237,
					"name": "step",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "Shower.ts",
							"line": 10,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 241,
					"name": "supportRailsAreAboveAndBelowControls",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the support rails are above and below the controls, `false` if not, `undefined`\nif condition is unknown."
					},
					"sources": [
						{
							"fileName": "Shower.ts",
							"line": 28,
							"character": 38
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 240,
					"name": "supportRailsHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "At which height are the support rails? Measured from the top."
					},
					"sources": [
						{
							"fileName": "Shower.ts",
							"line": 23,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						245,
						242,
						239,
						238,
						244,
						243,
						237,
						241,
						240
					]
				}
			],
			"sources": [
				{
					"fileName": "Shower.ts",
					"line": 7,
					"character": 23
				}
			]
		},
		{
			"id": 277,
			"name": "Staff",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes the presence of staff and their qualifications and/or provided services."
			},
			"children": [
				{
					"id": 278,
					"name": "canSeeVisitorsFromInside",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the staff has means to see visitors from the inside at all times when the place is\nopen (for example a window or CCTV system), `false` if not, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Staff.ts",
							"line": 18,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 280,
					"name": "hasFreeAssistantForVisitors",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if there is an assistant for the duration of the visit that is free of charge, `false`\nif not, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Staff.ts",
							"line": 28,
							"character": 29
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 279,
					"name": "spokenLanguages",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Languages that the staff speaks, including sign language variants."
					},
					"sources": [
						{
							"fileName": "Staff.ts",
							"line": 22,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayLike",
						"typeArguments": [
							{
								"type": "reference",
								"name": "IetfLanguageTagOrSignLanguageCode",
								"id": 276
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						278,
						280,
						279
					]
				}
			],
			"sources": [
				{
					"fileName": "Staff.ts",
					"line": 13,
					"character": 22
				}
			]
		},
		{
			"id": 166,
			"name": "Stairs",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The `Stairs` interface describes one or more walkable stairs."
			},
			"children": [
				{
					"id": 174,
					"name": "alternativeMobileEquipmentIds",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "You SHOULD reference alternative equipment IDs with this field, for example elevators, escalators, or hoists."
					},
					"sources": [
						{
							"fileName": "Stairs.ts",
							"line": 43,
							"character": 31
						}
					],
					"type": {
						"type": "reference",
						"name": "Array",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 167,
					"name": "count",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Number of steps."
					},
					"sources": [
						{
							"fileName": "Stairs.ts",
							"line": 15,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 169,
					"name": "hasAntiSlipNosing",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if all relevant steps are made with anti-slip material."
					},
					"sources": [
						{
							"fileName": "Stairs.ts",
							"line": 23,
							"character": 19
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 173,
					"name": "hasBrailleNavigation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if there is braille navigation for this staircase, `false` if not, `undefined` if condition is unknown."
					},
					"sources": [
						{
							"fileName": "Stairs.ts",
							"line": 39,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 172,
					"name": "hasHandRail",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if there is a handrail covering all relevant steps, `false` if not, `undefined` if condition is unknown."
					},
					"sources": [
						{
							"fileName": "Stairs.ts",
							"line": 35,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 168,
					"name": "hasHighContrastNosing",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if all relevant steps have a high contrast nosing."
					},
					"sources": [
						{
							"fileName": "Stairs.ts",
							"line": 19,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 175,
					"name": "hasTactileSafetyStrips",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if all relevant steps have tactile safety surfaces, used as warnings, implying textures\ndetectable with the touch of a foot or sweep of a cane."
					},
					"sources": [
						{
							"fileName": "Stairs.ts",
							"line": 48,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 170,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "If there are multiple staircase, you SHOULD indicate a name for this staircase here."
					},
					"sources": [
						{
							"fileName": "Stairs.ts",
							"line": 27,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 171,
					"name": "stepHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates how high the steps if these stairs are (can be a range)."
					},
					"sources": [
						{
							"fileName": "Stairs.ts",
							"line": 31,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						174,
						167,
						169,
						173,
						172,
						168,
						175,
						170,
						171
					]
				}
			],
			"sources": [
				{
					"fileName": "Stairs.ts",
					"line": 11,
					"character": 23
				}
			]
		},
		{
			"id": 413,
			"name": "StructuredAddress",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The address of a places as Address as a series of structured attributes."
			},
			"children": [
				{
					"id": 421,
					"name": "areas",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "An array of named areas below the district and above street.\nIn some regions such areas might also contain street names,\nwhen individual street segments have names separate from the name of the whole road."
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 46,
							"character": 7
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "LocalizedString",
							"id": 158
						}
					}
				},
				{
					"id": 417,
					"name": "building",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Building name"
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 27,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 423,
					"name": "city",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "The name of the primary locality of the place."
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 55,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 428,
					"name": "countryCode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "A three-letter country code in ISO 3166-1 alpha-3, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3"
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 77,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 425,
					"name": "county",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "A division of a state; typically a secondary-level administrative division of a country or equivalent."
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 65,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 422,
					"name": "district",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "A division of city; typically an administrative unit within a larger\ncity or a customary name of a city's neighborhood."
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 51,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 418,
					"name": "house",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "House or street number."
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 31,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 416,
					"name": "level",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Contains level of place inside of a venue"
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 23,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 420,
					"name": "postalCode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "An alphanumeric string included in a postal address to\nfacilitate mail sorting (a.k.a. post code, postcode, or ZIP code)."
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 40,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 424,
					"name": "regions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "For address conventions where more than to levels of named areas above the city level are in use,\nthe regions attribute provides an array with all additional area names,\nordered by decreasing size (starting with the highest subdivision below state)"
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 61,
							"character": 9
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"name": "LocalizedString",
							"id": 158
						}
					}
				},
				{
					"id": 415,
					"name": "room",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Room name"
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 19,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 426,
					"name": "state",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "A division of a country; typically a first-level administrative division of a country and/or a geographical region."
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 69,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 427,
					"name": "stateCode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "A code/abbreviation for the state division of a country."
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 73,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 419,
					"name": "street",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Street name (in practice may also contain street number)."
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 35,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 414,
					"name": "text",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "A displayable, formatted address as rich text."
					},
					"sources": [
						{
							"fileName": "Address.ts",
							"line": 15,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						421,
						417,
						423,
						428,
						425,
						422,
						418,
						416,
						420,
						424,
						415,
						426,
						427,
						419,
						414
					]
				}
			],
			"sources": [
				{
					"fileName": "Address.ts",
					"line": 11,
					"character": 34
				}
			]
		},
		{
			"id": 309,
			"name": "Tables",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 310,
					"name": "height",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Height or heights of the tables at this place, measured from the top of the table surface."
					},
					"sources": [
						{
							"fileName": "Tables.ts",
							"line": 12,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 313,
					"name": "spaceBelowDepth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Indicates how deep the space below a table is for each user."
					},
					"sources": [
						{
							"fileName": "Tables.ts",
							"line": 24,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 311,
					"name": "spaceBelowHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Indicates how high the space below a table is."
					},
					"sources": [
						{
							"fileName": "Tables.ts",
							"line": 16,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 312,
					"name": "spaceBelowWidth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Indicates how wide the space below a table is for each user."
					},
					"sources": [
						{
							"fileName": "Tables.ts",
							"line": 20,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						310,
						313,
						311,
						312
					]
				}
			],
			"sources": [
				{
					"fileName": "Tables.ts",
					"line": 8,
					"character": 23
				}
			]
		},
		{
			"id": 225,
			"name": "Toilet",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 231,
					"name": "foldingHandles",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Object describing the folding handles."
					},
					"sources": [
						{
							"fileName": "Toilet.ts",
							"line": 34,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"name": "FoldingHandles",
						"id": 216
					}
				},
				{
					"id": 230,
					"name": "hasFoldingHandles",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Does the toilet have folding handles?"
					},
					"sources": [
						{
							"fileName": "Toilet.ts",
							"line": 30,
							"character": 19
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 226,
					"name": "heightOfBase",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Indicates the height of the toilet’s base."
					},
					"sources": [
						{
							"fileName": "Toilet.ts",
							"line": 12,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 229,
					"name": "spaceInFront",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "How much space is in front of the toilet?"
					},
					"sources": [
						{
							"fileName": "Toilet.ts",
							"line": 26,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 227,
					"name": "spaceOnUsersLeftSide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "How much space is on the left side of the toilet? (from the perspective of somebody using the\ntoilet)"
					},
					"sources": [
						{
							"fileName": "Toilet.ts",
							"line": 17,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 228,
					"name": "spaceOnUsersRightSide",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "How much space is on the right side of the toilet? (from the perspective of somebody using the\ntoilet)"
					},
					"sources": [
						{
							"fileName": "Toilet.ts",
							"line": 22,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						231,
						230,
						226,
						229,
						227,
						228
					]
				}
			],
			"sources": [
				{
					"fileName": "Toilet.ts",
					"line": 8,
					"character": 23
				}
			]
		},
		{
			"id": 206,
			"name": "WashBasin",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"children": [
				{
					"id": 208,
					"name": "accessibleWithWheelchair",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the wash basin is accessible with wheelchairs, `false` if not, `undefined`\nif condition is unknown."
					},
					"sources": [
						{
							"fileName": "WashBasin.ts",
							"line": 16,
							"character": 26
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 209,
					"name": "height",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Defines at which height is the wash basin's top"
					},
					"sources": [
						{
							"fileName": "WashBasin.ts",
							"line": 21,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 207,
					"name": "isLocatedInsideRestroom",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the restroom's wash basin is inside the cabin, `false` if not, `undefined`\nif condition is unknown."
					},
					"sources": [
						{
							"fileName": "WashBasin.ts",
							"line": 10,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 211,
					"name": "spaceBelowDepth",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "How deep is the space below the wash basin?"
					},
					"sources": [
						{
							"fileName": "WashBasin.ts",
							"line": 31,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 210,
					"name": "spaceBelowHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "How high is the space below the wash basin?"
					},
					"sources": [
						{
							"fileName": "WashBasin.ts",
							"line": 26,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						208,
						209,
						207,
						211,
						210
					]
				}
			],
			"sources": [
				{
					"fileName": "WashBasin.ts",
					"line": 5,
					"character": 26
				}
			]
		},
		{
			"id": 338,
			"name": "WheelchairParking",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes one or more wheelchair parking lots."
			},
			"children": [
				{
					"id": 341,
					"name": "count",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Defines many wheelchair accessible parking lots are provided"
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 27,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 340,
					"name": "distanceToEntrance",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "How far away is the parking from the main entrance? If there is a separate wheelchair entrance,\nthe distance to this entrance MUST be used."
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 22,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 346,
					"name": "hasDedicatedSignage",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if there is dedicated signage at all relevant turning points from the street to the\nparking, `false` if not, `undefined` if this is unknown."
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 54,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 342,
					"name": "isLocatedInside",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the parking is inside a building or under a roof, `false` if not, `undefined` if\nunknown."
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 33,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 344,
					"name": "length",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Length constraint of the parking lots."
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 43,
							"character": 8
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 339,
					"name": "location",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Describes where the parking is located."
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 16,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "LocalizedString",
						"id": 158
					}
				},
				{
					"id": 345,
					"name": "maxVehicleHeight",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Maximal allowed vehicle height for users of this parking."
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 48,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				},
				{
					"id": 349,
					"name": "neededParkingPermits",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "List of permit names that allow using this parking.",
						"tags": [
							{
								"tag": "example",
								"text": "`['Blue Badge', 'Red badge', 'Turqouise badge']\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 71,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"name": "ArrayLike",
						"typeArguments": [
							{
								"type": "reference",
								"name": "LocalizedString",
								"id": 158
							}
						]
					}
				},
				{
					"id": 347,
					"name": "paymentBySpace",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the parking has to be paid by space, `false` if not, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 59,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 348,
					"name": "paymentByZone",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "`true` if the parking has to be paid by parking zone, `false` if not, `undefined` if unknown."
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 64,
							"character": 15
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				},
				{
					"id": 343,
					"name": "width",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Width constraint of the parking lots."
					},
					"sources": [
						{
							"fileName": "Parking.ts",
							"line": 38,
							"character": 7
						}
					],
					"type": {
						"type": "reference",
						"name": "Length",
						"id": 139
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						341,
						340,
						346,
						342,
						344,
						339,
						345,
						349,
						347,
						348,
						343
					]
				}
			],
			"sources": [
				{
					"fileName": "Parking.ts",
					"line": 12,
					"character": 34
				}
			]
		},
		{
			"id": 282,
			"name": "WheelchairPlaces",
			"kind": 256,
			"kindString": "Interface",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The WheelchairPlaces interface describes the presence of reserved spots for wheelchairs."
			},
			"children": [
				{
					"id": 283,
					"name": "count",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The amount of places for wheelchairs."
					},
					"sources": [
						{
							"fileName": "WheelchairPlaces.ts",
							"line": 13,
							"character": 7
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 284,
					"name": "hasSpaceForAssistant",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExported": true,
						"isOptional": true
					},
					"comment": {
						"shortText": "Is there additional space for an assistant?"
					},
					"sources": [
						{
							"fileName": "WheelchairPlaces.ts",
							"line": 17,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "false"
							},
							{
								"type": "intrinsic",
								"name": "true"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						283,
						284
					]
				}
			],
			"sources": [
				{
					"fileName": "WheelchairPlaces.ts",
					"line": 9,
					"character": 33
				}
			]
		},
		{
			"id": 664,
			"name": "A11yRating",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "rules/WheelmapA11yRuleset.ts",
					"line": 61,
					"character": 22
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "yes"
					},
					{
						"type": "stringLiteral",
						"value": "no"
					},
					{
						"type": "stringLiteral",
						"value": "partial"
					},
					{
						"type": "stringLiteral",
						"value": "unknown"
					}
				]
			}
		},
		{
			"id": 435,
			"name": "Address",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A union type between StructuredAddress and string"
			},
			"sources": [
				{
					"fileName": "Address.ts",
					"line": 231,
					"character": 19
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "StructuredAddress",
						"id": 413
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			}
		},
		{
			"id": 577,
			"name": "AndRule",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 39,
					"character": 12
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 578,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 579,
							"name": "$and",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 40,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "ReadonlyArray",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Rule",
										"id": 580
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								579
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 39,
							"character": 14
						}
					]
				}
			}
		},
		{
			"id": 541,
			"name": "Comparable",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 5,
					"character": 15
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reference",
						"name": "Quantity",
						"id": 97
					}
				]
			}
		},
		{
			"id": 548,
			"name": "DefinedValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 11,
					"character": 17
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 549,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 550,
							"name": "$defined",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 11,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								550
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 11,
							"character": 19
						}
					]
				}
			}
		},
		{
			"id": 563,
			"name": "Equals",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 16,
					"character": 11
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 564,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 565,
							"name": "$eq",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 16,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "Comparable",
								"id": 541
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								565
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 16,
							"character": 13
						}
					]
				}
			}
		},
		{
			"id": 486,
			"name": "EquipmentTypes",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "EquipmentProperties.ts",
					"line": 16,
					"character": 26
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "bed"
					},
					{
						"type": "stringLiteral",
						"value": "wardrobe"
					},
					{
						"type": "stringLiteral",
						"value": "elevator"
					},
					{
						"type": "stringLiteral",
						"value": "escalator"
					},
					{
						"type": "stringLiteral",
						"value": "movingWalkway"
					},
					{
						"type": "stringLiteral",
						"value": "ramp"
					},
					{
						"type": "stringLiteral",
						"value": "hoist"
					},
					{
						"type": "stringLiteral",
						"value": "stairLift"
					},
					{
						"type": "stringLiteral",
						"value": "switch"
					},
					{
						"type": "stringLiteral",
						"value": "sitemap"
					},
					{
						"type": "stringLiteral",
						"value": "vendingMachine"
					},
					{
						"type": "stringLiteral",
						"value": "intercom"
					},
					{
						"type": "stringLiteral",
						"value": "powerOutlet"
					}
				]
			}
		},
		{
			"id": 542,
			"name": "ExistsValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 7,
					"character": 16
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 543,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 544,
							"name": "$exists",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 7,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								544
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 7,
							"character": 18
						}
					]
				}
			}
		},
		{
			"id": 69,
			"name": "ExtendedSchema",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 154,
					"character": 26
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 70,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 71,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 72,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										71,
										72
									]
								}
							],
							"sources": [
								{
									"fileName": "SimpleSchemaExtensions.ts",
									"line": 154,
									"character": 28
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			}
		},
		{
			"id": 755,
			"name": "FieldTypes",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 100,
					"character": 15
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "yesno"
					},
					{
						"type": "stringLiteral",
						"value": "float"
					},
					{
						"type": "stringLiteral",
						"value": "int"
					}
				]
			}
		},
		{
			"id": 519,
			"name": "ForEachKeyInSchemasCallbackFunction",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "SchemaHelpers.ts",
					"line": 3,
					"character": 40
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 520,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"signatures": [
						{
							"id": 521,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 522,
									"name": "schema",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "SimpleSchema"
									}
								},
								{
									"id": 523,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 524,
									"name": "pathFromRoot",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 525,
									"name": "hasChildren",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					],
					"sources": [
						{
							"fileName": "SchemaHelpers.ts",
							"line": 3,
							"character": 42
						}
					]
				}
			}
		},
		{
			"id": 440,
			"name": "Geometry",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "Geometry.ts",
					"line": 31,
					"character": 20
				}
			],
			"type": {
				"type": "reference",
				"name": "PointGeometry",
				"id": 436
			}
		},
		{
			"id": 557,
			"name": "GreaterThan",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 14,
					"character": 16
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 558,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 559,
							"name": "$gt",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 14,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"name": "Comparable",
								"id": 541
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								559
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 14,
							"character": 18
						}
					]
				}
			}
		},
		{
			"id": 560,
			"name": "GreaterThanEquals",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 15,
					"character": 22
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 561,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 562,
							"name": "$gte",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 15,
									"character": 31
								}
							],
							"type": {
								"type": "reference",
								"name": "Comparable",
								"id": 541
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								562
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 15,
							"character": 24
						}
					]
				}
			}
		},
		{
			"id": 273,
			"name": "IetfLanguageTag",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "ietfLanguageTags.ts",
					"line": 898,
					"character": 27
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "af"
					},
					{
						"type": "stringLiteral",
						"value": "af-NA"
					},
					{
						"type": "stringLiteral",
						"value": "af-ZA"
					},
					{
						"type": "stringLiteral",
						"value": "agq"
					},
					{
						"type": "stringLiteral",
						"value": "agq-CM"
					},
					{
						"type": "stringLiteral",
						"value": "ak"
					},
					{
						"type": "stringLiteral",
						"value": "ak-GH"
					},
					{
						"type": "stringLiteral",
						"value": "am"
					},
					{
						"type": "stringLiteral",
						"value": "am-ET"
					},
					{
						"type": "stringLiteral",
						"value": "ar"
					},
					{
						"type": "stringLiteral",
						"value": "ar-001"
					},
					{
						"type": "stringLiteral",
						"value": "ar-AE"
					},
					{
						"type": "stringLiteral",
						"value": "ar-BH"
					},
					{
						"type": "stringLiteral",
						"value": "ar-DJ"
					},
					{
						"type": "stringLiteral",
						"value": "ar-DZ"
					},
					{
						"type": "stringLiteral",
						"value": "ar-EG"
					},
					{
						"type": "stringLiteral",
						"value": "ar-EH"
					},
					{
						"type": "stringLiteral",
						"value": "ar-ER"
					},
					{
						"type": "stringLiteral",
						"value": "ar-IL"
					},
					{
						"type": "stringLiteral",
						"value": "ar-IQ"
					},
					{
						"type": "stringLiteral",
						"value": "ar-JO"
					},
					{
						"type": "stringLiteral",
						"value": "ar-KM"
					},
					{
						"type": "stringLiteral",
						"value": "ar-KW"
					},
					{
						"type": "stringLiteral",
						"value": "ar-LB"
					},
					{
						"type": "stringLiteral",
						"value": "ar-LY"
					},
					{
						"type": "stringLiteral",
						"value": "ar-MA"
					},
					{
						"type": "stringLiteral",
						"value": "ar-MR"
					},
					{
						"type": "stringLiteral",
						"value": "ar-OM"
					},
					{
						"type": "stringLiteral",
						"value": "ar-PS"
					},
					{
						"type": "stringLiteral",
						"value": "ar-QA"
					},
					{
						"type": "stringLiteral",
						"value": "ar-SA"
					},
					{
						"type": "stringLiteral",
						"value": "ar-SD"
					},
					{
						"type": "stringLiteral",
						"value": "ar-SO"
					},
					{
						"type": "stringLiteral",
						"value": "ar-SS"
					},
					{
						"type": "stringLiteral",
						"value": "ar-SY"
					},
					{
						"type": "stringLiteral",
						"value": "ar-TD"
					},
					{
						"type": "stringLiteral",
						"value": "ar-TN"
					},
					{
						"type": "stringLiteral",
						"value": "ar-YE"
					},
					{
						"type": "stringLiteral",
						"value": "as"
					},
					{
						"type": "stringLiteral",
						"value": "as-IN"
					},
					{
						"type": "stringLiteral",
						"value": "asa"
					},
					{
						"type": "stringLiteral",
						"value": "asa-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "ast"
					},
					{
						"type": "stringLiteral",
						"value": "ast-ES"
					},
					{
						"type": "stringLiteral",
						"value": "az"
					},
					{
						"type": "stringLiteral",
						"value": "az-Cyrl"
					},
					{
						"type": "stringLiteral",
						"value": "az-Cyrl-AZ"
					},
					{
						"type": "stringLiteral",
						"value": "az-Latn"
					},
					{
						"type": "stringLiteral",
						"value": "az-Latn-AZ"
					},
					{
						"type": "stringLiteral",
						"value": "bas"
					},
					{
						"type": "stringLiteral",
						"value": "bas-CM"
					},
					{
						"type": "stringLiteral",
						"value": "be"
					},
					{
						"type": "stringLiteral",
						"value": "be-BY"
					},
					{
						"type": "stringLiteral",
						"value": "bem"
					},
					{
						"type": "stringLiteral",
						"value": "bem-ZM"
					},
					{
						"type": "stringLiteral",
						"value": "bez"
					},
					{
						"type": "stringLiteral",
						"value": "bez-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "bg"
					},
					{
						"type": "stringLiteral",
						"value": "bg-BG"
					},
					{
						"type": "stringLiteral",
						"value": "bm"
					},
					{
						"type": "stringLiteral",
						"value": "bm-ML"
					},
					{
						"type": "stringLiteral",
						"value": "bn"
					},
					{
						"type": "stringLiteral",
						"value": "bn-BD"
					},
					{
						"type": "stringLiteral",
						"value": "bn-IN"
					},
					{
						"type": "stringLiteral",
						"value": "bo"
					},
					{
						"type": "stringLiteral",
						"value": "bo-CN"
					},
					{
						"type": "stringLiteral",
						"value": "bo-IN"
					},
					{
						"type": "stringLiteral",
						"value": "br"
					},
					{
						"type": "stringLiteral",
						"value": "br-FR"
					},
					{
						"type": "stringLiteral",
						"value": "brx"
					},
					{
						"type": "stringLiteral",
						"value": "brx-IN"
					},
					{
						"type": "stringLiteral",
						"value": "bs"
					},
					{
						"type": "stringLiteral",
						"value": "bs-Cyrl"
					},
					{
						"type": "stringLiteral",
						"value": "bs-Cyrl-BA"
					},
					{
						"type": "stringLiteral",
						"value": "bs-Latn"
					},
					{
						"type": "stringLiteral",
						"value": "bs-Latn-BA"
					},
					{
						"type": "stringLiteral",
						"value": "ca"
					},
					{
						"type": "stringLiteral",
						"value": "ca-AD"
					},
					{
						"type": "stringLiteral",
						"value": "ca-ES"
					},
					{
						"type": "stringLiteral",
						"value": "ca-ES-VALENCIA"
					},
					{
						"type": "stringLiteral",
						"value": "ca-FR"
					},
					{
						"type": "stringLiteral",
						"value": "ca-IT"
					},
					{
						"type": "stringLiteral",
						"value": "ccp"
					},
					{
						"type": "stringLiteral",
						"value": "ccp-BD"
					},
					{
						"type": "stringLiteral",
						"value": "ccp-IN"
					},
					{
						"type": "stringLiteral",
						"value": "ce"
					},
					{
						"type": "stringLiteral",
						"value": "ce-RU"
					},
					{
						"type": "stringLiteral",
						"value": "cgg"
					},
					{
						"type": "stringLiteral",
						"value": "cgg-UG"
					},
					{
						"type": "stringLiteral",
						"value": "chr"
					},
					{
						"type": "stringLiteral",
						"value": "chr-US"
					},
					{
						"type": "stringLiteral",
						"value": "ckb"
					},
					{
						"type": "stringLiteral",
						"value": "ckb-IQ"
					},
					{
						"type": "stringLiteral",
						"value": "ckb-IR"
					},
					{
						"type": "stringLiteral",
						"value": "cs"
					},
					{
						"type": "stringLiteral",
						"value": "cs-CZ"
					},
					{
						"type": "stringLiteral",
						"value": "cu"
					},
					{
						"type": "stringLiteral",
						"value": "cu-RU"
					},
					{
						"type": "stringLiteral",
						"value": "cy"
					},
					{
						"type": "stringLiteral",
						"value": "cy-GB"
					},
					{
						"type": "stringLiteral",
						"value": "da"
					},
					{
						"type": "stringLiteral",
						"value": "da-DK"
					},
					{
						"type": "stringLiteral",
						"value": "da-GL"
					},
					{
						"type": "stringLiteral",
						"value": "dav"
					},
					{
						"type": "stringLiteral",
						"value": "dav-KE"
					},
					{
						"type": "stringLiteral",
						"value": "de"
					},
					{
						"type": "stringLiteral",
						"value": "de-AT"
					},
					{
						"type": "stringLiteral",
						"value": "de-BE"
					},
					{
						"type": "stringLiteral",
						"value": "de-CH"
					},
					{
						"type": "stringLiteral",
						"value": "de-DE"
					},
					{
						"type": "stringLiteral",
						"value": "de-IT"
					},
					{
						"type": "stringLiteral",
						"value": "de-LI"
					},
					{
						"type": "stringLiteral",
						"value": "de-LU"
					},
					{
						"type": "stringLiteral",
						"value": "dje"
					},
					{
						"type": "stringLiteral",
						"value": "dje-NE"
					},
					{
						"type": "stringLiteral",
						"value": "dsb"
					},
					{
						"type": "stringLiteral",
						"value": "dsb-DE"
					},
					{
						"type": "stringLiteral",
						"value": "dua"
					},
					{
						"type": "stringLiteral",
						"value": "dua-CM"
					},
					{
						"type": "stringLiteral",
						"value": "dyo"
					},
					{
						"type": "stringLiteral",
						"value": "dyo-SN"
					},
					{
						"type": "stringLiteral",
						"value": "dz"
					},
					{
						"type": "stringLiteral",
						"value": "dz-BT"
					},
					{
						"type": "stringLiteral",
						"value": "ebu"
					},
					{
						"type": "stringLiteral",
						"value": "ebu-KE"
					},
					{
						"type": "stringLiteral",
						"value": "ee"
					},
					{
						"type": "stringLiteral",
						"value": "ee-GH"
					},
					{
						"type": "stringLiteral",
						"value": "ee-TG"
					},
					{
						"type": "stringLiteral",
						"value": "el"
					},
					{
						"type": "stringLiteral",
						"value": "el-CY"
					},
					{
						"type": "stringLiteral",
						"value": "el-GR"
					},
					{
						"type": "stringLiteral",
						"value": "en"
					},
					{
						"type": "stringLiteral",
						"value": "en-001"
					},
					{
						"type": "stringLiteral",
						"value": "en-150"
					},
					{
						"type": "stringLiteral",
						"value": "en-AG"
					},
					{
						"type": "stringLiteral",
						"value": "en-AI"
					},
					{
						"type": "stringLiteral",
						"value": "en-AS"
					},
					{
						"type": "stringLiteral",
						"value": "en-AT"
					},
					{
						"type": "stringLiteral",
						"value": "en-AU"
					},
					{
						"type": "stringLiteral",
						"value": "en-BB"
					},
					{
						"type": "stringLiteral",
						"value": "en-BE"
					},
					{
						"type": "stringLiteral",
						"value": "en-BI"
					},
					{
						"type": "stringLiteral",
						"value": "en-BM"
					},
					{
						"type": "stringLiteral",
						"value": "en-BS"
					},
					{
						"type": "stringLiteral",
						"value": "en-BW"
					},
					{
						"type": "stringLiteral",
						"value": "en-BZ"
					},
					{
						"type": "stringLiteral",
						"value": "en-CA"
					},
					{
						"type": "stringLiteral",
						"value": "en-CC"
					},
					{
						"type": "stringLiteral",
						"value": "en-CH"
					},
					{
						"type": "stringLiteral",
						"value": "en-CK"
					},
					{
						"type": "stringLiteral",
						"value": "en-CM"
					},
					{
						"type": "stringLiteral",
						"value": "en-CX"
					},
					{
						"type": "stringLiteral",
						"value": "en-CY"
					},
					{
						"type": "stringLiteral",
						"value": "en-DE"
					},
					{
						"type": "stringLiteral",
						"value": "en-DG"
					},
					{
						"type": "stringLiteral",
						"value": "en-DK"
					},
					{
						"type": "stringLiteral",
						"value": "en-DM"
					},
					{
						"type": "stringLiteral",
						"value": "en-ER"
					},
					{
						"type": "stringLiteral",
						"value": "en-FI"
					},
					{
						"type": "stringLiteral",
						"value": "en-FJ"
					},
					{
						"type": "stringLiteral",
						"value": "en-FK"
					},
					{
						"type": "stringLiteral",
						"value": "en-FM"
					},
					{
						"type": "stringLiteral",
						"value": "en-GB"
					},
					{
						"type": "stringLiteral",
						"value": "en-GD"
					},
					{
						"type": "stringLiteral",
						"value": "en-GG"
					},
					{
						"type": "stringLiteral",
						"value": "en-GH"
					},
					{
						"type": "stringLiteral",
						"value": "en-GI"
					},
					{
						"type": "stringLiteral",
						"value": "en-GM"
					},
					{
						"type": "stringLiteral",
						"value": "en-GU"
					},
					{
						"type": "stringLiteral",
						"value": "en-GY"
					},
					{
						"type": "stringLiteral",
						"value": "en-HK"
					},
					{
						"type": "stringLiteral",
						"value": "en-IE"
					},
					{
						"type": "stringLiteral",
						"value": "en-IL"
					},
					{
						"type": "stringLiteral",
						"value": "en-IM"
					},
					{
						"type": "stringLiteral",
						"value": "en-IN"
					},
					{
						"type": "stringLiteral",
						"value": "en-IO"
					},
					{
						"type": "stringLiteral",
						"value": "en-JE"
					},
					{
						"type": "stringLiteral",
						"value": "en-JM"
					},
					{
						"type": "stringLiteral",
						"value": "en-KE"
					},
					{
						"type": "stringLiteral",
						"value": "en-KI"
					},
					{
						"type": "stringLiteral",
						"value": "en-KN"
					},
					{
						"type": "stringLiteral",
						"value": "en-KY"
					},
					{
						"type": "stringLiteral",
						"value": "en-LC"
					},
					{
						"type": "stringLiteral",
						"value": "en-LR"
					},
					{
						"type": "stringLiteral",
						"value": "en-LS"
					},
					{
						"type": "stringLiteral",
						"value": "en-MG"
					},
					{
						"type": "stringLiteral",
						"value": "en-MH"
					},
					{
						"type": "stringLiteral",
						"value": "en-MO"
					},
					{
						"type": "stringLiteral",
						"value": "en-MP"
					},
					{
						"type": "stringLiteral",
						"value": "en-MS"
					},
					{
						"type": "stringLiteral",
						"value": "en-MT"
					},
					{
						"type": "stringLiteral",
						"value": "en-MU"
					},
					{
						"type": "stringLiteral",
						"value": "en-MW"
					},
					{
						"type": "stringLiteral",
						"value": "en-MY"
					},
					{
						"type": "stringLiteral",
						"value": "en-NA"
					},
					{
						"type": "stringLiteral",
						"value": "en-NF"
					},
					{
						"type": "stringLiteral",
						"value": "en-NG"
					},
					{
						"type": "stringLiteral",
						"value": "en-NL"
					},
					{
						"type": "stringLiteral",
						"value": "en-NR"
					},
					{
						"type": "stringLiteral",
						"value": "en-NU"
					},
					{
						"type": "stringLiteral",
						"value": "en-NZ"
					},
					{
						"type": "stringLiteral",
						"value": "en-PG"
					},
					{
						"type": "stringLiteral",
						"value": "en-PH"
					},
					{
						"type": "stringLiteral",
						"value": "en-PK"
					},
					{
						"type": "stringLiteral",
						"value": "en-PN"
					},
					{
						"type": "stringLiteral",
						"value": "en-PR"
					},
					{
						"type": "stringLiteral",
						"value": "en-PW"
					},
					{
						"type": "stringLiteral",
						"value": "en-RW"
					},
					{
						"type": "stringLiteral",
						"value": "en-SB"
					},
					{
						"type": "stringLiteral",
						"value": "en-SC"
					},
					{
						"type": "stringLiteral",
						"value": "en-SD"
					},
					{
						"type": "stringLiteral",
						"value": "en-SE"
					},
					{
						"type": "stringLiteral",
						"value": "en-SG"
					},
					{
						"type": "stringLiteral",
						"value": "en-SH"
					},
					{
						"type": "stringLiteral",
						"value": "en-SI"
					},
					{
						"type": "stringLiteral",
						"value": "en-SL"
					},
					{
						"type": "stringLiteral",
						"value": "en-SS"
					},
					{
						"type": "stringLiteral",
						"value": "en-SX"
					},
					{
						"type": "stringLiteral",
						"value": "en-SZ"
					},
					{
						"type": "stringLiteral",
						"value": "en-TC"
					},
					{
						"type": "stringLiteral",
						"value": "en-TK"
					},
					{
						"type": "stringLiteral",
						"value": "en-TO"
					},
					{
						"type": "stringLiteral",
						"value": "en-TT"
					},
					{
						"type": "stringLiteral",
						"value": "en-TV"
					},
					{
						"type": "stringLiteral",
						"value": "en-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "en-UG"
					},
					{
						"type": "stringLiteral",
						"value": "en-UM"
					},
					{
						"type": "stringLiteral",
						"value": "en-US"
					},
					{
						"type": "stringLiteral",
						"value": "en-US-POSIX"
					},
					{
						"type": "stringLiteral",
						"value": "en-VC"
					},
					{
						"type": "stringLiteral",
						"value": "en-VG"
					},
					{
						"type": "stringLiteral",
						"value": "en-VI"
					},
					{
						"type": "stringLiteral",
						"value": "en-VU"
					},
					{
						"type": "stringLiteral",
						"value": "en-WS"
					},
					{
						"type": "stringLiteral",
						"value": "en-ZA"
					},
					{
						"type": "stringLiteral",
						"value": "en-ZM"
					},
					{
						"type": "stringLiteral",
						"value": "en-ZW"
					},
					{
						"type": "stringLiteral",
						"value": "eo"
					},
					{
						"type": "stringLiteral",
						"value": "eo-001"
					},
					{
						"type": "stringLiteral",
						"value": "es"
					},
					{
						"type": "stringLiteral",
						"value": "es-419"
					},
					{
						"type": "stringLiteral",
						"value": "es-AR"
					},
					{
						"type": "stringLiteral",
						"value": "es-BO"
					},
					{
						"type": "stringLiteral",
						"value": "es-BR"
					},
					{
						"type": "stringLiteral",
						"value": "es-BZ"
					},
					{
						"type": "stringLiteral",
						"value": "es-CL"
					},
					{
						"type": "stringLiteral",
						"value": "es-CO"
					},
					{
						"type": "stringLiteral",
						"value": "es-CR"
					},
					{
						"type": "stringLiteral",
						"value": "es-CU"
					},
					{
						"type": "stringLiteral",
						"value": "es-DO"
					},
					{
						"type": "stringLiteral",
						"value": "es-EA"
					},
					{
						"type": "stringLiteral",
						"value": "es-EC"
					},
					{
						"type": "stringLiteral",
						"value": "es-ES"
					},
					{
						"type": "stringLiteral",
						"value": "es-GQ"
					},
					{
						"type": "stringLiteral",
						"value": "es-GT"
					},
					{
						"type": "stringLiteral",
						"value": "es-HN"
					},
					{
						"type": "stringLiteral",
						"value": "es-IC"
					},
					{
						"type": "stringLiteral",
						"value": "es-MX"
					},
					{
						"type": "stringLiteral",
						"value": "es-NI"
					},
					{
						"type": "stringLiteral",
						"value": "es-PA"
					},
					{
						"type": "stringLiteral",
						"value": "es-PE"
					},
					{
						"type": "stringLiteral",
						"value": "es-PH"
					},
					{
						"type": "stringLiteral",
						"value": "es-PR"
					},
					{
						"type": "stringLiteral",
						"value": "es-PY"
					},
					{
						"type": "stringLiteral",
						"value": "es-SV"
					},
					{
						"type": "stringLiteral",
						"value": "es-US"
					},
					{
						"type": "stringLiteral",
						"value": "es-UY"
					},
					{
						"type": "stringLiteral",
						"value": "es-VE"
					},
					{
						"type": "stringLiteral",
						"value": "et"
					},
					{
						"type": "stringLiteral",
						"value": "et-EE"
					},
					{
						"type": "stringLiteral",
						"value": "eu"
					},
					{
						"type": "stringLiteral",
						"value": "eu-ES"
					},
					{
						"type": "stringLiteral",
						"value": "ewo"
					},
					{
						"type": "stringLiteral",
						"value": "ewo-CM"
					},
					{
						"type": "stringLiteral",
						"value": "fa"
					},
					{
						"type": "stringLiteral",
						"value": "fa-AF"
					},
					{
						"type": "stringLiteral",
						"value": "fa-IR"
					},
					{
						"type": "stringLiteral",
						"value": "ff"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-BF"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-CM"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-GH"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-GM"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-GN"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-GW"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-LR"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-MR"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-NE"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-NG"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-SL"
					},
					{
						"type": "stringLiteral",
						"value": "ff-Latn-SN"
					},
					{
						"type": "stringLiteral",
						"value": "fi"
					},
					{
						"type": "stringLiteral",
						"value": "fi-FI"
					},
					{
						"type": "stringLiteral",
						"value": "fil"
					},
					{
						"type": "stringLiteral",
						"value": "fil-PH"
					},
					{
						"type": "stringLiteral",
						"value": "fo"
					},
					{
						"type": "stringLiteral",
						"value": "fo-DK"
					},
					{
						"type": "stringLiteral",
						"value": "fo-FO"
					},
					{
						"type": "stringLiteral",
						"value": "fr"
					},
					{
						"type": "stringLiteral",
						"value": "fr-BE"
					},
					{
						"type": "stringLiteral",
						"value": "fr-BF"
					},
					{
						"type": "stringLiteral",
						"value": "fr-BI"
					},
					{
						"type": "stringLiteral",
						"value": "fr-BJ"
					},
					{
						"type": "stringLiteral",
						"value": "fr-BL"
					},
					{
						"type": "stringLiteral",
						"value": "fr-CA"
					},
					{
						"type": "stringLiteral",
						"value": "fr-CD"
					},
					{
						"type": "stringLiteral",
						"value": "fr-CF"
					},
					{
						"type": "stringLiteral",
						"value": "fr-CG"
					},
					{
						"type": "stringLiteral",
						"value": "fr-CH"
					},
					{
						"type": "stringLiteral",
						"value": "fr-CI"
					},
					{
						"type": "stringLiteral",
						"value": "fr-CM"
					},
					{
						"type": "stringLiteral",
						"value": "fr-DJ"
					},
					{
						"type": "stringLiteral",
						"value": "fr-DZ"
					},
					{
						"type": "stringLiteral",
						"value": "fr-FR"
					},
					{
						"type": "stringLiteral",
						"value": "fr-GA"
					},
					{
						"type": "stringLiteral",
						"value": "fr-GF"
					},
					{
						"type": "stringLiteral",
						"value": "fr-GN"
					},
					{
						"type": "stringLiteral",
						"value": "fr-GP"
					},
					{
						"type": "stringLiteral",
						"value": "fr-GQ"
					},
					{
						"type": "stringLiteral",
						"value": "fr-HT"
					},
					{
						"type": "stringLiteral",
						"value": "fr-KM"
					},
					{
						"type": "stringLiteral",
						"value": "fr-LU"
					},
					{
						"type": "stringLiteral",
						"value": "fr-MA"
					},
					{
						"type": "stringLiteral",
						"value": "fr-MC"
					},
					{
						"type": "stringLiteral",
						"value": "fr-MF"
					},
					{
						"type": "stringLiteral",
						"value": "fr-MG"
					},
					{
						"type": "stringLiteral",
						"value": "fr-ML"
					},
					{
						"type": "stringLiteral",
						"value": "fr-MQ"
					},
					{
						"type": "stringLiteral",
						"value": "fr-MR"
					},
					{
						"type": "stringLiteral",
						"value": "fr-MU"
					},
					{
						"type": "stringLiteral",
						"value": "fr-NC"
					},
					{
						"type": "stringLiteral",
						"value": "fr-NE"
					},
					{
						"type": "stringLiteral",
						"value": "fr-PF"
					},
					{
						"type": "stringLiteral",
						"value": "fr-PM"
					},
					{
						"type": "stringLiteral",
						"value": "fr-RE"
					},
					{
						"type": "stringLiteral",
						"value": "fr-RW"
					},
					{
						"type": "stringLiteral",
						"value": "fr-SC"
					},
					{
						"type": "stringLiteral",
						"value": "fr-SN"
					},
					{
						"type": "stringLiteral",
						"value": "fr-SY"
					},
					{
						"type": "stringLiteral",
						"value": "fr-TD"
					},
					{
						"type": "stringLiteral",
						"value": "fr-TG"
					},
					{
						"type": "stringLiteral",
						"value": "fr-TN"
					},
					{
						"type": "stringLiteral",
						"value": "fr-VU"
					},
					{
						"type": "stringLiteral",
						"value": "fr-WF"
					},
					{
						"type": "stringLiteral",
						"value": "fr-YT"
					},
					{
						"type": "stringLiteral",
						"value": "fur"
					},
					{
						"type": "stringLiteral",
						"value": "fur-IT"
					},
					{
						"type": "stringLiteral",
						"value": "fy"
					},
					{
						"type": "stringLiteral",
						"value": "fy-NL"
					},
					{
						"type": "stringLiteral",
						"value": "ga"
					},
					{
						"type": "stringLiteral",
						"value": "ga-IE"
					},
					{
						"type": "stringLiteral",
						"value": "gd"
					},
					{
						"type": "stringLiteral",
						"value": "gd-GB"
					},
					{
						"type": "stringLiteral",
						"value": "gl"
					},
					{
						"type": "stringLiteral",
						"value": "gl-ES"
					},
					{
						"type": "stringLiteral",
						"value": "gsw"
					},
					{
						"type": "stringLiteral",
						"value": "gsw-CH"
					},
					{
						"type": "stringLiteral",
						"value": "gsw-FR"
					},
					{
						"type": "stringLiteral",
						"value": "gsw-LI"
					},
					{
						"type": "stringLiteral",
						"value": "gu"
					},
					{
						"type": "stringLiteral",
						"value": "gu-IN"
					},
					{
						"type": "stringLiteral",
						"value": "guz"
					},
					{
						"type": "stringLiteral",
						"value": "guz-KE"
					},
					{
						"type": "stringLiteral",
						"value": "gv"
					},
					{
						"type": "stringLiteral",
						"value": "gv-IM"
					},
					{
						"type": "stringLiteral",
						"value": "ha"
					},
					{
						"type": "stringLiteral",
						"value": "ha-GH"
					},
					{
						"type": "stringLiteral",
						"value": "ha-NE"
					},
					{
						"type": "stringLiteral",
						"value": "ha-NG"
					},
					{
						"type": "stringLiteral",
						"value": "haw"
					},
					{
						"type": "stringLiteral",
						"value": "haw-US"
					},
					{
						"type": "stringLiteral",
						"value": "he"
					},
					{
						"type": "stringLiteral",
						"value": "he-IL"
					},
					{
						"type": "stringLiteral",
						"value": "hi"
					},
					{
						"type": "stringLiteral",
						"value": "hi-IN"
					},
					{
						"type": "stringLiteral",
						"value": "hr"
					},
					{
						"type": "stringLiteral",
						"value": "hr-BA"
					},
					{
						"type": "stringLiteral",
						"value": "hr-HR"
					},
					{
						"type": "stringLiteral",
						"value": "hsb"
					},
					{
						"type": "stringLiteral",
						"value": "hsb-DE"
					},
					{
						"type": "stringLiteral",
						"value": "hu"
					},
					{
						"type": "stringLiteral",
						"value": "hu-HU"
					},
					{
						"type": "stringLiteral",
						"value": "hy"
					},
					{
						"type": "stringLiteral",
						"value": "hy-AM"
					},
					{
						"type": "stringLiteral",
						"value": "ia"
					},
					{
						"type": "stringLiteral",
						"value": "ia-001"
					},
					{
						"type": "stringLiteral",
						"value": "id"
					},
					{
						"type": "stringLiteral",
						"value": "id-ID"
					},
					{
						"type": "stringLiteral",
						"value": "ig"
					},
					{
						"type": "stringLiteral",
						"value": "ig-NG"
					},
					{
						"type": "stringLiteral",
						"value": "ii"
					},
					{
						"type": "stringLiteral",
						"value": "ii-CN"
					},
					{
						"type": "stringLiteral",
						"value": "is"
					},
					{
						"type": "stringLiteral",
						"value": "is-IS"
					},
					{
						"type": "stringLiteral",
						"value": "it"
					},
					{
						"type": "stringLiteral",
						"value": "it-CH"
					},
					{
						"type": "stringLiteral",
						"value": "it-IT"
					},
					{
						"type": "stringLiteral",
						"value": "it-SM"
					},
					{
						"type": "stringLiteral",
						"value": "it-VA"
					},
					{
						"type": "stringLiteral",
						"value": "ja"
					},
					{
						"type": "stringLiteral",
						"value": "ja-JP"
					},
					{
						"type": "stringLiteral",
						"value": "jgo"
					},
					{
						"type": "stringLiteral",
						"value": "jgo-CM"
					},
					{
						"type": "stringLiteral",
						"value": "jmc"
					},
					{
						"type": "stringLiteral",
						"value": "jmc-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "jv"
					},
					{
						"type": "stringLiteral",
						"value": "jv-ID"
					},
					{
						"type": "stringLiteral",
						"value": "ka"
					},
					{
						"type": "stringLiteral",
						"value": "ka-GE"
					},
					{
						"type": "stringLiteral",
						"value": "kab"
					},
					{
						"type": "stringLiteral",
						"value": "kab-DZ"
					},
					{
						"type": "stringLiteral",
						"value": "kam"
					},
					{
						"type": "stringLiteral",
						"value": "kam-KE"
					},
					{
						"type": "stringLiteral",
						"value": "kde"
					},
					{
						"type": "stringLiteral",
						"value": "kde-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "kea"
					},
					{
						"type": "stringLiteral",
						"value": "kea-CV"
					},
					{
						"type": "stringLiteral",
						"value": "khq"
					},
					{
						"type": "stringLiteral",
						"value": "khq-ML"
					},
					{
						"type": "stringLiteral",
						"value": "ki"
					},
					{
						"type": "stringLiteral",
						"value": "ki-KE"
					},
					{
						"type": "stringLiteral",
						"value": "kk"
					},
					{
						"type": "stringLiteral",
						"value": "kk-KZ"
					},
					{
						"type": "stringLiteral",
						"value": "kkj"
					},
					{
						"type": "stringLiteral",
						"value": "kkj-CM"
					},
					{
						"type": "stringLiteral",
						"value": "kl"
					},
					{
						"type": "stringLiteral",
						"value": "kl-GL"
					},
					{
						"type": "stringLiteral",
						"value": "kln"
					},
					{
						"type": "stringLiteral",
						"value": "kln-KE"
					},
					{
						"type": "stringLiteral",
						"value": "km"
					},
					{
						"type": "stringLiteral",
						"value": "km-KH"
					},
					{
						"type": "stringLiteral",
						"value": "kn"
					},
					{
						"type": "stringLiteral",
						"value": "kn-IN"
					},
					{
						"type": "stringLiteral",
						"value": "ko"
					},
					{
						"type": "stringLiteral",
						"value": "ko-KP"
					},
					{
						"type": "stringLiteral",
						"value": "ko-KR"
					},
					{
						"type": "stringLiteral",
						"value": "kok"
					},
					{
						"type": "stringLiteral",
						"value": "kok-IN"
					},
					{
						"type": "stringLiteral",
						"value": "ks"
					},
					{
						"type": "stringLiteral",
						"value": "ks-IN"
					},
					{
						"type": "stringLiteral",
						"value": "ksb"
					},
					{
						"type": "stringLiteral",
						"value": "ksb-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "ksf"
					},
					{
						"type": "stringLiteral",
						"value": "ksf-CM"
					},
					{
						"type": "stringLiteral",
						"value": "ksh"
					},
					{
						"type": "stringLiteral",
						"value": "ksh-DE"
					},
					{
						"type": "stringLiteral",
						"value": "ku"
					},
					{
						"type": "stringLiteral",
						"value": "ku-TR"
					},
					{
						"type": "stringLiteral",
						"value": "kw"
					},
					{
						"type": "stringLiteral",
						"value": "kw-GB"
					},
					{
						"type": "stringLiteral",
						"value": "ky"
					},
					{
						"type": "stringLiteral",
						"value": "ky-KG"
					},
					{
						"type": "stringLiteral",
						"value": "lag"
					},
					{
						"type": "stringLiteral",
						"value": "lag-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "lb"
					},
					{
						"type": "stringLiteral",
						"value": "lb-LU"
					},
					{
						"type": "stringLiteral",
						"value": "lg"
					},
					{
						"type": "stringLiteral",
						"value": "lg-UG"
					},
					{
						"type": "stringLiteral",
						"value": "lkt"
					},
					{
						"type": "stringLiteral",
						"value": "lkt-US"
					},
					{
						"type": "stringLiteral",
						"value": "ln"
					},
					{
						"type": "stringLiteral",
						"value": "ln-AO"
					},
					{
						"type": "stringLiteral",
						"value": "ln-CD"
					},
					{
						"type": "stringLiteral",
						"value": "ln-CF"
					},
					{
						"type": "stringLiteral",
						"value": "ln-CG"
					},
					{
						"type": "stringLiteral",
						"value": "lo"
					},
					{
						"type": "stringLiteral",
						"value": "lo-LA"
					},
					{
						"type": "stringLiteral",
						"value": "lrc"
					},
					{
						"type": "stringLiteral",
						"value": "lrc-IQ"
					},
					{
						"type": "stringLiteral",
						"value": "lrc-IR"
					},
					{
						"type": "stringLiteral",
						"value": "lt"
					},
					{
						"type": "stringLiteral",
						"value": "lt-LT"
					},
					{
						"type": "stringLiteral",
						"value": "lu"
					},
					{
						"type": "stringLiteral",
						"value": "lu-CD"
					},
					{
						"type": "stringLiteral",
						"value": "luo"
					},
					{
						"type": "stringLiteral",
						"value": "luo-KE"
					},
					{
						"type": "stringLiteral",
						"value": "luy"
					},
					{
						"type": "stringLiteral",
						"value": "luy-KE"
					},
					{
						"type": "stringLiteral",
						"value": "lv"
					},
					{
						"type": "stringLiteral",
						"value": "lv-LV"
					},
					{
						"type": "stringLiteral",
						"value": "mas"
					},
					{
						"type": "stringLiteral",
						"value": "mas-KE"
					},
					{
						"type": "stringLiteral",
						"value": "mas-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "mer"
					},
					{
						"type": "stringLiteral",
						"value": "mer-KE"
					},
					{
						"type": "stringLiteral",
						"value": "mfe"
					},
					{
						"type": "stringLiteral",
						"value": "mfe-MU"
					},
					{
						"type": "stringLiteral",
						"value": "mg"
					},
					{
						"type": "stringLiteral",
						"value": "mg-MG"
					},
					{
						"type": "stringLiteral",
						"value": "mgh"
					},
					{
						"type": "stringLiteral",
						"value": "mgh-MZ"
					},
					{
						"type": "stringLiteral",
						"value": "mgo"
					},
					{
						"type": "stringLiteral",
						"value": "mgo-CM"
					},
					{
						"type": "stringLiteral",
						"value": "mi"
					},
					{
						"type": "stringLiteral",
						"value": "mi-NZ"
					},
					{
						"type": "stringLiteral",
						"value": "mk"
					},
					{
						"type": "stringLiteral",
						"value": "mk-MK"
					},
					{
						"type": "stringLiteral",
						"value": "ml"
					},
					{
						"type": "stringLiteral",
						"value": "ml-IN"
					},
					{
						"type": "stringLiteral",
						"value": "mn"
					},
					{
						"type": "stringLiteral",
						"value": "mn-MN"
					},
					{
						"type": "stringLiteral",
						"value": "mr"
					},
					{
						"type": "stringLiteral",
						"value": "mr-IN"
					},
					{
						"type": "stringLiteral",
						"value": "ms"
					},
					{
						"type": "stringLiteral",
						"value": "ms-BN"
					},
					{
						"type": "stringLiteral",
						"value": "ms-MY"
					},
					{
						"type": "stringLiteral",
						"value": "ms-SG"
					},
					{
						"type": "stringLiteral",
						"value": "mt"
					},
					{
						"type": "stringLiteral",
						"value": "mt-MT"
					},
					{
						"type": "stringLiteral",
						"value": "mua"
					},
					{
						"type": "stringLiteral",
						"value": "mua-CM"
					},
					{
						"type": "stringLiteral",
						"value": "my"
					},
					{
						"type": "stringLiteral",
						"value": "my-MM"
					},
					{
						"type": "stringLiteral",
						"value": "mzn"
					},
					{
						"type": "stringLiteral",
						"value": "mzn-IR"
					},
					{
						"type": "stringLiteral",
						"value": "naq"
					},
					{
						"type": "stringLiteral",
						"value": "naq-NA"
					},
					{
						"type": "stringLiteral",
						"value": "nb"
					},
					{
						"type": "stringLiteral",
						"value": "nb-NO"
					},
					{
						"type": "stringLiteral",
						"value": "nb-SJ"
					},
					{
						"type": "stringLiteral",
						"value": "nd"
					},
					{
						"type": "stringLiteral",
						"value": "nd-ZW"
					},
					{
						"type": "stringLiteral",
						"value": "nds"
					},
					{
						"type": "stringLiteral",
						"value": "nds-DE"
					},
					{
						"type": "stringLiteral",
						"value": "nds-NL"
					},
					{
						"type": "stringLiteral",
						"value": "ne"
					},
					{
						"type": "stringLiteral",
						"value": "ne-IN"
					},
					{
						"type": "stringLiteral",
						"value": "ne-NP"
					},
					{
						"type": "stringLiteral",
						"value": "nl"
					},
					{
						"type": "stringLiteral",
						"value": "nl-AW"
					},
					{
						"type": "stringLiteral",
						"value": "nl-BE"
					},
					{
						"type": "stringLiteral",
						"value": "nl-BQ"
					},
					{
						"type": "stringLiteral",
						"value": "nl-CW"
					},
					{
						"type": "stringLiteral",
						"value": "nl-NL"
					},
					{
						"type": "stringLiteral",
						"value": "nl-SR"
					},
					{
						"type": "stringLiteral",
						"value": "nl-SX"
					},
					{
						"type": "stringLiteral",
						"value": "nmg"
					},
					{
						"type": "stringLiteral",
						"value": "nmg-CM"
					},
					{
						"type": "stringLiteral",
						"value": "nn"
					},
					{
						"type": "stringLiteral",
						"value": "nn-NO"
					},
					{
						"type": "stringLiteral",
						"value": "nnh"
					},
					{
						"type": "stringLiteral",
						"value": "nnh-CM"
					},
					{
						"type": "stringLiteral",
						"value": "nus"
					},
					{
						"type": "stringLiteral",
						"value": "nus-SS"
					},
					{
						"type": "stringLiteral",
						"value": "nyn"
					},
					{
						"type": "stringLiteral",
						"value": "nyn-UG"
					},
					{
						"type": "stringLiteral",
						"value": "om"
					},
					{
						"type": "stringLiteral",
						"value": "om-ET"
					},
					{
						"type": "stringLiteral",
						"value": "om-KE"
					},
					{
						"type": "stringLiteral",
						"value": "or"
					},
					{
						"type": "stringLiteral",
						"value": "or-IN"
					},
					{
						"type": "stringLiteral",
						"value": "os"
					},
					{
						"type": "stringLiteral",
						"value": "os-GE"
					},
					{
						"type": "stringLiteral",
						"value": "os-RU"
					},
					{
						"type": "stringLiteral",
						"value": "pa"
					},
					{
						"type": "stringLiteral",
						"value": "pa-Arab"
					},
					{
						"type": "stringLiteral",
						"value": "pa-Arab-PK"
					},
					{
						"type": "stringLiteral",
						"value": "pa-Guru"
					},
					{
						"type": "stringLiteral",
						"value": "pa-Guru-IN"
					},
					{
						"type": "stringLiteral",
						"value": "pl"
					},
					{
						"type": "stringLiteral",
						"value": "pl-PL"
					},
					{
						"type": "stringLiteral",
						"value": "prg"
					},
					{
						"type": "stringLiteral",
						"value": "prg-001"
					},
					{
						"type": "stringLiteral",
						"value": "ps"
					},
					{
						"type": "stringLiteral",
						"value": "ps-AF"
					},
					{
						"type": "stringLiteral",
						"value": "pt"
					},
					{
						"type": "stringLiteral",
						"value": "pt-AO"
					},
					{
						"type": "stringLiteral",
						"value": "pt-BR"
					},
					{
						"type": "stringLiteral",
						"value": "pt-CH"
					},
					{
						"type": "stringLiteral",
						"value": "pt-CV"
					},
					{
						"type": "stringLiteral",
						"value": "pt-GQ"
					},
					{
						"type": "stringLiteral",
						"value": "pt-GW"
					},
					{
						"type": "stringLiteral",
						"value": "pt-LU"
					},
					{
						"type": "stringLiteral",
						"value": "pt-MO"
					},
					{
						"type": "stringLiteral",
						"value": "pt-MZ"
					},
					{
						"type": "stringLiteral",
						"value": "pt-PT"
					},
					{
						"type": "stringLiteral",
						"value": "pt-ST"
					},
					{
						"type": "stringLiteral",
						"value": "pt-TL"
					},
					{
						"type": "stringLiteral",
						"value": "qu"
					},
					{
						"type": "stringLiteral",
						"value": "qu-BO"
					},
					{
						"type": "stringLiteral",
						"value": "qu-EC"
					},
					{
						"type": "stringLiteral",
						"value": "qu-PE"
					},
					{
						"type": "stringLiteral",
						"value": "rm"
					},
					{
						"type": "stringLiteral",
						"value": "rm-CH"
					},
					{
						"type": "stringLiteral",
						"value": "rn"
					},
					{
						"type": "stringLiteral",
						"value": "rn-BI"
					},
					{
						"type": "stringLiteral",
						"value": "ro"
					},
					{
						"type": "stringLiteral",
						"value": "ro-MD"
					},
					{
						"type": "stringLiteral",
						"value": "ro-RO"
					},
					{
						"type": "stringLiteral",
						"value": "rof"
					},
					{
						"type": "stringLiteral",
						"value": "rof-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "root"
					},
					{
						"type": "stringLiteral",
						"value": "ru"
					},
					{
						"type": "stringLiteral",
						"value": "ru-BY"
					},
					{
						"type": "stringLiteral",
						"value": "ru-KG"
					},
					{
						"type": "stringLiteral",
						"value": "ru-KZ"
					},
					{
						"type": "stringLiteral",
						"value": "ru-MD"
					},
					{
						"type": "stringLiteral",
						"value": "ru-RU"
					},
					{
						"type": "stringLiteral",
						"value": "ru-UA"
					},
					{
						"type": "stringLiteral",
						"value": "rw"
					},
					{
						"type": "stringLiteral",
						"value": "rw-RW"
					},
					{
						"type": "stringLiteral",
						"value": "rwk"
					},
					{
						"type": "stringLiteral",
						"value": "rwk-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "sah"
					},
					{
						"type": "stringLiteral",
						"value": "sah-RU"
					},
					{
						"type": "stringLiteral",
						"value": "saq"
					},
					{
						"type": "stringLiteral",
						"value": "saq-KE"
					},
					{
						"type": "stringLiteral",
						"value": "sbp"
					},
					{
						"type": "stringLiteral",
						"value": "sbp-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "sd"
					},
					{
						"type": "stringLiteral",
						"value": "sd-PK"
					},
					{
						"type": "stringLiteral",
						"value": "se"
					},
					{
						"type": "stringLiteral",
						"value": "se-FI"
					},
					{
						"type": "stringLiteral",
						"value": "se-NO"
					},
					{
						"type": "stringLiteral",
						"value": "se-SE"
					},
					{
						"type": "stringLiteral",
						"value": "seh"
					},
					{
						"type": "stringLiteral",
						"value": "seh-MZ"
					},
					{
						"type": "stringLiteral",
						"value": "ses"
					},
					{
						"type": "stringLiteral",
						"value": "ses-ML"
					},
					{
						"type": "stringLiteral",
						"value": "sg"
					},
					{
						"type": "stringLiteral",
						"value": "sg-CF"
					},
					{
						"type": "stringLiteral",
						"value": "shi"
					},
					{
						"type": "stringLiteral",
						"value": "shi-Latn"
					},
					{
						"type": "stringLiteral",
						"value": "shi-Latn-MA"
					},
					{
						"type": "stringLiteral",
						"value": "shi-Tfng"
					},
					{
						"type": "stringLiteral",
						"value": "shi-Tfng-MA"
					},
					{
						"type": "stringLiteral",
						"value": "si"
					},
					{
						"type": "stringLiteral",
						"value": "si-LK"
					},
					{
						"type": "stringLiteral",
						"value": "sk"
					},
					{
						"type": "stringLiteral",
						"value": "sk-SK"
					},
					{
						"type": "stringLiteral",
						"value": "sl"
					},
					{
						"type": "stringLiteral",
						"value": "sl-SI"
					},
					{
						"type": "stringLiteral",
						"value": "smn"
					},
					{
						"type": "stringLiteral",
						"value": "smn-FI"
					},
					{
						"type": "stringLiteral",
						"value": "sn"
					},
					{
						"type": "stringLiteral",
						"value": "sn-ZW"
					},
					{
						"type": "stringLiteral",
						"value": "so"
					},
					{
						"type": "stringLiteral",
						"value": "so-DJ"
					},
					{
						"type": "stringLiteral",
						"value": "so-ET"
					},
					{
						"type": "stringLiteral",
						"value": "so-KE"
					},
					{
						"type": "stringLiteral",
						"value": "so-SO"
					},
					{
						"type": "stringLiteral",
						"value": "sq"
					},
					{
						"type": "stringLiteral",
						"value": "sq-AL"
					},
					{
						"type": "stringLiteral",
						"value": "sq-MK"
					},
					{
						"type": "stringLiteral",
						"value": "sq-XK"
					},
					{
						"type": "stringLiteral",
						"value": "sr"
					},
					{
						"type": "stringLiteral",
						"value": "sr-Cyrl"
					},
					{
						"type": "stringLiteral",
						"value": "sr-Cyrl-BA"
					},
					{
						"type": "stringLiteral",
						"value": "sr-Cyrl-ME"
					},
					{
						"type": "stringLiteral",
						"value": "sr-Cyrl-RS"
					},
					{
						"type": "stringLiteral",
						"value": "sr-Cyrl-XK"
					},
					{
						"type": "stringLiteral",
						"value": "sr-Latn"
					},
					{
						"type": "stringLiteral",
						"value": "sr-Latn-BA"
					},
					{
						"type": "stringLiteral",
						"value": "sr-Latn-ME"
					},
					{
						"type": "stringLiteral",
						"value": "sr-Latn-RS"
					},
					{
						"type": "stringLiteral",
						"value": "sr-Latn-XK"
					},
					{
						"type": "stringLiteral",
						"value": "sv"
					},
					{
						"type": "stringLiteral",
						"value": "sv-AX"
					},
					{
						"type": "stringLiteral",
						"value": "sv-FI"
					},
					{
						"type": "stringLiteral",
						"value": "sv-SE"
					},
					{
						"type": "stringLiteral",
						"value": "sw"
					},
					{
						"type": "stringLiteral",
						"value": "sw-CD"
					},
					{
						"type": "stringLiteral",
						"value": "sw-KE"
					},
					{
						"type": "stringLiteral",
						"value": "sw-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "sw-UG"
					},
					{
						"type": "stringLiteral",
						"value": "ta"
					},
					{
						"type": "stringLiteral",
						"value": "ta-IN"
					},
					{
						"type": "stringLiteral",
						"value": "ta-LK"
					},
					{
						"type": "stringLiteral",
						"value": "ta-MY"
					},
					{
						"type": "stringLiteral",
						"value": "ta-SG"
					},
					{
						"type": "stringLiteral",
						"value": "te"
					},
					{
						"type": "stringLiteral",
						"value": "te-IN"
					},
					{
						"type": "stringLiteral",
						"value": "teo"
					},
					{
						"type": "stringLiteral",
						"value": "teo-KE"
					},
					{
						"type": "stringLiteral",
						"value": "teo-UG"
					},
					{
						"type": "stringLiteral",
						"value": "tg"
					},
					{
						"type": "stringLiteral",
						"value": "tg-TJ"
					},
					{
						"type": "stringLiteral",
						"value": "th"
					},
					{
						"type": "stringLiteral",
						"value": "th-TH"
					},
					{
						"type": "stringLiteral",
						"value": "ti"
					},
					{
						"type": "stringLiteral",
						"value": "ti-ER"
					},
					{
						"type": "stringLiteral",
						"value": "ti-ET"
					},
					{
						"type": "stringLiteral",
						"value": "tk"
					},
					{
						"type": "stringLiteral",
						"value": "tk-TM"
					},
					{
						"type": "stringLiteral",
						"value": "to"
					},
					{
						"type": "stringLiteral",
						"value": "to-TO"
					},
					{
						"type": "stringLiteral",
						"value": "tr"
					},
					{
						"type": "stringLiteral",
						"value": "tr-CY"
					},
					{
						"type": "stringLiteral",
						"value": "tr-TR"
					},
					{
						"type": "stringLiteral",
						"value": "tt"
					},
					{
						"type": "stringLiteral",
						"value": "tt-RU"
					},
					{
						"type": "stringLiteral",
						"value": "twq"
					},
					{
						"type": "stringLiteral",
						"value": "twq-NE"
					},
					{
						"type": "stringLiteral",
						"value": "tzm"
					},
					{
						"type": "stringLiteral",
						"value": "tzm-MA"
					},
					{
						"type": "stringLiteral",
						"value": "ug"
					},
					{
						"type": "stringLiteral",
						"value": "ug-CN"
					},
					{
						"type": "stringLiteral",
						"value": "uk"
					},
					{
						"type": "stringLiteral",
						"value": "uk-UA"
					},
					{
						"type": "stringLiteral",
						"value": "ur"
					},
					{
						"type": "stringLiteral",
						"value": "ur-IN"
					},
					{
						"type": "stringLiteral",
						"value": "ur-PK"
					},
					{
						"type": "stringLiteral",
						"value": "uz"
					},
					{
						"type": "stringLiteral",
						"value": "uz-Arab"
					},
					{
						"type": "stringLiteral",
						"value": "uz-Arab-AF"
					},
					{
						"type": "stringLiteral",
						"value": "uz-Cyrl"
					},
					{
						"type": "stringLiteral",
						"value": "uz-Cyrl-UZ"
					},
					{
						"type": "stringLiteral",
						"value": "uz-Latn"
					},
					{
						"type": "stringLiteral",
						"value": "uz-Latn-UZ"
					},
					{
						"type": "stringLiteral",
						"value": "vai"
					},
					{
						"type": "stringLiteral",
						"value": "vai-Latn"
					},
					{
						"type": "stringLiteral",
						"value": "vai-Latn-LR"
					},
					{
						"type": "stringLiteral",
						"value": "vai-Vaii"
					},
					{
						"type": "stringLiteral",
						"value": "vai-Vaii-LR"
					},
					{
						"type": "stringLiteral",
						"value": "vi"
					},
					{
						"type": "stringLiteral",
						"value": "vi-VN"
					},
					{
						"type": "stringLiteral",
						"value": "vo"
					},
					{
						"type": "stringLiteral",
						"value": "vo-001"
					},
					{
						"type": "stringLiteral",
						"value": "vun"
					},
					{
						"type": "stringLiteral",
						"value": "vun-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "wae"
					},
					{
						"type": "stringLiteral",
						"value": "wae-CH"
					},
					{
						"type": "stringLiteral",
						"value": "wo"
					},
					{
						"type": "stringLiteral",
						"value": "wo-SN"
					},
					{
						"type": "stringLiteral",
						"value": "xh"
					},
					{
						"type": "stringLiteral",
						"value": "xh-ZA"
					},
					{
						"type": "stringLiteral",
						"value": "xog"
					},
					{
						"type": "stringLiteral",
						"value": "xog-UG"
					},
					{
						"type": "stringLiteral",
						"value": "yav"
					},
					{
						"type": "stringLiteral",
						"value": "yav-CM"
					},
					{
						"type": "stringLiteral",
						"value": "yi"
					},
					{
						"type": "stringLiteral",
						"value": "yi-001"
					},
					{
						"type": "stringLiteral",
						"value": "yo"
					},
					{
						"type": "stringLiteral",
						"value": "yo-BJ"
					},
					{
						"type": "stringLiteral",
						"value": "yo-NG"
					},
					{
						"type": "stringLiteral",
						"value": "yue"
					},
					{
						"type": "stringLiteral",
						"value": "yue-Hans"
					},
					{
						"type": "stringLiteral",
						"value": "yue-Hans-CN"
					},
					{
						"type": "stringLiteral",
						"value": "yue-Hant"
					},
					{
						"type": "stringLiteral",
						"value": "yue-Hant-HK"
					},
					{
						"type": "stringLiteral",
						"value": "zgh"
					},
					{
						"type": "stringLiteral",
						"value": "zgh-MA"
					},
					{
						"type": "stringLiteral",
						"value": "zh"
					},
					{
						"type": "stringLiteral",
						"value": "zh-Hans"
					},
					{
						"type": "stringLiteral",
						"value": "zh-Hans-CN"
					},
					{
						"type": "stringLiteral",
						"value": "zh-Hans-HK"
					},
					{
						"type": "stringLiteral",
						"value": "zh-Hans-MO"
					},
					{
						"type": "stringLiteral",
						"value": "zh-Hans-SG"
					},
					{
						"type": "stringLiteral",
						"value": "zh-Hant"
					},
					{
						"type": "stringLiteral",
						"value": "zh-Hant-HK"
					},
					{
						"type": "stringLiteral",
						"value": "zh-Hant-MO"
					},
					{
						"type": "stringLiteral",
						"value": "zh-Hant-TW"
					},
					{
						"type": "stringLiteral",
						"value": "zu"
					},
					{
						"type": "stringLiteral",
						"value": "zu-ZA"
					}
				]
			}
		},
		{
			"id": 276,
			"name": "IetfLanguageTagOrSignLanguageCode",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "We assume that IETF language tags will be extended with sign language codes (as proposed by\nhttp://www.evertype.com/standards/iso639/sign-language.html) eventually, so our language tags\nsupport them already.",
				"text": "For sign language translations of strings, you can use media URLs pointing to videos or\ndescription pictures.\n"
			},
			"sources": [
				{
					"fileName": "ietfLanguageTags.ts",
					"line": 1808,
					"character": 45
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "IetfLanguageTag",
						"id": 273
					},
					{
						"type": "reference",
						"name": "SignLanguageCode",
						"id": 274
					}
				]
			}
		},
		{
			"id": 671,
			"name": "KoboAttachment",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 10,
					"character": 26
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 672,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 674,
							"name": "download_url",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 12,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 675,
							"name": "filename",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 13,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 677,
							"name": "id",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 15,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 676,
							"name": "instance",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 14,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 673,
							"name": "mimetype",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 11,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 678,
							"name": "xform",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 16,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								674,
								675,
								677,
								676,
								673,
								678
							]
						}
					],
					"sources": [
						{
							"fileName": "transformers/transformKoboToA11y.ts",
							"line": 10,
							"character": 28
						}
					]
				}
			}
		},
		{
			"id": 754,
			"name": "KoboKey",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 98,
					"character": 19
				}
			],
			"type": {
				"type": "typeOperator",
				"operator": "keyof",
				"target": {
					"type": "reference",
					"name": "KoboResult"
				}
			}
		},
		{
			"id": 681,
			"name": "KoboResult",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 22,
					"character": 22
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 682,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 700,
							"name": "__version__",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 40,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 686,
							"name": "_attachments",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 26,
									"character": 14
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "KoboAttachment",
									"id": 671
								}
							}
						},
						{
							"id": 690,
							"name": "_bamboo_dataset_id",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 30,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 685,
							"name": "_geolocation",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 25,
									"character": 14
								}
							],
							"type": {
								"type": "tuple",
								"elements": [
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 683,
							"name": "_id",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 23,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 687,
							"name": "_notes",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						},
						{
							"id": 699,
							"name": "_status",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 39,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 703,
							"name": "_submission_time",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 43,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						},
						{
							"id": 704,
							"name": "_submitted_by",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 44,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "unknown"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							}
						},
						{
							"id": 688,
							"name": "_tags",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 28,
									"character": 7
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						},
						{
							"id": 684,
							"name": "_uuid",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 24,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 702,
							"name": "_validation_status",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 42,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							}
						},
						{
							"id": 689,
							"name": "_xform_id_string",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 29,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 701,
							"name": "deviceid",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 41,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 697,
							"name": "end",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 37,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 746,
							"name": "feedback/feedback_matrix/no_interaction_problems",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 87,
									"character": 52
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 745,
							"name": "feedback/feedback_matrix/questions_fits_this_place",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 86,
									"character": 54
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 695,
							"name": "formhub/uuid",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 35,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 749,
							"name": "has_phone_number",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 90,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 738,
							"name": "inquire/are_service_animals_allowed",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 79,
									"character": 39
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 739,
							"name": "inquire/media/has_audio",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 80,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 740,
							"name": "inquire/media/has_braille",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 81,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 741,
							"name": "inquire/media/has_large_print",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 82,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 742,
							"name": "inquire/staff_can_speak_sign_lang",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 83,
									"character": 37
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 743,
							"name": "inquire/staff_has_disabled_training",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 84,
									"character": 39
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 744,
							"name": "inquire/staff_spoken_sign_langs",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 85,
									"character": 35
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 737,
							"name": "inside/has_wide_aisles",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 78,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 723,
							"name": "inside/is_quiet",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 64,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 722,
							"name": "inside/is_well_lit",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 63,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 726,
							"name": "inside/toilet/basin_inside_cabin",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 67,
									"character": 36
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 724,
							"name": "inside/toilet/basin_wheelchair_fits_belows",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 65,
									"character": 46
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 725,
							"name": "inside/toilet/basin_wheelchair_reachable",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 66,
									"character": 44
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 727,
							"name": "inside/toilet/door_width",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 68,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 728,
							"name": "inside/toilet/free_space_front",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 69,
									"character": 34
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 729,
							"name": "inside/toilet/free_space_left",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 70,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 730,
							"name": "inside/toilet/free_space_right",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 71,
									"character": 34
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 731,
							"name": "inside/toilet/has_arm_rests",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 72,
									"character": 31
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 732,
							"name": "inside/toilet/has_basin",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 73,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 733,
							"name": "inside/toilet/has_toilet",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 74,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 734,
							"name": "inside/toilet/seat_height",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 75,
									"character": 29
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 735,
							"name": "inside/toilet/stepless_access",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 76,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 736,
							"name": "inside/toilet/toilet_photo",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 77,
									"character": 30
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 747,
							"name": "is_wheelchair_accessible",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 88,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoPartiallyResult",
								"id": 680
							}
						},
						{
							"id": 694,
							"name": "meta/instanceID",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 34,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 709,
							"name": "outside/category/category_sub",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 50,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 710,
							"name": "outside/category/category_top",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 51,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 712,
							"name": "outside/entrance/has_automatic_door",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 53,
									"character": 39
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 713,
							"name": "outside/entrance/has_door",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 54,
									"character": 29
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 714,
							"name": "outside/entrance/has_entrance",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 55,
									"character": 33
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 711,
							"name": "outside/entrance/has_fixed_ramp",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 52,
									"character": 35
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 715,
							"name": "outside/entrance/has_mobile_ramp",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 56,
									"character": 36
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 716,
							"name": "outside/entrance/has_steps",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 57,
									"character": 30
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 718,
							"name": "outside/entrance/picture",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 59,
									"character": 28
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 719,
							"name": "outside/entrance/steps_count",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 60,
									"character": 32
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 720,
							"name": "outside/entrance/steps_height",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 61,
									"character": 33
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 717,
							"name": "outside/entrance/steps_low_height",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 58,
									"character": 37
								}
							],
							"type": {
								"type": "reference",
								"name": "YesNoResult",
								"id": 679
							}
						},
						{
							"id": 706,
							"name": "outside/geometry_point",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 47,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 721,
							"name": "outside/name",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 62,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 750,
							"name": "phone_number",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 91,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 692,
							"name": "phonenumber",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 32,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 753,
							"name": "place_email_address",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 94,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 751,
							"name": "place_phone_number",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 92,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 752,
							"name": "place_website_url",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 93,
									"character": 19
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 691,
							"name": "simserial",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 31,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 698,
							"name": "start",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 38,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 705,
							"name": "subscriberid",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 45,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 696,
							"name": "today",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 36,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 707,
							"name": "user/user_measuring",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 48,
									"character": 23
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "inch"
									},
									{
										"type": "stringLiteral",
										"value": "cm"
									}
								]
							}
						},
						{
							"id": 708,
							"name": "user/user_record_type",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 49,
									"character": 25
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 693,
							"name": "username",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 33,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 748,
							"name": "wheelchair_comment",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "transformers/transformKoboToA11y.ts",
									"line": 89,
									"character": 20
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								700,
								686,
								690,
								685,
								683,
								687,
								699,
								703,
								704,
								688,
								684,
								702,
								689,
								701,
								697,
								746,
								745,
								695,
								749,
								738,
								739,
								740,
								741,
								742,
								743,
								744,
								737,
								723,
								722,
								726,
								724,
								725,
								727,
								728,
								729,
								730,
								731,
								732,
								733,
								734,
								735,
								736,
								747,
								694,
								709,
								710,
								712,
								713,
								714,
								711,
								715,
								716,
								718,
								719,
								720,
								717,
								706,
								721,
								750,
								692,
								753,
								751,
								752,
								691,
								698,
								705,
								696,
								707,
								708,
								693,
								748
							]
						}
					],
					"sources": [
						{
							"fileName": "transformers/transformKoboToA11y.ts",
							"line": 22,
							"character": 24
						}
					]
				}
			}
		},
		{
			"id": 139,
			"name": "Length",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 148,
					"character": 18
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Quantity",
						"id": 97
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			}
		},
		{
			"id": 551,
			"name": "LessThan",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 12,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 552,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 553,
							"name": "$lt",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 12,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"name": "Comparable",
								"id": 541
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								553
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 12,
							"character": 15
						}
					]
				}
			}
		},
		{
			"id": 554,
			"name": "LessThanEquals",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 13,
					"character": 19
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 555,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 556,
							"name": "$lte",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 13,
									"character": 28
								}
							],
							"type": {
								"type": "reference",
								"name": "Comparable",
								"id": 541
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								556
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 13,
							"character": 21
						}
					]
				}
			}
		},
		{
			"id": 158,
			"name": "LocalizedString",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Localized strings can either be just `String`s, or be `Object`s with IETF language tags\nas property names and localized strings as property values."
			},
			"sources": [
				{
					"fileName": "LocalizedString.ts",
					"line": 6,
					"character": 27
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 159,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": [
								{
									"id": 160,
									"name": "__index",
									"kind": 8192,
									"kindString": "Index signature",
									"flags": {},
									"parameters": [
										{
											"id": 161,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"sources": [
								{
									"fileName": "LocalizedString.ts",
									"line": 8,
									"character": 3
								}
							]
						}
					}
				]
			}
		},
		{
			"id": 570,
			"name": "MatchRule",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 33,
					"character": 14
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 571,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"indexSignature": [
						{
							"id": 572,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"parameters": [
								{
									"id": 573,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "MatchValue",
								"id": 569
							}
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 33,
							"character": 16
						}
					]
				}
			}
		},
		{
			"id": 569,
			"name": "MatchValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 18,
					"character": 15
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "intrinsic",
						"name": "number"
					},
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "null"
					},
					{
						"type": "intrinsic",
						"name": "boolean"
					},
					{
						"type": "reference",
						"name": "DefinedValue",
						"id": 548
					},
					{
						"type": "reference",
						"name": "ExistsValue",
						"id": 542
					},
					{
						"type": "reference",
						"name": "UnknownOrValue",
						"id": 545
					},
					{
						"type": "reference",
						"name": "LessThan",
						"id": 551
					},
					{
						"type": "reference",
						"name": "LessThanEquals",
						"id": 554
					},
					{
						"type": "reference",
						"name": "GreaterThan",
						"id": 557
					},
					{
						"type": "reference",
						"name": "GreaterThanEquals",
						"id": 560
					},
					{
						"type": "reference",
						"name": "Equals",
						"id": 563
					},
					{
						"type": "reference",
						"name": "NotEquals",
						"id": 566
					}
				]
			}
		},
		{
			"id": 566,
			"name": "NotEquals",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 17,
					"character": 14
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 567,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 568,
							"name": "$ne",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 17,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"name": "Comparable",
								"id": 541
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								568
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 17,
							"character": 16
						}
					]
				}
			}
		},
		{
			"id": 108,
			"name": "Operator",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "The allowed operators for comparison quantities"
			},
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 45,
					"character": 20
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "<"
					},
					{
						"type": "stringLiteral",
						"value": "<="
					},
					{
						"type": "stringLiteral",
						"value": "=="
					},
					{
						"type": "stringLiteral",
						"value": ">="
					},
					{
						"type": "stringLiteral",
						"value": ">"
					}
				]
			}
		},
		{
			"id": 607,
			"name": "Operators",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 112,
					"character": 14
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "$eq"
					},
					{
						"type": "stringLiteral",
						"value": "$lt"
					},
					{
						"type": "stringLiteral",
						"value": "$lte"
					},
					{
						"type": "stringLiteral",
						"value": "$gt"
					},
					{
						"type": "stringLiteral",
						"value": "$gte"
					},
					{
						"type": "stringLiteral",
						"value": "$ne"
					}
				]
			}
		},
		{
			"id": 574,
			"name": "OrRule",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 36,
					"character": 11
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 575,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 576,
							"name": "$or",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 37,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "ReadonlyArray",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Rule",
										"id": 580
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								576
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 36,
							"character": 13
						}
					]
				}
			}
		},
		{
			"id": 52,
			"name": "QuestionFunction",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "A function that gets evaluated in a questionnaire context"
			},
			"typeParameter": [
				{
					"id": 53,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 31,
					"character": 28
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 54,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"signatures": [
						{
							"id": 55,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 56,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "QuestionFunctionContext",
										"id": 2,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "SimpleSchemaExtensions.ts",
							"line": 31,
							"character": 33
						}
					]
				}
			}
		},
		{
			"id": 57,
			"name": "QuestionValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Definition for a question, can be either a String, an Array of Strings (value will be picked at random),\nor a function that will be evaluated"
			},
			"typeParameter": [
				{
					"id": 58,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 37,
					"character": 25
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "string"
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					{
						"type": "reference",
						"name": "QuestionFunction",
						"id": 52,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "T"
							}
						]
					}
				]
			}
		},
		{
			"id": 266,
			"name": "RestroomSignIcon",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "Restroom.ts",
					"line": 27,
					"character": 28
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "allGender"
					},
					{
						"type": "stringLiteral",
						"value": "female"
					},
					{
						"type": "stringLiteral",
						"value": "male"
					},
					{
						"type": "stringLiteral",
						"value": "personInWheelchair"
					},
					{
						"type": "stringLiteral",
						"value": "changingTable"
					},
					{
						"type": "stringLiteral",
						"value": "baby"
					},
					{
						"type": "stringLiteral",
						"value": "family"
					},
					{
						"type": "stringLiteral",
						"value": "urinal"
					},
					{
						"type": "stringLiteral",
						"value": "washBasin"
					},
					{
						"type": "stringLiteral",
						"value": "toiletBowl"
					}
				]
			}
		},
		{
			"id": 580,
			"name": "Rule",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 42,
					"character": 16
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "OrRule",
						"id": 574
					},
					{
						"type": "reference",
						"name": "AndRule",
						"id": 577
					},
					{
						"type": "reference",
						"name": "MatchRule",
						"id": 570
					}
				]
			}
		},
		{
			"id": 590,
			"name": "RuleEvaluationResult",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 57,
					"character": 32
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "true"
					},
					{
						"type": "stringLiteral",
						"value": "false"
					},
					{
						"type": "stringLiteral",
						"value": "unknown"
					}
				]
			}
		},
		{
			"id": 274,
			"name": "SignLanguageCode",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "We assume that IETF language tags will be extended with sign language codes (as proposed by\nhttp://www.evertype.com/standards/iso639/sign-language.html) eventually, so our language tags\nsupport them already.",
				"text": "For sign language translations of strings, you can use media URLs pointing to videos or\ndescription pictures.\n"
			},
			"sources": [
				{
					"fileName": "ietfLanguageTags.ts",
					"line": 1663,
					"character": 28
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "ase"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-ase"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-ase-US"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-GH-EP"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-DZ"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-US"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-AR"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-AM"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-AU-NT"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-AU"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-AT"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-ID-BA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-BE-VLG"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-BE-WAL"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-BO"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-BR"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-GB"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-BG"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-ES-CT"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-TD"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CL"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CN"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CO"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CR"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CZ"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-DK"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-NL"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-EC"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-SV"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CA-NU"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-ET"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-FI"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CA-QC"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-FR"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-DE"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-GH"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-GR"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-GT"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-US-HI"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-HK"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-IS"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-ID"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-IN"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-IE"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-IL"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-IT"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-JM"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-JP"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-JO"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-KE"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-KR"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-MY-B"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-LV"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-LY"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-LT"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-FR-69"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-MY"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-MT"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-US-MA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-MX-YUC"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-MX"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-VA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-MN"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-MA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-NA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-NP"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-NZ"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-NI"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-NG"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-NO"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CA-NS"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-GB-KEN"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-MY-P"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-IR"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-PE"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-PH"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-US-SD"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-PL"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-PT"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CO-SAP"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-PR"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-SB"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-RO"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-RU"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-SA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-SE-crp"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-SG"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-SK"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-ZA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-ES"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-LK"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-SE"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CH-GE"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CH-ZH"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-CH-TI"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-TW"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-TZ"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-TH"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-TN"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-TR"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-UG"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-UA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-BR-MA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-UY"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-VE"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-IL-yid"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-YU"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-ZM"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-ZW"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-afr-ZA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-chi-TW"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-dan-DK"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-dut-BE"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-dut-NL"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-eng-GB"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-eng-IE"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-eng-US"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-fin-FI"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-fre-BE"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-fre-CA"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-fre-FR"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-jpn-JP"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-nor-NO"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-por-PT"
					},
					{
						"type": "stringLiteral",
						"value": "sgn-swe-SE"
					}
				]
			}
		},
		{
			"id": 369,
			"name": "SmokingPolicy",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"comment": {
				"shortText": "Describes the smoking policy for visitors of a place."
			},
			"sources": [
				{
					"fileName": "SmokingPolicy.ts",
					"line": 6,
					"character": 25
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "dedicatedToSmoking"
					},
					{
						"type": "stringLiteral",
						"value": "allowedEverywhere"
					},
					{
						"type": "stringLiteral",
						"value": "inSeparateArea"
					},
					{
						"type": "stringLiteral",
						"value": "inIsolatedArea"
					},
					{
						"type": "stringLiteral",
						"value": "prohibited"
					},
					{
						"type": "stringLiteral",
						"value": "onlyOutside"
					}
				]
			}
		},
		{
			"id": 545,
			"name": "UnknownOrValue",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 9,
					"character": 19
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 546,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 547,
							"name": "$unknownOr",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "rules/RatingRules.ts",
									"line": 9,
									"character": 34
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								547
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/RatingRules.ts",
							"line": 9,
							"character": 21
						}
					]
				}
			}
		},
		{
			"id": 140,
			"name": "Volume",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {
				"isExported": true
			},
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 149,
					"character": 18
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Quantity",
						"id": 97
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			}
		},
		{
			"id": 680,
			"name": "YesNoPartiallyResult",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 20,
					"character": 25
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "true"
					},
					{
						"type": "stringLiteral",
						"value": "partially"
					},
					{
						"type": "stringLiteral",
						"value": "false"
					},
					{
						"type": "stringLiteral",
						"value": "undefined"
					}
				]
			}
		},
		{
			"id": 679,
			"name": "YesNoResult",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 19,
					"character": 16
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "stringLiteral",
						"value": "true"
					},
					{
						"type": "stringLiteral",
						"value": "false"
					},
					{
						"type": "stringLiteral",
						"value": "undefined"
					}
				]
			}
		},
		{
			"id": 408,
			"name": "AccessibilitySchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Accessibility.ts",
					"line": 165,
					"character": 32
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  accessibleWith: {\n    type: PersonalProfileSchema,\n    optional: true,\n    accessibility: {\n      deprecated: true\n    }\n  },\n  partiallyAccessibleWith: {\n    type: PersonalProfileSchema,\n    optional: true,\n    accessibility: {\n      deprecated: true\n    }\n  },\n  offersActivitiesForPeopleWith: {\n    type: PersonalProfileSchema,\n    optional: true,\n    accessibility: {\n      deprecated: true\n    }\n  },\n  staff: {\n    type: StaffSchema,\n    optional: true,\n    accessibility: {\n      question: t`Is there any staff on the premises?`\n    }\n  },\n  wheelchairPlaces: {\n    type: WheelchairPlacesSchema,\n    optional: true,\n    accessibility: {\n      question: t`Are there any spaces reserved for people in wheelchairs?`\n    }\n  },\n  media: {\n    type: Array,\n    optional: true,\n    accessibility: {\n      question: t`Is there any media available?`,\n      questionMore: t`Is there more media available?`,\n      description: t`e.g. menus, exhibits or presentations`\n    }\n  },\n  'media.$': {\n    type: MediaSchema\n  },\n  payment: {\n    type: PaymentSchema,\n    optional: true,\n    accessibility: {\n      question: t`Is there any payment possible?`\n    }\n  },\n  parking: {\n    type: ParkingSchema,\n    optional: true,\n    accessibility: {\n      question: t`Is there parking attached to this place?`\n    }\n  },\n  ground: {\n    type: GroundSchema,\n    optional: true,\n    accessibility: {\n      question: t`In which condition is the ground you have to traverse to get here?`\n    }\n  },\n  ratingSpacious: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 1,\n    accessibility: {\n      deprecated: true,\n      question: t`How spacious is this place?`,\n      componentHint: 'StarRating'\n    }\n  },\n  isWellLit: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is the place well lit?`\n    }\n  },\n  isQuiet: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is the place quiet?`\n    }\n  },\n  hasInductionLoop: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Does this place have induction loops?`\n    }\n  },\n  // TODO: Causes test error. Fix this!\n  // ambientNoiseLevel: quantityDefinition(LengthSchema, true, {\n  //   question: t`How loud is the ambient noise here typically (A-Weighted)?`,\n  //   machineData: true\n  // }),\n\n  smokingPolicy: {\n    type: String,\n    optional: true,\n    allowedValues: smokingPolicies.map(s => s.value),\n    accessibility: {\n      question: t`Is smoking allowed here?`,\n      options: smokingPolicies\n    }\n  },\n  hasTactileGuideStrips: {\n    type: Boolean,\n    optional: true\n  },\n  animalPolicy: {\n    type: AnimalPolicySchema,\n    optional: true,\n    accessibility: {\n      question: t`What is the animal policy of this place?`\n    }\n  },\n  pathways: {\n    type: PathwaysSchema,\n    optional: true\n  },\n  entrances: {\n    type: Array,\n    optional: true,\n    label: t`Entrances`,\n    accessibility: {\n      questionBlockBegin: t`Would you like to rate the first entrance?`,\n      questionMore: t`Would you like to rate another entrance?`\n    }\n  },\n  'entrances.$': EntranceSchema,\n  restrooms: {\n    type: Array,\n    optional: true,\n    label: t`Restrooms`,\n    accessibility: {\n      questionBlockBegin: t`Would you like to rate the accessibility of the restroom?`,\n      questionMore: t`Would you like to rate another restroom?`\n    }\n  },\n  'restrooms.$': RestroomSchema,\n  tables: {\n    type: TablesSchema,\n    optional: true,\n    accessibility: {\n      question: t`Are there any tables here?`,\n      options: [\n        {\n          label: t`Accessible table`,\n          option: AccessibleTablesPrefab\n        }\n      ]\n    }\n  },\n  sitemap: {\n    type: Object, // TODO define type\n    optional: true\n  },\n  lifts: {\n    type: Array,\n    optional: true\n  },\n  'lifts.$': Object, // TODO define type\n  switches: {\n    type: Array,\n    optional: true\n  },\n  'switches.$': Object, // TODO define type\n  vendingMachines: {\n    type: Array,\n    optional: true\n  },\n  'vendingMachines.$': Object, // TODO define type\n  powerOutlets: {\n    type: Array,\n    optional: true\n  },\n  'powerOutlets.$': Object, // TODO define type\n  beds: {\n    type: Array,\n    optional: true\n  },\n  'beds.$': Object, // TODO define type\n  wardrobe: {\n    type: Object, // TODO define type\n    optional: true\n  },\n  changingRoom: {\n    type: Object, // TODO define type\n    optional: true\n  },\n  stage: {\n    type: Object, // TODO define type\n    optional: true\n  },\n  cashRegister: {\n    type: Object, // TODO define type\n    optional: true\n  },\n  seats: {\n    type: Object, // TODO define type\n    optional: true\n  },\n  serviceContact: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`How can the service staff be reached?`\n    }\n  },\n  services: {\n    type: Object, // TODO define type\n    optional: true\n  },\n  infoDesk: {\n    type: Object, // TODO define type\n    optional: true\n  },\n  signage: {\n    type: Object, // TODO define type\n    optional: true\n  }\n})"
		},
		{
			"id": 86,
			"name": "AccessibilitySchemaExtensionSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "A schema for validating the AccessibilitySchemaExtension. Used for internal tests."
			},
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 187,
					"character": 47
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  example: {\n    type: String,\n    optional: true\n  },\n  description: {\n    type: String,\n    optional: true\n  },\n  extendedInformationUrl: {\n    type: String,\n    optional: true\n  },\n  options: {\n    type: Array,\n    optional: true\n  },\n  'options.$': {\n    type: Object,\n    blackbox: true\n  },\n  // FIXME disabled value validation until SimpleSchema.oneOf bug is fixed\n  // https://github.com/aldeed/simple-schema-js/issues/112\n  // 'options.$.value': {\n  //   type: SimpleSchema.oneOf(\n  //     String,\n  //     {\n  //       type: Object,\n  //       blackbox: true\n  //     },\n  //     Number,\n  //   ),\n  // },\n  'options.$.label': {\n    type: String\n  },\n  question: {\n    type: String,\n    optional: true\n  },\n  questionMore: {\n    type: String,\n    optional: true\n  },\n  questionBlockBegin: {\n    type: String,\n    optional: true\n  },\n  machineData: {\n    type: Boolean,\n    optional: true\n  },\n  componentHint: {\n    type: String,\n    optional: true\n  },\n  inseparable: {\n    type: Boolean,\n    optional: true\n  },\n  preferredUnit: {\n    type: String,\n    optional: true\n  },\n  deprecated: {\n    type: Boolean,\n    optional: true\n  }\n})"
		},
		{
			"id": 430,
			"name": "AddressSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "The AddressSchema extends the StructuredAddressSchema and allows also Strings"
			},
			"sources": [
				{
					"fileName": "Address.ts",
					"line": 226,
					"character": 26
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Object"
					},
					{
						"type": "reference",
						"name": "String"
					},
					{
						"type": "reference",
						"name": "Number"
					},
					{
						"type": "reference",
						"name": "Boolean"
					},
					{
						"type": "reference",
						"name": "RegExp"
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					},
					{
						"type": "reference",
						"name": "SchemaDefinition"
					},
					{
						"type": "reference",
						"name": "Date"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 431,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 432,
									"name": "definitions",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "/Users/henrikhinrichs/Work/ac-format/typings/simpl-schema.d.ts",
											"line": 8,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 433,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 434,
															"name": "type",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "/Users/henrikhinrichs/Work/ac-format/typings/simpl-schema.d.ts",
																	"line": 9,
																	"character": 8
																}
															],
															"type": {
																"type": "reference",
																"name": "SchemaType"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																434
															]
														}
													],
													"sources": [
														{
															"fileName": "/Users/henrikhinrichs/Work/ac-format/typings/simpl-schema.d.ts",
															"line": 8,
															"character": 22
														}
													]
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										432
									]
								}
							]
						}
					}
				]
			},
			"defaultValue": " SimpleSchema.oneOf(StructuredAddressSchema, String)"
		},
		{
			"id": 487,
			"name": "AllowedEquipmentTypes",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "EquipmentProperties.ts",
					"line": 31,
					"character": 34
				}
			],
			"type": {
				"type": "reference",
				"name": "ReadonlyArray",
				"typeArguments": [
					{
						"type": "union",
						"types": [
							{
								"type": "stringLiteral",
								"value": "bed"
							},
							{
								"type": "stringLiteral",
								"value": "wardrobe"
							},
							{
								"type": "stringLiteral",
								"value": "elevator"
							},
							{
								"type": "stringLiteral",
								"value": "escalator"
							},
							{
								"type": "stringLiteral",
								"value": "movingWalkway"
							},
							{
								"type": "stringLiteral",
								"value": "ramp"
							},
							{
								"type": "stringLiteral",
								"value": "hoist"
							},
							{
								"type": "stringLiteral",
								"value": "stairLift"
							},
							{
								"type": "stringLiteral",
								"value": "switch"
							},
							{
								"type": "stringLiteral",
								"value": "sitemap"
							},
							{
								"type": "stringLiteral",
								"value": "vendingMachine"
							},
							{
								"type": "stringLiteral",
								"value": "intercom"
							},
							{
								"type": "stringLiteral",
								"value": "powerOutlet"
							}
						]
					}
				]
			},
			"defaultValue": " Object.freeze([\n  'bed',\n  'wardrobe',\n  'elevator',\n  'escalator',\n  'movingWalkway',\n  'ramp',\n  'hoist',\n  'stairLift',\n  'switch',\n  'sitemap',\n  'vendingMachine',\n  'intercom',\n  'powerOutlet'\n]) as ReadonlyArray<EquipmentTypes>"
		},
		{
			"id": 368,
			"name": "AnimalPolicySchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "AnimalPolicy.ts",
					"line": 28,
					"character": 31
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  allowsGuideDogs: {\n    type: Boolean,\n    accessibility: {\n      question: t`Does this place allow guide dogs?`\n    }\n  },\n  allowsServiceAnimals: {\n    type: Boolean,\n    accessibility: {\n      question: t`Does this place allow therapy animals?`\n    }\n  },\n  allowsDogs: {\n    type: Boolean,\n    accessibility: {\n      question: t`Does this place allow visitors to bring dogs?`\n    }\n  },\n  dogsNeedMuzzle: {\n    type: Boolean,\n    accessibility: {\n      question: t`Does this place enforce that dogs wear a muzzle?`\n    }\n  },\n  allowsAnyPets: {\n    type: Boolean,\n    accessibility: {\n      question: t`Does this place allow any kind of pets?`\n    }\n  },\n  suppliesWaterForPets: {\n    type: Boolean,\n    accessibility: {\n      question: t`Does this place supply water for pets?`\n    }\n  }\n})"
		},
		{
			"id": 109,
			"name": "BaseQuantitySchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "The BaseQuantitySchema allows easy validation, cleaning and checking of quantity objects.\nIt does not define a unit kind, and will not validate the unit."
			},
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 67,
					"character": 31
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  operator: {\n    type: String,\n    allowedValues: ['<', '<=', '==', '>=', '>'],\n    optional: true\n  },\n  value: {\n    type: Number\n  },\n  unit: {\n    type: String\n  },\n  accuracy: {\n    type: Number,\n    optional: true\n  },\n  rawValue: {\n    type: String,\n    optional: true\n  }\n})"
		},
		{
			"id": 157,
			"name": "DoorSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Door.ts",
					"line": 60,
					"character": 23
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  turningSpaceInFront: quantityDefinition(LengthSchema, true, {\n    question: t`How much space for turning is there at the entrance?`\n  }),\n  doorOpensToOutside: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Does the door open to the outside?`\n    }\n  },\n  isAutomaticOrAlwaysOpen: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is this an automatic door or is the door always open?`\n    }\n  },\n  width: quantityDefinition(LengthSchema, true, {\n    question: t`How wide is the door?`,\n    description: t`This refers to the maximum size of an object that can pass.`\n  }),\n  hasClearMarkingOnGlassDoor: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Does the glass door have clear markings?`\n    }\n  },\n  isEasyToHoldOpen: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is this an automatic door or is the door always open?`\n    }\n  },\n  hasErgonomicDoorHandle: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Does this door have an ergonomic handle?`\n    }\n  },\n  isRevolving: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is this a revolving door?`\n    }\n  },\n  needsRadarKey: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Does this door require a radar key?`\n    }\n  },\n  needsEuroKey: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Does this door require an euro key?`\n    }\n  }\n})"
		},
		{
			"id": 191,
			"name": "EntranceSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Entrance.ts",
					"line": 59,
					"character": 27
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  name: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`What is the name of this entrance?`,\n      example: t`e.g. main entrance`\n    }\n  },\n  isMainEntrance: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is this the main entrance?`\n    }\n  },\n  isLevel: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is the entrance stepless?`\n    }\n  },\n  slopeAngle: {\n    type: Number,\n    optional: true,\n    accessibility: {\n      description: t`Grade in percent as calculated by \\`100 * rise / run\\` or the tangent of the angle of inclination times 100`,\n      question: t`What is the angle of the slope?`\n    }\n  },\n  hasRemovableRamp: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is a portable ramp available? Please check with the staff on-site.`\n    }\n  },\n  stairs: {\n    type: StairsSchema,\n    optional: true,\n    label: t`Stairs`,\n    accessibility: {\n      question: t`Are there steps at the entrance?`\n    }\n  },\n  door: {\n    type: DoorSchema,\n    optional: true,\n    label: t`Door`,\n    accessibility: {\n      questionBlockBegin: t`Would you like to add information about the door at the entrance?`\n    }\n  },\n  elevatorEquipmentId: {\n    type: String,\n    optional: true,\n    accessibility: {\n      question: t`Is there a lift at this entrance?`,\n      machineData: true\n      // TODO foreign object flow equipment\n    }\n  },\n  intercomEquipmentId: {\n    type: String,\n    optional: true,\n    accessibility: {\n      question: t`Is there an intercom at this entrance?`,\n      machineData: true\n      // TODO foreign object flow equipment\n    }\n  }\n})"
		},
		{
			"id": 493,
			"name": "EquipmentInfoSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "EquipmentInfo.ts",
					"line": 28,
					"character": 32
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  formatVersion: {\n    type: String,\n    optional: true\n  },\n  properties: {\n    type: EquipmentPropertiesSchema\n  },\n  geometry: {\n    type: PointGeometrySchema\n  }\n})"
		},
		{
			"id": 488,
			"name": "EquipmentPropertiesSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "EquipmentProperties.ts",
					"line": 301,
					"character": 38
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  ids: {\n    type: Array,\n    optional: true\n  },\n  'ids.$': ExternalIdSchema,\n  originalId: {\n    type: String,\n    optional: true\n  },\n  category: {\n    type: String,\n    optional: true,\n    allowedValues: AllowedEquipmentTypes.map(s => s)\n  },\n  description: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      description: t`Describes where the equipment is located. If only one description string is technically possible to maintain, it should not contain any abbreviations to allow being read aloud by screen readers or voice assistants`,\n      example: t`For elevators: ‘Between ticket counter and Central Line platforms’, ‘From basement upwards towards Main Street exit’`\n    }\n  },\n  // Alternative description that is screen-reader compatible and replaces abbreviations / symbols with words\n  longDescription: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      description: t`Contains the same information as description, but in a longer form which can be read out by a screen reader or voice assistant.\n        Words should be written out fully (e.g. ‘direction’ instead of ‘dir.‘, ‘ground’ instead of ‘G‘, ‘platform’ instead of ‘pl.’). The field should not contain any symbols (e.g. \\`->\\`, \\`<->\\`, or \\`→\\`).\n        Suitable for people who have a visual impairment or use a screen reader or voice assistant (e.g. Amazon’s Alexa).\n        If only one description field can be used for technical reasons, then the written-out form should be given preference, because a short form can be generated from the long form more easily than the other way around.\n        Can be used by web developers as content for the \\`aria-label\\`-attribute, for example.`\n    }\n  },\n  // Alternative description that uses less screen estate, more abbreviations and Unicode symbols like `→`\n  shortDescription: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      description: t`Contains the same information as description, but in a shorter form, to save space on the screen. May contain Unicode characters such as ⟷ or ↘︎ as well as abbreviations (e.g. ‘pl.’ instead of ‘platform’, ‘dir.’ instead of ‘direction’).`\n    }\n  },\n  heightOfControls: {\n    type: LengthSchema,\n    optional: true,\n    accessibility: {\n      componentHint: 'Unit',\n      question: t`How high are the lowest working controls for this equipment?`\n    }\n  },\n  door: {\n    type: DoorSchema,\n    optional: true,\n    label: t`Door`,\n    accessibility: {\n      questionBlockBegin: t`Would you like to add information about the door of this equipment?`\n    }\n  },\n  hasDoorsInBothDirections: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`If this is an elevator, does it have doors in both directions?`\n    }\n  },\n  cabinWidth: {\n    type: LengthSchema,\n    optional: true,\n    accessibility: {\n      componentHint: 'Unit',\n      question: t`How wide is the cabin (as seen from the entrance)?`\n    }\n  },\n  cabinLength: {\n    type: LengthSchema,\n    optional: true,\n    accessibility: {\n      componentHint: 'Unit',\n      question: t`How long/deep is the cabin (as seen from the entrance)?`\n    }\n  },\n  languages: {\n    type: Array,\n    defaultValue: [],\n    optional: true\n  },\n  'languages.$': {\n    type: String,\n    label: t`Language`,\n    allowedValues: ietfLanguageTagsAndSignLanguageCodes\n  },\n  hasRaisedText: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  hasBrailleText: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  hasSpeech: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  isHighContrast: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  hasLargePrint: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  isVoiceActivated: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  hasHeadPhoneJack: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  isEasyToUnderstand: {\n    type: Boolean,\n    defaultValue: false,\n    optional: true\n  },\n  isIndoors: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is this equipment indoors?`\n    }\n  },\n  alternativeRouteInstructions: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`Is there an alternative route to this equipment?`\n    }\n  },\n  isWorking: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is the equipment currently in operation?`,\n      accessibility: {\n        machineData: true\n      }\n    }\n  },\n  outOfOrderReason: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`If the equipment is not in operation, why?`,\n      example: 'Vandalism, construction work, …',\n      machineData: true\n    }\n  },\n  stateLastUpdate: {\n    type: Date,\n    optional: true,\n    accessibility: {\n      machineData: true,\n      description: t`Last update of the operational status`\n    }\n  },\n  plannedCompletionDate: {\n    type: Date,\n    optional: true,\n    accessibility: {\n      question: t`If the equipment is not in operation, when is it going to be again?`\n    }\n  },\n  manufacturerName: {\n    type: LocalizedStringSchema,\n    optional: true\n  },\n  manufacturerSerialNumber: {\n    type: String,\n    optional: true\n  },\n  servicePhoneNumber: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`Which phone number should be called to notify if the equipment is out of service?`,\n      description: t`Service phone number under which the facility management can be reached, with international country code`,\n      example: t`e.g. +1-555-555-90-210`,\n      componentHint: 'PhoneNumber'\n    }\n  },\n  serviceWebsiteUrl: {\n    type: LocalizedStringSchema,\n    regEx: SimpleSchema.RegEx.Url,\n    optional: true,\n    accessibility: {\n      question: t`On which website address can you find updates about the operational status?`\n    }\n  },\n  sourceId: {\n    type: String,\n    optional: true,\n    accessibility: {\n      machineData: true,\n      description: t`Reference to the data source where this information comes from (accessibility.cloud ID)`\n    }\n  },\n  sourceImportId: {\n    type: String,\n    optional: true,\n    accessibility: {\n      machineData: true,\n      description: t`Reference to the data import where this information comes from (accessibility.cloud ID)`\n    }\n  },\n  placeSourceId: {\n    type: String,\n    optional: true,\n    accessibility: {\n      machineData: true,\n      description: t`Original ID of the place data source that this equipment belongs to (accessibility.cloud ID)`\n    }\n  },\n  originalPlaceInfoId: {\n    type: String,\n    optional: true,\n    accessibility: {\n      machineData: true,\n      description: t`Original ID of the place that this equipment belongs to (unique in the original data set)`\n    }\n  },\n  disruptionSourceImportId: {\n    type: String,\n    optional: true,\n    accessibility: {\n      machineData: true,\n      description: t`Reference to data source for operational status live updates (accessibility.cloud ID)`\n    }\n  },\n  originalData: {\n    type: String,\n    optional: true,\n    accessibility: {\n      machineData: true,\n      description: t`Data record that came from the original data source (for debugging)`\n    }\n  },\n  placeInfoId: {\n    type: String,\n    optional: true,\n    accessibility: {\n      machineData: true,\n      description: t`Reference to the place that this equipment belongs to (accessibility.cloud ID)`\n    }\n  }\n})"
		},
		{
			"id": 446,
			"name": "ExternalIdSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "ExternalId.ts",
					"line": 15,
					"character": 29
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  provider: String,\n  id: String,\n  schemaName: {\n    type: String,\n    optional: true\n  }\n})"
		},
		{
			"id": 221,
			"name": "FoldingHandlesSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "FoldingHandles.ts",
					"line": 26,
					"character": 33
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 222,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 223,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 224,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										223,
										224
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			},
			"defaultValue": " createSchemaInstance('FoldingHandles', {\n  onUsersLeftSide: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is there a folding handle on left side? (from the perspective of somebody using the toilet)`\n    }\n  },\n  onUsersRightSide: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is there a folding handle on right side? (from the perspective of somebody using the toilet)`\n    }\n  },\n  topHeightFromFloor: quantityDefinition(LengthSchema, true, {\n    question: t`How high are the folding handles (top edge, measured from the floor)`\n  }),\n  distanceBetweenHandles: quantityDefinition(LengthSchema, true, {\n    question: t`How far are the handles apart?`\n  })\n})"
		},
		{
			"id": 1,
			"name": "FormatVersion",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Version.ts",
					"line": 1,
					"character": 26
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "4.7.3"
			},
			"defaultValue": "\"4.7.3\""
		},
		{
			"id": 441,
			"name": "GeometrySchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Geometry.ts",
					"line": 33,
					"character": 27
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " PointGeometrySchema"
		},
		{
			"id": 361,
			"name": "GroundSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Ground.ts",
					"line": 42,
					"character": 25
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  sidewalkConditions: {\n    type: Number,\n    optional: true,\n    min: 0,\n    max: 1,\n    accessibility: {\n      question: t`How would you rate the conditions of the sidewalk?`,\n      componentHint: 'StarRating'\n    }\n  },\n  isLevel: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is the ground level?`\n    }\n  },\n  slopeAngle: {\n    type: Number,\n    optional: true,\n    accessibility: {\n      description: t`Grade in percent as calculated by \\`100 * rise / run\\` or the tangent of the angle of inclination times 100`,\n      question: t`What is the angle of the slope?`\n    }\n  },\n  evenPavement: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is the pavement even, ie. no cobble stones?`\n    }\n  },\n  distanceToDroppedCurb: quantityDefinition(LengthSchema, true, {\n    question: t`How far is the entrance from the next dropped curb?`\n  }),\n  turningSpace: quantityDefinition(LengthSchema, true, {\n    question: t`How much space for turning is there?`\n  })\n})"
		},
		{
			"id": 121,
			"name": "LengthQuantitySchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "The LengthQuantitySchema allows easy validation, cleaning and checking of length quantity objects.\nIt validates the unit and will only accept length units, eg. meter, centimeter or inch."
			},
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 142,
					"character": 33
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 122,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 123,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 124,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										123,
										124
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			},
			"defaultValue": " makeQuantitySchema(LengthUnitKind, 'meter')"
		},
		{
			"id": 129,
			"name": "LengthSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 145,
					"character": 25
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Object"
					},
					{
						"type": "reference",
						"name": "String"
					},
					{
						"type": "reference",
						"name": "Number"
					},
					{
						"type": "reference",
						"name": "Boolean"
					},
					{
						"type": "reference",
						"name": "RegExp"
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					},
					{
						"type": "reference",
						"name": "SchemaDefinition"
					},
					{
						"type": "reference",
						"name": "Date"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 130,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 131,
									"name": "definitions",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "/Users/henrikhinrichs/Work/ac-format/typings/simpl-schema.d.ts",
											"line": 8,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 132,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 133,
															"name": "type",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "/Users/henrikhinrichs/Work/ac-format/typings/simpl-schema.d.ts",
																	"line": 9,
																	"character": 8
																}
															],
															"type": {
																"type": "reference",
																"name": "SchemaType"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																133
															]
														}
													],
													"sources": [
														{
															"fileName": "/Users/henrikhinrichs/Work/ac-format/typings/simpl-schema.d.ts",
															"line": 8,
															"character": 22
														}
													]
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										131
									]
								}
							]
						}
					}
				]
			},
			"defaultValue": " SimpleSchema.oneOf(LengthQuantitySchema, String)"
		},
		{
			"id": 103,
			"name": "LengthUnitKind",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "The unit kind for length units such as meter, centimeter or inch"
			},
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 19,
					"character": 27
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "length"
			},
			"defaultValue": "\"length\""
		},
		{
			"id": 299,
			"name": "MediaSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Media.ts",
					"line": 84,
					"character": 24
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  type: {\n    type: String,\n    label: t`Media Type`,\n    allowedValues: [\n      'document',\n      'menu',\n      'guide',\n      'presentation',\n      'exhibit',\n      'movie',\n      'play',\n      'screen'\n    ],\n    accessibility: {\n      question: t`What kind of media is described?`,\n      options: [\n        { value: 'document', label: t`document` },\n        { value: 'menu', label: t`menu` },\n        { value: 'guide', label: t`guide` },\n        { value: 'presentation', label: t`presentation` },\n        { value: 'exhibit', label: t`exhibit` },\n        { value: 'movie', label: t`movie` },\n        { value: 'screen', label: t`screen` }\n      ]\n    }\n  },\n  name: {\n    type: LocalizedStringSchema,\n    label: t`Media Name`,\n    optional: true,\n    accessibility: {\n      question: t`What the name of the`,\n      description: t`e.g. 'daily menu' or 'park guide'`\n    }\n  },\n  isBraille: {\n    type: Boolean,\n    label: t`Braille`,\n    optional: true,\n    accessibility: {\n      question: t`Is there a braille version available?`\n    }\n  },\n  isAudio: {\n    type: Boolean,\n    label: t`Audio`,\n    optional: true,\n    accessibility: {\n      question: t`Is there an audio version available?`\n    }\n  },\n  isLargePrint: {\n    type: Boolean,\n    label: t`Large Print`,\n    optional: true,\n    accessibility: {\n      question: t`Is there a large print version available?`\n    }\n  },\n  hasContrastingBackground: {\n    type: Boolean,\n    label: t`Contrasting Background`,\n    optional: true,\n    accessibility: {\n      question: t`Is the print on a contrasting background?`\n    }\n  },\n  hasDedicatedScreenForSubtitles: {\n    type: Boolean,\n    label: t`Dedicated Subtitle Screen`,\n    optional: true,\n    accessibility: {\n      question: t`Is there a dedicated screen for subtitles.`\n    }\n  },\n  hasSubtitles: {\n    type: Boolean,\n    label: t`Subtitles`,\n    optional: true,\n    accessibility: {\n      question: t`Are there subtitles?`\n    }\n  },\n  hasRealTimeCaptioning: {\n    type: Boolean,\n    label: t`Real-time Captioning`,\n    optional: true,\n    accessibility: {\n      question: t`Is there real time captioning?`\n    }\n  },\n  // There are no standardized language codes for this yet, so this needs to be an extra flag for now.\n  hasPlainLanguageOption: {\n    type: Boolean,\n    label: t`Plain Language Option`,\n    optional: true,\n    accessibility: {\n      question: t`Is there a plain language option?`\n    }\n  },\n  languages: {\n    type: Array,\n    label: t`Languages`,\n    optional: true,\n    accessibility: {\n      question: t`What are the available languages?`\n    }\n  },\n  'languages.$': {\n    type: String,\n    label: t`Language`,\n    allowedValues: ietfLanguageTagsAndSignLanguageCodes\n  },\n  turningSpaceInFront: quantityDefinition(LengthSchema, true, {\n    question: t`How much space for turning is in front of the media?`\n  })\n})"
		},
		{
			"id": 202,
			"name": "MirrorSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Mirror.ts",
					"line": 22,
					"character": 25
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 203,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 204,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 205,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										204,
										205
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			},
			"defaultValue": " createSchemaInstance('Mirror', {\n  isLocatedInsideRestroom: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is the mirror inside the restroom?`\n    }\n  },\n  isAccessibleWhileSeated: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Can the mirror be used when sitting in a wheelchair?`\n    }\n  },\n  heightFromGround: quantityDefinition(LengthSchema)\n})"
		},
		{
			"id": 104,
			"name": "OtherUnitKind",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 20,
					"character": 26
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "other"
			},
			"defaultValue": "\"other\""
		},
		{
			"id": 353,
			"name": "ParkingSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Parking.ts",
					"line": 149,
					"character": 26
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  forWheelchairUsers: {\n    type: WheelchairParkingSchema,\n    optional: true,\n    accessibility: {\n      question: t`Is there parking for wheelchair users?`\n    }\n  }\n})"
		},
		{
			"id": 337,
			"name": "PathwaysSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Pathways.ts",
					"line": 38,
					"character": 27
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  width: quantityDefinition(LengthSchema, true, {\n    question: t`How wide are the aisles or pathways?`\n  }),\n  widthAtObstacles: quantityDefinition(LengthSchema, true, {\n    question: t`What is the minimum width at obstacles?`\n  }),\n  maxLongitudinalSlope: {\n    type: Number,\n    optional: true,\n    accessibility: {\n      question: t`What is the angle of the longitudinal slope?`,\n      description: t`Grade in percent as calculated by \\`100 * rise / run\\` or the tangent of the angle of inclination, multiplied by 100`\n    }\n  },\n  maxLateralSlope: {\n    type: Number,\n    optional: true,\n    accessibility: {\n      question: t`What is the angle of the lateral slope?`,\n      description: t`Grade in percent as calculated by \\`100 * rise / run\\` or the tangent of the angle of inclination, multiplied by 100`\n    }\n  }\n})"
		},
		{
			"id": 308,
			"name": "PaymentSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Payment.ts",
					"line": 20,
					"character": 26
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  hasPortablePaymentSystem: {\n    type: Boolean,\n    label: t`Portable Payment System`,\n    optional: true,\n    accessibility: {\n      question: t`Is there a portable payment system?`\n    }\n  },\n  acceptsPaymentByMobilePhone: {\n    type: Boolean,\n    label: t`Mobile Phone Payment`,\n    optional: true,\n    accessibility: {\n      question: t`Is payment by mobile phone accepted?`\n    }\n  },\n  acceptsCreditCards: {\n    type: Boolean,\n    label: t`Credit Cards`,\n    optional: true,\n    accessibility: {\n      question: t`Is payment by credit card accepted?`\n    }\n  },\n  acceptsDebitCards: {\n    type: Boolean,\n    label: t`Debit Cards`,\n    optional: true,\n    accessibility: {\n      question: t`Is payment by debit card accepted?`\n    }\n  },\n  acceptsCoins: {\n    type: Boolean,\n    label: t`Coins`,\n    optional: true,\n    accessibility: {\n      question: t`Is payment by coins accepted?`\n    }\n  },\n  acceptsBills: {\n    type: Boolean,\n    label: t`Bills`,\n    optional: true,\n    accessibility: {\n      question: t`Is payment by bills accepted?`\n    }\n  },\n  customPaymentMetaInfo: {\n    type: Array,\n    label: t`Custom Payment Information`,\n    optional: true,\n    accessibility: {\n      question: t`Is there custom payment information?`,\n      questionMore: t`Is there additional custom payment information?`,\n      description: t`e.g. additional phone numbers, parking lot IDs etc.`\n    }\n  },\n  'customPaymentMetaInfo.$': {\n    type: LocalizedStringSchema,\n    label: t`Custom Payment Information`,\n    accessibility: {\n      question: t`What is the custom information?`\n    }\n  }\n})"
		},
		{
			"id": 96,
			"name": "PersonalProfileSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "PersonalProfile.ts",
					"line": 33,
					"character": 34
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  muteness: {\n    type: Boolean,\n    optional: true\n  },\n  guideDog: {\n    type: Boolean,\n    optional: true\n  },\n  hearingImpairment: {\n    type: Boolean,\n    optional: true\n  },\n  learningImpairment: {\n    type: Boolean,\n    optional: true\n  },\n  mobilityImpairment: {\n    type: Boolean,\n    optional: true\n  },\n  visualImpairment: {\n    type: Boolean,\n    optional: true\n  },\n  blindness: {\n    type: Boolean,\n    optional: true\n  },\n  wheelchair: {\n    type: Boolean,\n    optional: true\n  }\n})"
		},
		{
			"id": 518,
			"name": "PlaceInfoSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "The PlaceInfoSchema allows easy validation, cleaning and checking of PlaceInfo objects."
			},
			"sources": [
				{
					"fileName": "PlaceInfo.ts",
					"line": 32,
					"character": 28
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  formatVersion: {\n    type: String,\n    optional: true,\n    accessibility: {\n      machineData: true\n    }\n  },\n  properties: {\n    type: PlacePropertiesSchema,\n    label: t`Properties`,\n    accessibility: {\n      question: t`First we need some information about the place.`\n    }\n  },\n  geometry: {\n    type: GeometrySchema,\n    label: t`Place on map`,\n    accessibility: {\n      question: t`On the map, drag the place icon to the entrance's exact position.`,\n      inseparable: true\n    }\n  }\n})"
		},
		{
			"id": 513,
			"name": "PlacePropertiesSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "PlaceProperties.ts",
					"line": 85,
					"character": 34
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  name: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`What is the name of this place?`\n    }\n  },\n  category: {\n    type: String,\n    accessibility: {\n      question: t`What type of place is this?`,\n      componentHint: 'Category'\n    }\n  },\n  address: {\n    type: AddressSchema,\n    optional: true,\n    label: t`Address`,\n    accessibility: {\n      question: t`Would you like to add the address?`,\n      componentHint: 'Address'\n    }\n  },\n  description: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`How would you describe this place?`,\n      componentHint: 'TextArea'\n    }\n  },\n  phoneNumber: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`What is the phone number of this place?`,\n      description: t`The phone number of this place, with international country code`,\n      example: t`e.g. +1-555-555-90-210`,\n      componentHint: 'PhoneNumber'\n    }\n  },\n  emailAddress: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`What is the email address of this place?`,\n      description: t`An email address where visitors can get accessibility relevant information`,\n      example: t`e.g. accessibility@example.com`\n    }\n  },\n  accessibility: {\n    type: AccessibilitySchema,\n    optional: true,\n    accessibility: {\n      question: t`Okay, now let\\`s map the accessibility.`,\n      description: t`Describes the overall accessibility of a place.`\n    }\n  },\n  infoPageUrl: {\n    type: LocalizedStringSchema,\n    regEx: SimpleSchema.RegEx.Url,\n    optional: true,\n    accessibility: {\n      description: t`URL of the original data source’s website describing this place`\n    }\n  },\n  editPageUrl: {\n    type: LocalizedStringSchema,\n    regEx: SimpleSchema.RegEx.Url,\n    optional: true,\n    accessibility: {\n      description: t`URL of the original data source’s website on a subpage that allows to edit the original data.`\n    }\n  },\n  placeWebsiteUrl: {\n    type: LocalizedStringSchema,\n    regEx: SimpleSchema.RegEx.Url,\n    optional: true,\n    accessibility: {\n      description: t`URL of the place’s own website`\n    }\n  },\n  // machine data fields\n  ids: {\n    type: Array,\n    optional: true,\n    accessibility: {\n      machineData: true\n    }\n  },\n  'ids.$': ExternalIdSchema,\n  originalId: {\n    type: String,\n    optional: true,\n    accessibility: {\n      machineData: true\n    }\n  },\n  parentPlaceId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    accessibility: {\n      machineData: true\n    }\n  },\n  originalData: {\n    type: String,\n    optional: true,\n    accessibility: {\n      machineData: true\n    }\n  },\n  eventId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    accessibility: {\n      machineData: true\n    }\n  },\n  creatorId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    accessibility: {\n      machineData: true\n    }\n  },\n  sourceId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    accessibility: {\n      machineData: true\n    }\n  },\n  sourceImportId: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Id,\n    accessibility: {\n      machineData: true\n    }\n  }\n})"
		},
		{
			"id": 439,
			"name": "PointGeometrySchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Geometry.ts",
					"line": 14,
					"character": 32
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  type: {\n    type: String,\n    allowedValues: ['Point']\n  },\n  coordinates: {\n    type: Array,\n    minCount: 2,\n    maxCount: 2\n  },\n  'coordinates.$': {\n    type: Number,\n    min: -180,\n    max: 180\n  }\n})"
		},
		{
			"id": 267,
			"name": "RestroomSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Restroom.ts",
					"line": 101,
					"character": 27
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 268,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 269,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 270,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										269,
										270
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			},
			"defaultValue": " createSchemaInstance(\n  'Restroom',\n  {\n    signIcons: {\n      type: Array,\n      optional: true,\n      accessibility: {\n        description: t`Visible icons on the restroom’s sign`\n      }\n    },\n    'signIcons.$': {\n      type: String,\n      allowedValues: restroomSignIcons\n    },\n    hasMirror: {\n      type: Boolean,\n      optional: true,\n      accessibility: {\n        question: t`Does the restroom have a mirror?`\n      }\n    },\n    mirror: {\n      type: MirrorSchema,\n      optional: true,\n      accessibility: {}\n    },\n    turningSpaceInside: quantityDefinition(LengthSchema, true, {\n      question: t`How wide is the space inside that is usable for turning?`\n    }),\n    hasSupportRails: {\n      type: Boolean,\n      optional: true,\n      accessibility: {\n        question: t`Are there support rails on the walls?`\n      }\n    },\n    toilet: {\n      type: ToiletSchema,\n      label: t`Toilet`,\n      optional: true,\n      accessibility: {\n        question: t`Let’s take a look at the toilet.`\n      }\n    },\n    hasBathTub: {\n      type: Boolean,\n      optional: true,\n      accessibility: {\n        question: t`Is there a bath tub in this room?`\n      }\n    },\n    entrance: {\n      type: EntranceSchema,\n      label: t`Entrance`,\n      optional: true,\n      accessibility: {\n        question: t`Would you like to add information about the entrance to the restroom?`\n      }\n    },\n    hasShower: {\n      type: Boolean,\n      optional: true,\n      accessibility: {\n        question: t`Does the restroom have a shower?`\n      }\n    },\n    shower: {\n      type: ShowerSchema,\n      optional: true,\n      accessibility: {\n        question: t`Would you like to add information about the shower?`\n      }\n    },\n    heightOfSoap: quantityDefinition(LengthSchema, true, {\n      question: t`At which height from the floor is the soap?`\n    }),\n    heightOfDrier: quantityDefinition(LengthSchema, true, {\n      question: t`At which height from the floor is the drier or towel?`\n    }),\n    washBasin: {\n      type: WashBasinSchema,\n      optional: true,\n      accessibility: {\n        question: t`Would you like to add information about the wash basin?`\n      }\n    }\n  },\n  RoomSchema\n)"
		},
		{
			"id": 194,
			"name": "RoomSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Room.ts",
					"line": 15,
					"character": 23
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 195,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 196,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 197,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										196,
										197
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			},
			"defaultValue": " createSchemaInstance('Room', {\n  isAccessibleWithWheelchair: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      machineData: true\n    }\n  }\n})"
		},
		{
			"id": 246,
			"name": "ShowerSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Shower.ts",
					"line": 49,
					"character": 25
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 247,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 248,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 249,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										248,
										249
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			},
			"defaultValue": " createSchemaInstance('Shower', {\n  step: quantityDefinition(LengthSchema),\n  isLevel: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is the shower step-free and level with the space in front of it?`\n    }\n  },\n  hasSupportRails: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Does the shower have support rails?`\n    }\n  },\n  supportRails: {\n    type: Object,\n    optional: true,\n    accessibility: {\n      question: t`Let’s describe the support rails further.`\n    }\n  },\n  supportRailsHeight: quantityDefinition(LengthSchema, true, {\n    question: t`At which height are the support rails?`\n  }),\n  supportRailsAreAboveAndBelowControls: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Are the support rails above and below the controls?`\n    }\n  },\n  hasShowerSeat: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is there a shower seat?`\n    }\n  },\n  hasErgonomicHandle: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is there an ergonomic handle?`\n    }\n  },\n  showerSeatIsRemovable: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is the seat removable from the shower?`\n    }\n  },\n  showerSeatIsFolding: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is this a folding seat?`\n    }\n  }\n})"
		},
		{
			"id": 281,
			"name": "StaffSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "The StaffSchema allows easy validation, cleaning and checking of Staff objects."
			},
			"sources": [
				{
					"fileName": "Staff.ts",
					"line": 34,
					"character": 24
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  canSeeVisitorsFromInside: {\n    type: Boolean,\n    label: t`See From Inside`,\n    accessibility: {\n      question: t`Can the staff see visitors arriving?`,\n      description: t`e.g. via a greeter or reception, a window or a always-monitored camera system`\n    },\n    optional: true\n  },\n  isTrainedInSigning: {\n    type: Boolean,\n    label: t`Signing training`,\n    accessibility: {\n      question: t`Is the staff trained in local sign languages?`\n    },\n    optional: true\n  },\n  hasFreeAssistantForVisitors: {\n    type: Boolean,\n    label: t`Visitor Assistant`,\n    accessibility: {\n      question: t`Is there a free assistant for visitors?`\n    },\n    optional: true\n  },\n  spokenLanguages: {\n    type: Array,\n    defaultValue: [],\n    optional: true,\n    accessibility: {\n      question: t`Which languages do the staff speak (including sign language variants)?`\n    }\n  },\n  'spokenLanguages.$': {\n    type: String,\n    label: t`Language`,\n    allowedValues: ietfLanguageTagsAndSignLanguageCodes\n  }\n})"
		},
		{
			"id": 176,
			"name": "StairsSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Stairs.ts",
					"line": 51,
					"character": 25
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 177,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 178,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 179,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										178,
										179
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			},
			"defaultValue": " createSchemaInstance('Stairs', {\n  /// number of steps\n  count: {\n    type: Number,\n    optional: true,\n    accessibility: {\n      question: t`How many steps are there?`\n    }\n  },\n  nosing: {\n    type: Object,\n    optional: true,\n    accessibility: {}\n  },\n  'nosing.isHighContrast': {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Are the steps nosings marked for higher contrast?`\n    }\n  },\n  'nosing.isAntiSlip': {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Do the steps have anti-slip material?`\n    }\n  },\n  name: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`What is the name of these stairs?`\n    }\n  },\n  stepHeight: quantityDefinition(LengthSchema, true, {\n    question: t`How high is this step / are these steps?`\n  }),\n  hasHandRail: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is there a hand rail?`\n    }\n  },\n  hasTactileSafetyStrips: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      description: t`Do the stairs have tactile safety strips?`\n    }\n  },\n  hasBrailleNavigation: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      description: t`Do the stairs have braille navigation hints printed on the rails?`\n    }\n  },\n  alternativeMobileEquipmentIds: {\n    type: Array,\n    optional: true,\n    accessibility: {\n      machineData: true,\n      description: t`accessibility.cloud IDs of alternative escalators, elevators, hoists, or stair lifts to replace this pathway`\n    }\n  },\n  'alternativeMobileEquipmentIds.$': {\n    type: String,\n    label: t`accessibility.cloud Equipment ID`\n  }\n})"
		},
		{
			"id": 429,
			"name": "StructuredAddressSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "The StructuredAddressSchema allows easy validation, cleaning and checking of structured address objects."
			},
			"sources": [
				{
					"fileName": "Address.ts",
					"line": 83,
					"character": 36
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  text: {\n    label: t`Text`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      description: t`A displayable, formatted address as rich text (Markdown).`\n    },\n    optional: true\n  },\n  room: {\n    label: t`Room`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      description: t`Room name`,\n      question: t`What is the name of the room?`,\n      example: t`e.g. meeting room 'Rome'`\n    },\n    optional: true\n  },\n  level: {\n    label: t`Level`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      description: t`The number of the floor in british convention (ground floor is 0)`,\n      question: t`What is the number of the floor?`,\n      extendedInformationUrl: 'https://en.wikipedia.org/wiki/Storey',\n      example: t`e.g. 4`\n    },\n    optional: true\n  },\n  building: {\n    label: t`Building`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      description: t`Building name`,\n      example: t`e.g. main exposition hall`\n    },\n    optional: true\n  },\n  house: {\n    label: t`House`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      question: t`What is the house number?`\n    },\n    optional: true\n  },\n  street: {\n    label: t`Street`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      question: t`What is the name of the street?`,\n      description: t`Please avoid numbers for houses or buildings.`\n    },\n    optional: true\n  },\n  postalCode: {\n    label: t`Postal Code`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      question: t`What is the postal code?`,\n      description: t`Also called ZIP code.`\n    },\n    optional: true\n  },\n  areas: {\n    label: t`Areas`,\n    type: Array,\n    accessibility: {\n      description: t`An array of named areas below the district and above street. In some regions such areas might also contain street names, when individual street segments have names separate from the name of the whole road.`\n    },\n    optional: true\n  },\n  'areas.$': {\n    type: LocalizedStringSchema\n  },\n  district: {\n    label: t`District`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      description: t`A division of city; typically an administrative unit within a larger city or a customary name of a city\\'s neighborhood.`,\n      question: t`The place is located destrict…`\n    },\n    optional: true\n  },\n  city: {\n    label: t`City`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      question: t`In which city is this place?`\n    },\n    optional: true\n  },\n  regions: {\n    label: t`Regions`,\n    type: Array,\n    accessibility: {\n      description: t`For address conventions where more than to levels of named areas above the city level are in use, the regions attribute provides an array with all additional area names, ordered by decreasing size (starting with the highest subdivision below state)`\n    },\n    optional: true\n  },\n  'regions.$': {\n    type: LocalizedStringSchema\n  },\n  county: {\n    label: t`County`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      description: t`A division of a state; typically a secondary-level administrative division of a country or equivalent.`\n    },\n    optional: true\n  },\n  state: {\n    label: t`State`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      description: t`A division of a country; typically a first-level administrative division of a country and/or a geographical region.`\n    },\n    optional: true\n  },\n  stateCode: {\n    label: t`State Code`,\n    type: LocalizedStringSchema,\n    accessibility: {\n      description: t`A code/abbreviation for the state division of a country.`\n    },\n    optional: true\n  },\n  countryCode: {\n    label: t`Country Code`,\n    type: LocalizedStringSchema,\n    optional: true,\n    allowedValues: isoAlphaThreeCountryCodes.map(c => c.value),\n    accessibility: {\n      description: t`A three-letter country code in ISO 3166-1 alpha-3, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3`,\n      options: isoAlphaThreeCountryCodes\n    }\n  }\n})"
		},
		{
			"id": 314,
			"name": "TablesSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Tables.ts",
					"line": 27,
					"character": 25
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  height: quantityDefinition(LengthSchema, true, {\n    question: t`How high is the table?`\n  }),\n  spaceBelowHeight: quantityDefinition(LengthSchema, false, {\n    question: t`How high is the free space below the table?`\n  }),\n  spaceBelowWidth: quantityDefinition(LengthSchema, false, {\n    question: t`How wide is the free space below the table?`\n  }),\n  spaceBelowDepth: quantityDefinition(LengthSchema, false, {\n    question: t`How deep is the free space below the table?`\n  })\n})"
		},
		{
			"id": 232,
			"name": "ToiletSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Toilet.ts",
					"line": 37,
					"character": 25
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 233,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 234,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 235,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										234,
										235
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			},
			"defaultValue": " createSchemaInstance('Toilet', {\n  heightOfBase: quantityDefinition(LengthSchema, true, {\n    question: t`How high is the toilet’s base?`\n  }),\n  spaceOnUsersLeftSide: quantityDefinition(LengthSchema, true, {\n    question: t`How much space is on the left side of the toilet? (from the perspective of somebody using the toilet)`\n  }),\n  spaceOnUsersRightSide: quantityDefinition(LengthSchema, true, {\n    question: t`How much space is on the right side of the toilet? (from the perspective of somebody using the toilet)`\n  }),\n  spaceInFront: quantityDefinition(LengthSchema, true, {\n    question: t`How much space is in front of the toilet?`\n  }),\n  hasFoldingHandles: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Does the toilet have folding handles?`\n    }\n  },\n  foldingHandles: {\n    type: FoldingHandlesSchema,\n    optional: true,\n    accessibility: {\n      question: t`Let’s describe the folding handles.`\n    }\n  }\n})"
		},
		{
			"id": 125,
			"name": "VolumeQuantitySchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 143,
					"character": 33
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 126,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 127,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 128,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										127,
										128
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			},
			"defaultValue": " makeQuantitySchema(OtherUnitKind, 'decibel')"
		},
		{
			"id": 134,
			"name": "VolumeSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 146,
					"character": 25
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Object"
					},
					{
						"type": "reference",
						"name": "String"
					},
					{
						"type": "reference",
						"name": "Number"
					},
					{
						"type": "reference",
						"name": "Boolean"
					},
					{
						"type": "reference",
						"name": "RegExp"
					},
					{
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					},
					{
						"type": "reference",
						"name": "SchemaDefinition"
					},
					{
						"type": "reference",
						"name": "Date"
					},
					{
						"type": "reflection",
						"declaration": {
							"id": 135,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 136,
									"name": "definitions",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "/Users/henrikhinrichs/Work/ac-format/typings/simpl-schema.d.ts",
											"line": 8,
											"character": 13
										}
									],
									"type": {
										"type": "reference",
										"name": "Array",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 137,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 138,
															"name": "type",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"sources": [
																{
																	"fileName": "/Users/henrikhinrichs/Work/ac-format/typings/simpl-schema.d.ts",
																	"line": 9,
																	"character": 8
																}
															],
															"type": {
																"type": "reference",
																"name": "SchemaType"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																138
															]
														}
													],
													"sources": [
														{
															"fileName": "/Users/henrikhinrichs/Work/ac-format/typings/simpl-schema.d.ts",
															"line": 8,
															"character": 22
														}
													]
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										136
									]
								}
							]
						}
					}
				]
			},
			"defaultValue": " SimpleSchema.oneOf(VolumeQuantitySchema, String)"
		},
		{
			"id": 212,
			"name": "WashBasinSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "WashBasin.ts",
					"line": 34,
					"character": 28
				}
			],
			"type": {
				"type": "intersection",
				"types": [
					{
						"type": "reflection",
						"declaration": {
							"id": 213,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 214,
									"name": "__schemaType",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 155,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 215,
									"name": "__schemaVersion",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 156,
											"character": 17
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										214,
										215
									]
								}
							]
						}
					},
					{
						"type": "reference",
						"name": "SimpleSchema"
					}
				]
			},
			"defaultValue": " createSchemaInstance('WashBasin', {\n  isLocatedInsideRestroom: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is the wash basin located inside the restroom cabin?`\n    }\n  },\n  height: quantityDefinition(LengthSchema, true, {\n    question: t`At which height is the wash basin's top?`\n  }),\n  spaceBelow: {\n    type: Object,\n    optional: true,\n    accessibility: {\n      question: t`Let’s take a look at the space below the wash basin.`\n    }\n  },\n  spaceBelowHeight: quantityDefinition(LengthSchema, true, {\n    question: t`How high is the space below the wash basin?`\n  }),\n  spaceBelowDepth: quantityDefinition(LengthSchema, true, {\n    question: t`How deep is the space below the wash basin?`\n  })\n})"
		},
		{
			"id": 352,
			"name": "WheelchairParkingSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Parking.ts",
					"line": 74,
					"character": 36
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  location: {\n    type: LocalizedStringSchema,\n    optional: true,\n    accessibility: {\n      question: t`Where is the parking located?`\n    }\n  },\n  distanceToEntrance: quantityDefinition(LengthSchema, true, {\n    question: t`How far away is the parking from the main entrance?`\n  }),\n  count: {\n    type: Number,\n    optional: true,\n    accessibility: {\n      question: t`How many wheelchair accessible parking spaces are there?`\n    },\n    min: 0\n  },\n  isLocatedInside: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Are the parking spaces located inside?`\n    }\n  },\n  width: quantityDefinition(LengthSchema, true, {\n    question: t`How wide are the parking spaces?`\n  }),\n  length: quantityDefinition(LengthSchema, true, {\n    question: t`How long are the parking spaces?`\n  }),\n  maxVehicleHeight: quantityDefinition(LengthSchema, true, {\n    question: t`What is the max vehicle height of the parking spaces?`\n  }),\n  hasDedicatedSignage: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is there dedicated disabled parking signage?`\n    }\n  },\n  paymentBySpace: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is there payment by parking space?`\n    }\n  },\n  paymentByZone: {\n    type: Boolean,\n    optional: true,\n    accessibility: {\n      question: t`Is there payment by parking zone?`\n    }\n  },\n  neededParkingPermits: {\n    type: Array,\n    optional: true,\n    accessibility: {\n      question: t`Are any special parking permits required?`\n    }\n  },\n  'neededParkingPermits.$': {\n    type: LocalizedStringSchema,\n    accessibility: {\n      question: t`Which permit is needed?`\n    }\n  }\n})"
		},
		{
			"id": 285,
			"name": "WheelchairPlacesSchema",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "The WheelchairPlacesSchema allows easy validation, cleaning and checking of WheelchairPlaces objects."
			},
			"sources": [
				{
					"fileName": "WheelchairPlaces.ts",
					"line": 23,
					"character": 35
				}
			],
			"type": {
				"type": "reference",
				"name": "SimpleSchema"
			},
			"defaultValue": " new SimpleSchema({\n  count: {\n    type: SimpleSchema.Integer,\n    label: t`Number Of Places`,\n    accessibility: {\n      question: t`How many wheelchair places are there?`\n    },\n    min: 0\n  },\n  hasSpaceForAssistant: {\n    type: Boolean,\n    label: t`Assistant Space`,\n    accessibility: {\n      question: t`Is there additional space for an assistant for each seat?`\n    },\n    optional: true\n  }\n})"
		},
		{
			"id": 608,
			"name": "allowedOperators",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 113,
					"character": 22
				}
			],
			"type": {
				"type": "reference",
				"name": "ReadonlyArray",
				"typeArguments": [
					{
						"type": "reference",
						"name": "Operators",
						"id": 607
					}
				]
			},
			"defaultValue": " Object.freeze([\n  '$eq',\n  '$lt',\n  '$lte',\n  '$gt',\n  '$gte',\n  '$ne'\n] as Operators[])"
		},
		{
			"id": 271,
			"name": "ietfLanguageTags",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "All existing IETF language tags."
			},
			"sources": [
				{
					"fileName": "ietfLanguageTags.ts",
					"line": 5,
					"character": 29
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "string"
				}
			},
			"defaultValue": " [\n  'af',\n  'af-NA',\n  'af-ZA',\n  'agq',\n  'agq-CM',\n  'ak',\n  'ak-GH',\n  'am',\n  'am-ET',\n  'ar',\n  'ar-001',\n  'ar-AE',\n  'ar-BH',\n  'ar-DJ',\n  'ar-DZ',\n  'ar-EG',\n  'ar-EH',\n  'ar-ER',\n  'ar-IL',\n  'ar-IQ',\n  'ar-JO',\n  'ar-KM',\n  'ar-KW',\n  'ar-LB',\n  'ar-LY',\n  'ar-MA',\n  'ar-MR',\n  'ar-OM',\n  'ar-PS',\n  'ar-QA',\n  'ar-SA',\n  'ar-SD',\n  'ar-SO',\n  'ar-SS',\n  'ar-SY',\n  'ar-TD',\n  'ar-TN',\n  'ar-YE',\n  'as',\n  'as-IN',\n  'asa',\n  'asa-TZ',\n  'ast',\n  'ast-ES',\n  'az',\n  'az-Cyrl',\n  'az-Cyrl-AZ',\n  'az-Latn',\n  'az-Latn-AZ',\n  'bas',\n  'bas-CM',\n  'be',\n  'be-BY',\n  'bem',\n  'bem-ZM',\n  'bez',\n  'bez-TZ',\n  'bg',\n  'bg-BG',\n  'bm',\n  'bm-ML',\n  'bn',\n  'bn-BD',\n  'bn-IN',\n  'bo',\n  'bo-CN',\n  'bo-IN',\n  'br',\n  'br-FR',\n  'brx',\n  'brx-IN',\n  'bs',\n  'bs-Cyrl',\n  'bs-Cyrl-BA',\n  'bs-Latn',\n  'bs-Latn-BA',\n  'ca',\n  'ca-AD',\n  'ca-ES',\n  'ca-ES-VALENCIA',\n  'ca-FR',\n  'ca-IT',\n  'ccp',\n  'ccp-BD',\n  'ccp-IN',\n  'ce',\n  'ce-RU',\n  'cgg',\n  'cgg-UG',\n  'chr',\n  'chr-US',\n  'ckb',\n  'ckb-IQ',\n  'ckb-IR',\n  'cs',\n  'cs-CZ',\n  'cu',\n  'cu-RU',\n  'cy',\n  'cy-GB',\n  'da',\n  'da-DK',\n  'da-GL',\n  'dav',\n  'dav-KE',\n  'de',\n  'de-AT',\n  'de-BE',\n  'de-CH',\n  'de-DE',\n  'de-IT',\n  'de-LI',\n  'de-LU',\n  'dje',\n  'dje-NE',\n  'dsb',\n  'dsb-DE',\n  'dua',\n  'dua-CM',\n  'dyo',\n  'dyo-SN',\n  'dz',\n  'dz-BT',\n  'ebu',\n  'ebu-KE',\n  'ee',\n  'ee-GH',\n  'ee-TG',\n  'el',\n  'el-CY',\n  'el-GR',\n  'en',\n  'en-001',\n  'en-150',\n  'en-AG',\n  'en-AI',\n  'en-AS',\n  'en-AT',\n  'en-AU',\n  'en-BB',\n  'en-BE',\n  'en-BI',\n  'en-BM',\n  'en-BS',\n  'en-BW',\n  'en-BZ',\n  'en-CA',\n  'en-CC',\n  'en-CH',\n  'en-CK',\n  'en-CM',\n  'en-CX',\n  'en-CY',\n  'en-DE',\n  'en-DG',\n  'en-DK',\n  'en-DM',\n  'en-ER',\n  'en-FI',\n  'en-FJ',\n  'en-FK',\n  'en-FM',\n  'en-GB',\n  'en-GD',\n  'en-GG',\n  'en-GH',\n  'en-GI',\n  'en-GM',\n  'en-GU',\n  'en-GY',\n  'en-HK',\n  'en-IE',\n  'en-IL',\n  'en-IM',\n  'en-IN',\n  'en-IO',\n  'en-JE',\n  'en-JM',\n  'en-KE',\n  'en-KI',\n  'en-KN',\n  'en-KY',\n  'en-LC',\n  'en-LR',\n  'en-LS',\n  'en-MG',\n  'en-MH',\n  'en-MO',\n  'en-MP',\n  'en-MS',\n  'en-MT',\n  'en-MU',\n  'en-MW',\n  'en-MY',\n  'en-NA',\n  'en-NF',\n  'en-NG',\n  'en-NL',\n  'en-NR',\n  'en-NU',\n  'en-NZ',\n  'en-PG',\n  'en-PH',\n  'en-PK',\n  'en-PN',\n  'en-PR',\n  'en-PW',\n  'en-RW',\n  'en-SB',\n  'en-SC',\n  'en-SD',\n  'en-SE',\n  'en-SG',\n  'en-SH',\n  'en-SI',\n  'en-SL',\n  'en-SS',\n  'en-SX',\n  'en-SZ',\n  'en-TC',\n  'en-TK',\n  'en-TO',\n  'en-TT',\n  'en-TV',\n  'en-TZ',\n  'en-UG',\n  'en-UM',\n  'en-US',\n  'en-US-POSIX',\n  'en-VC',\n  'en-VG',\n  'en-VI',\n  'en-VU',\n  'en-WS',\n  'en-ZA',\n  'en-ZM',\n  'en-ZW',\n  'eo',\n  'eo-001',\n  'es',\n  'es-419',\n  'es-AR',\n  'es-BO',\n  'es-BR',\n  'es-BZ',\n  'es-CL',\n  'es-CO',\n  'es-CR',\n  'es-CU',\n  'es-DO',\n  'es-EA',\n  'es-EC',\n  'es-ES',\n  'es-GQ',\n  'es-GT',\n  'es-HN',\n  'es-IC',\n  'es-MX',\n  'es-NI',\n  'es-PA',\n  'es-PE',\n  'es-PH',\n  'es-PR',\n  'es-PY',\n  'es-SV',\n  'es-US',\n  'es-UY',\n  'es-VE',\n  'et',\n  'et-EE',\n  'eu',\n  'eu-ES',\n  'ewo',\n  'ewo-CM',\n  'fa',\n  'fa-AF',\n  'fa-IR',\n  'ff',\n  'ff-Latn',\n  'ff-Latn-BF',\n  'ff-Latn-CM',\n  'ff-Latn-GH',\n  'ff-Latn-GM',\n  'ff-Latn-GN',\n  'ff-Latn-GW',\n  'ff-Latn-LR',\n  'ff-Latn-MR',\n  'ff-Latn-NE',\n  'ff-Latn-NG',\n  'ff-Latn-SL',\n  'ff-Latn-SN',\n  'fi',\n  'fi-FI',\n  'fil',\n  'fil-PH',\n  'fo',\n  'fo-DK',\n  'fo-FO',\n  'fr',\n  'fr-BE',\n  'fr-BF',\n  'fr-BI',\n  'fr-BJ',\n  'fr-BL',\n  'fr-CA',\n  'fr-CD',\n  'fr-CF',\n  'fr-CG',\n  'fr-CH',\n  'fr-CI',\n  'fr-CM',\n  'fr-DJ',\n  'fr-DZ',\n  'fr-FR',\n  'fr-GA',\n  'fr-GF',\n  'fr-GN',\n  'fr-GP',\n  'fr-GQ',\n  'fr-HT',\n  'fr-KM',\n  'fr-LU',\n  'fr-MA',\n  'fr-MC',\n  'fr-MF',\n  'fr-MG',\n  'fr-ML',\n  'fr-MQ',\n  'fr-MR',\n  'fr-MU',\n  'fr-NC',\n  'fr-NE',\n  'fr-PF',\n  'fr-PM',\n  'fr-RE',\n  'fr-RW',\n  'fr-SC',\n  'fr-SN',\n  'fr-SY',\n  'fr-TD',\n  'fr-TG',\n  'fr-TN',\n  'fr-VU',\n  'fr-WF',\n  'fr-YT',\n  'fur',\n  'fur-IT',\n  'fy',\n  'fy-NL',\n  'ga',\n  'ga-IE',\n  'gd',\n  'gd-GB',\n  'gl',\n  'gl-ES',\n  'gsw',\n  'gsw-CH',\n  'gsw-FR',\n  'gsw-LI',\n  'gu',\n  'gu-IN',\n  'guz',\n  'guz-KE',\n  'gv',\n  'gv-IM',\n  'ha',\n  'ha-GH',\n  'ha-NE',\n  'ha-NG',\n  'haw',\n  'haw-US',\n  'he',\n  'he-IL',\n  'hi',\n  'hi-IN',\n  'hr',\n  'hr-BA',\n  'hr-HR',\n  'hsb',\n  'hsb-DE',\n  'hu',\n  'hu-HU',\n  'hy',\n  'hy-AM',\n  'ia',\n  'ia-001',\n  'id',\n  'id-ID',\n  'ig',\n  'ig-NG',\n  'ii',\n  'ii-CN',\n  'is',\n  'is-IS',\n  'it',\n  'it-CH',\n  'it-IT',\n  'it-SM',\n  'it-VA',\n  'ja',\n  'ja-JP',\n  'jgo',\n  'jgo-CM',\n  'jmc',\n  'jmc-TZ',\n  'jv',\n  'jv-ID',\n  'ka',\n  'ka-GE',\n  'kab',\n  'kab-DZ',\n  'kam',\n  'kam-KE',\n  'kde',\n  'kde-TZ',\n  'kea',\n  'kea-CV',\n  'khq',\n  'khq-ML',\n  'ki',\n  'ki-KE',\n  'kk',\n  'kk-KZ',\n  'kkj',\n  'kkj-CM',\n  'kl',\n  'kl-GL',\n  'kln',\n  'kln-KE',\n  'km',\n  'km-KH',\n  'kn',\n  'kn-IN',\n  'ko',\n  'ko-KP',\n  'ko-KR',\n  'kok',\n  'kok-IN',\n  'ks',\n  'ks-IN',\n  'ksb',\n  'ksb-TZ',\n  'ksf',\n  'ksf-CM',\n  'ksh',\n  'ksh-DE',\n  'ku',\n  'ku-TR',\n  'kw',\n  'kw-GB',\n  'ky',\n  'ky-KG',\n  'lag',\n  'lag-TZ',\n  'lb',\n  'lb-LU',\n  'lg',\n  'lg-UG',\n  'lkt',\n  'lkt-US',\n  'ln',\n  'ln-AO',\n  'ln-CD',\n  'ln-CF',\n  'ln-CG',\n  'lo',\n  'lo-LA',\n  'lrc',\n  'lrc-IQ',\n  'lrc-IR',\n  'lt',\n  'lt-LT',\n  'lu',\n  'lu-CD',\n  'luo',\n  'luo-KE',\n  'luy',\n  'luy-KE',\n  'lv',\n  'lv-LV',\n  'mas',\n  'mas-KE',\n  'mas-TZ',\n  'mer',\n  'mer-KE',\n  'mfe',\n  'mfe-MU',\n  'mg',\n  'mg-MG',\n  'mgh',\n  'mgh-MZ',\n  'mgo',\n  'mgo-CM',\n  'mi',\n  'mi-NZ',\n  'mk',\n  'mk-MK',\n  'ml',\n  'ml-IN',\n  'mn',\n  'mn-MN',\n  'mr',\n  'mr-IN',\n  'ms',\n  'ms-BN',\n  'ms-MY',\n  'ms-SG',\n  'mt',\n  'mt-MT',\n  'mua',\n  'mua-CM',\n  'my',\n  'my-MM',\n  'mzn',\n  'mzn-IR',\n  'naq',\n  'naq-NA',\n  'nb',\n  'nb-NO',\n  'nb-SJ',\n  'nd',\n  'nd-ZW',\n  'nds',\n  'nds-DE',\n  'nds-NL',\n  'ne',\n  'ne-IN',\n  'ne-NP',\n  'nl',\n  'nl-AW',\n  'nl-BE',\n  'nl-BQ',\n  'nl-CW',\n  'nl-NL',\n  'nl-SR',\n  'nl-SX',\n  'nmg',\n  'nmg-CM',\n  'nn',\n  'nn-NO',\n  'nnh',\n  'nnh-CM',\n  'nus',\n  'nus-SS',\n  'nyn',\n  'nyn-UG',\n  'om',\n  'om-ET',\n  'om-KE',\n  'or',\n  'or-IN',\n  'os',\n  'os-GE',\n  'os-RU',\n  'pa',\n  'pa-Arab',\n  'pa-Arab-PK',\n  'pa-Guru',\n  'pa-Guru-IN',\n  'pl',\n  'pl-PL',\n  'prg',\n  'prg-001',\n  'ps',\n  'ps-AF',\n  'pt',\n  'pt-AO',\n  'pt-BR',\n  'pt-CH',\n  'pt-CV',\n  'pt-GQ',\n  'pt-GW',\n  'pt-LU',\n  'pt-MO',\n  'pt-MZ',\n  'pt-PT',\n  'pt-ST',\n  'pt-TL',\n  'qu',\n  'qu-BO',\n  'qu-EC',\n  'qu-PE',\n  'rm',\n  'rm-CH',\n  'rn',\n  'rn-BI',\n  'ro',\n  'ro-MD',\n  'ro-RO',\n  'rof',\n  'rof-TZ',\n  'root',\n  'ru',\n  'ru-BY',\n  'ru-KG',\n  'ru-KZ',\n  'ru-MD',\n  'ru-RU',\n  'ru-UA',\n  'rw',\n  'rw-RW',\n  'rwk',\n  'rwk-TZ',\n  'sah',\n  'sah-RU',\n  'saq',\n  'saq-KE',\n  'sbp',\n  'sbp-TZ',\n  'sd',\n  'sd-PK',\n  'se',\n  'se-FI',\n  'se-NO',\n  'se-SE',\n  'seh',\n  'seh-MZ',\n  'ses',\n  'ses-ML',\n  'sg',\n  'sg-CF',\n  'shi',\n  'shi-Latn',\n  'shi-Latn-MA',\n  'shi-Tfng',\n  'shi-Tfng-MA',\n  'si',\n  'si-LK',\n  'sk',\n  'sk-SK',\n  'sl',\n  'sl-SI',\n  'smn',\n  'smn-FI',\n  'sn',\n  'sn-ZW',\n  'so',\n  'so-DJ',\n  'so-ET',\n  'so-KE',\n  'so-SO',\n  'sq',\n  'sq-AL',\n  'sq-MK',\n  'sq-XK',\n  'sr',\n  'sr-Cyrl',\n  'sr-Cyrl-BA',\n  'sr-Cyrl-ME',\n  'sr-Cyrl-RS',\n  'sr-Cyrl-XK',\n  'sr-Latn',\n  'sr-Latn-BA',\n  'sr-Latn-ME',\n  'sr-Latn-RS',\n  'sr-Latn-XK',\n  'sv',\n  'sv-AX',\n  'sv-FI',\n  'sv-SE',\n  'sw',\n  'sw-CD',\n  'sw-KE',\n  'sw-TZ',\n  'sw-UG',\n  'ta',\n  'ta-IN',\n  'ta-LK',\n  'ta-MY',\n  'ta-SG',\n  'te',\n  'te-IN',\n  'teo',\n  'teo-KE',\n  'teo-UG',\n  'tg',\n  'tg-TJ',\n  'th',\n  'th-TH',\n  'ti',\n  'ti-ER',\n  'ti-ET',\n  'tk',\n  'tk-TM',\n  'to',\n  'to-TO',\n  'tr',\n  'tr-CY',\n  'tr-TR',\n  'tt',\n  'tt-RU',\n  'twq',\n  'twq-NE',\n  'tzm',\n  'tzm-MA',\n  'ug',\n  'ug-CN',\n  'uk',\n  'uk-UA',\n  'ur',\n  'ur-IN',\n  'ur-PK',\n  'uz',\n  'uz-Arab',\n  'uz-Arab-AF',\n  'uz-Cyrl',\n  'uz-Cyrl-UZ',\n  'uz-Latn',\n  'uz-Latn-UZ',\n  'vai',\n  'vai-Latn',\n  'vai-Latn-LR',\n  'vai-Vaii',\n  'vai-Vaii-LR',\n  'vi',\n  'vi-VN',\n  'vo',\n  'vo-001',\n  'vun',\n  'vun-TZ',\n  'wae',\n  'wae-CH',\n  'wo',\n  'wo-SN',\n  'xh',\n  'xh-ZA',\n  'xog',\n  'xog-UG',\n  'yav',\n  'yav-CM',\n  'yi',\n  'yi-001',\n  'yo',\n  'yo-BJ',\n  'yo-NG',\n  'yue',\n  'yue-Hans',\n  'yue-Hans-CN',\n  'yue-Hant',\n  'yue-Hant-HK',\n  'zgh',\n  'zgh-MA',\n  'zh',\n  'zh-Hans',\n  'zh-Hans-CN',\n  'zh-Hans-HK',\n  'zh-Hans-MO',\n  'zh-Hans-SG',\n  'zh-Hant',\n  'zh-Hant-HK',\n  'zh-Hant-MO',\n  'zh-Hant-TW',\n  'zu',\n  'zu-ZA'\n]"
		},
		{
			"id": 275,
			"name": "ietfLanguageTagsAndSignLanguageCodes",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "We assume that IETF language tags will be extended with sign language codes (as proposed by\nhttp://www.evertype.com/standards/iso639/sign-language.html) eventually, so our language tags\nsupport them already.",
				"text": "For sign language translations of strings, you can use media URLs pointing to videos or\ndescription pictures.\n"
			},
			"sources": [
				{
					"fileName": "ietfLanguageTags.ts",
					"line": 1798,
					"character": 49
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "string"
				}
			},
			"defaultValue": " ietfLanguageTags.concat(signLanguageCodes)"
		},
		{
			"id": 591,
			"name": "indent",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isLet": true
			},
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 59,
					"character": 10
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "number"
			},
			"defaultValue": "0"
		},
		{
			"id": 409,
			"name": "isoAlphaThreeCountryCodes",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "All existing ISO 3166-1 alpha-3 country codes"
			},
			"sources": [
				{
					"fileName": "CountryCodes.ts",
					"line": 6,
					"character": 38
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "reflection",
					"declaration": {
						"id": 410,
						"name": "__type",
						"kind": 65536,
						"kindString": "Type literal",
						"flags": {},
						"children": [
							{
								"id": 412,
								"name": "label",
								"kind": 32,
								"kindString": "Variable",
								"flags": {},
								"sources": [
									{
										"fileName": "CountryCodes.ts",
										"line": 7,
										"character": 23
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"defaultValue": " t`Aruba`"
							},
							{
								"id": 411,
								"name": "value",
								"kind": 32,
								"kindString": "Variable",
								"flags": {},
								"sources": [
									{
										"fileName": "CountryCodes.ts",
										"line": 7,
										"character": 9
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"defaultValue": "\"ABW\""
							}
						],
						"groups": [
							{
								"title": "Variables",
								"kind": 32,
								"children": [
									412,
									411
								]
							}
						]
					}
				}
			},
			"defaultValue": " [\n  { value: 'ABW', label: t`Aruba` },\n  { value: 'AFG', label: t`Afghanistan` },\n  { value: 'AGO', label: t`Angola` },\n  { value: 'AIA', label: t`Anguilla` },\n  { value: 'ALA', label: t`Åland Islands` },\n  { value: 'ALB', label: t`Albania` },\n  { value: 'AND', label: t`Andorra` },\n  { value: 'ARE', label: t`United Arab Emirates` },\n  { value: 'ARG', label: t`Argentina` },\n  { value: 'ARM', label: t`Armenia` },\n  { value: 'ASM', label: t`American Samoa` },\n  { value: 'ATA', label: t`Antarctica` },\n  { value: 'ATF', label: t`French Southern Territories` },\n  { value: 'ATG', label: t`Antigua and Barbuda` },\n  { value: 'AUS', label: t`Australia` },\n  { value: 'AUT', label: t`Austria` },\n  { value: 'AZE', label: t`Azerbaijan` },\n  { value: 'BDI', label: t`Burundi` },\n  { value: 'BEL', label: t`Belgium` },\n  { value: 'BEN', label: t`Benin` },\n  { value: 'BES', label: t`Bonaire, Sint Eustatius and Saba` },\n  { value: 'BFA', label: t`Burkina Faso` },\n  { value: 'BGD', label: t`Bangladesh` },\n  { value: 'BGR', label: t`Bulgaria` },\n  { value: 'BHR', label: t`Bahrain` },\n  { value: 'BHS', label: t`Bahamas` },\n  { value: 'BIH', label: t`Bosnia and Herzegovina` },\n  { value: 'BLM', label: t`Saint Barthélemy` },\n  { value: 'BLR', label: t`Belarus` },\n  { value: 'BLZ', label: t`Belize` },\n  { value: 'BMU', label: t`Bermuda` },\n  { value: 'BOL', label: t`Bolivia, Plurinational State of` },\n  { value: 'BRA', label: t`Brazil` },\n  { value: 'BRB', label: t`Barbados` },\n  { value: 'BRN', label: t`Brunei Darussalam` },\n  { value: 'BTN', label: t`Bhutan` },\n  { value: 'BVT', label: t`Bouvet Island` },\n  { value: 'BWA', label: t`Botswana` },\n  { value: 'CAF', label: t`Central African Republic` },\n  { value: 'CAN', label: t`Canada` },\n  { value: 'CCK', label: t`Cocos (Keeling) Islands` },\n  { value: 'CHE', label: t`Switzerland` },\n  { value: 'CHL', label: t`Chile` },\n  { value: 'CHN', label: t`China` },\n  { value: 'CIV', label: t`Côte d'Ivoire` },\n  { value: 'CMR', label: t`Cameroon` },\n  { value: 'COD', label: t`Congo, the Democratic Republic of the` },\n  { value: 'COG', label: t`Congo` },\n  { value: 'COK', label: t`Cook Islands` },\n  { value: 'COL', label: t`Colombia` },\n  { value: 'COM', label: t`Comoros` },\n  { value: 'CPV', label: t`Cabo Verde` },\n  { value: 'CRI', label: t`Costa Rica` },\n  { value: 'CUB', label: t`Cuba` },\n  { value: 'CUW', label: t`Curaçao` },\n  { value: 'CXR', label: t`Christmas Island` },\n  { value: 'CYM', label: t`Cayman Islands` },\n  { value: 'CYP', label: t`Cyprus` },\n  { value: 'CZE', label: t`Czechia` },\n  { value: 'DEU', label: t`Germany` },\n  { value: 'DJI', label: t`Djibouti` },\n  { value: 'DMA', label: t`Dominica` },\n  { value: 'DNK', label: t`Denmark` },\n  { value: 'DOM', label: t`Dominican Republic` },\n  { value: 'DZA', label: t`Algeria` },\n  { value: 'ECU', label: t`Ecuador` },\n  { value: 'EGY', label: t`Egypt` },\n  { value: 'ERI', label: t`Eritrea` },\n  { value: 'ESH', label: t`Western Sahara` },\n  { value: 'ESP', label: t`Spain` },\n  { value: 'EST', label: t`Estonia` },\n  { value: 'ETH', label: t`Ethiopia` },\n  { value: 'FIN', label: t`Finland` },\n  { value: 'FJI', label: t`Fiji` },\n  { value: 'FLK', label: t`Falkland Islands (Malvinas)` },\n  { value: 'FRA', label: t`France` },\n  { value: 'FRO', label: t`Faroe Islands` },\n  { value: 'FSM', label: t`Micronesia, Federated States of` },\n  { value: 'GAB', label: t`Gabon` },\n  { value: 'GBR', label: t`United Kingdom` },\n  { value: 'GEO', label: t`Georgia` },\n  { value: 'GGY', label: t`Guernsey` },\n  { value: 'GHA', label: t`Ghana` },\n  { value: 'GIB', label: t`Gibraltar` },\n  { value: 'GIN', label: t`Guinea` },\n  { value: 'GLP', label: t`Guadeloupe` },\n  { value: 'GMB', label: t`Gambia` },\n  { value: 'GNB', label: t`Guinea-Bissau` },\n  { value: 'GNQ', label: t`Equatorial Guinea` },\n  { value: 'GRC', label: t`Greece` },\n  { value: 'GRD', label: t`Grenada` },\n  { value: 'GRL', label: t`Greenland` },\n  { value: 'GTM', label: t`Guatemala` },\n  { value: 'GUF', label: t`French Guiana` },\n  { value: 'GUM', label: t`Guam` },\n  { value: 'GUY', label: t`Guyana` },\n  { value: 'HKG', label: t`Hong Kong` },\n  { value: 'HMD', label: t`Heard Island and McDonald Islands` },\n  { value: 'HND', label: t`Honduras` },\n  { value: 'HRV', label: t`Croatia` },\n  { value: 'HTI', label: t`Haiti` },\n  { value: 'HUN', label: t`Hungary` },\n  { value: 'IDN', label: t`Indonesia` },\n  { value: 'IMN', label: t`Isle of Man` },\n  { value: 'IND', label: t`India` },\n  { value: 'IOT', label: t`British Indian Ocean Territory` },\n  { value: 'IRL', label: t`Ireland` },\n  { value: 'IRN', label: t`Iran, Islamic Republic of` },\n  { value: 'IRQ', label: t`Iraq` },\n  { value: 'ISL', label: t`Iceland` },\n  { value: 'ISR', label: t`Israel` },\n  { value: 'ITA', label: t`Italy` },\n  { value: 'JAM', label: t`Jamaica` },\n  { value: 'JEY', label: t`Jersey` },\n  { value: 'JOR', label: t`Jordan` },\n  { value: 'JPN', label: t`Japan` },\n  { value: 'KAZ', label: t`Kazakhstan` },\n  { value: 'KEN', label: t`Kenya` },\n  { value: 'KGZ', label: t`Kyrgyzstan` },\n  { value: 'KHM', label: t`Cambodia` },\n  { value: 'KIR', label: t`Kiribati` },\n  { value: 'KNA', label: t`Saint Kitts and Nevis` },\n  { value: 'KOR', label: t`Korea, Republic of` },\n  { value: 'KWT', label: t`Kuwait` },\n  { value: 'LAO', label: t`Lao People's Democratic Republic` },\n  { value: 'LBN', label: t`Lebanon` },\n  { value: 'LBR', label: t`Liberia` },\n  { value: 'LBY', label: t`Libya` },\n  { value: 'LCA', label: t`Saint Lucia` },\n  { value: 'LIE', label: t`Liechtenstein` },\n  { value: 'LKA', label: t`Sri Lanka` },\n  { value: 'LSO', label: t`Lesotho` },\n  { value: 'LTU', label: t`Lithuania` },\n  { value: 'LUX', label: t`Luxembourg` },\n  { value: 'LVA', label: t`Latvia` },\n  { value: 'MAC', label: t`Macao` },\n  { value: 'MAF', label: t`Saint Martin (French part)` },\n  { value: 'MAR', label: t`Morocco` },\n  { value: 'MCO', label: t`Monaco` },\n  { value: 'MDA', label: t`Moldova, Republic of` },\n  { value: 'MDG', label: t`Madagascar` },\n  { value: 'MDV', label: t`Maldives` },\n  { value: 'MEX', label: t`Mexico` },\n  { value: 'MHL', label: t`Marshall Islands` },\n  { value: 'MKD', label: t`Macedonia, the former Yugoslav Republic of` },\n  { value: 'MLI', label: t`Mali` },\n  { value: 'MLT', label: t`Malta` },\n  { value: 'MMR', label: t`Myanmar` },\n  { value: 'MNE', label: t`Montenegro` },\n  { value: 'MNG', label: t`Mongolia` },\n  { value: 'MNP', label: t`Northern Mariana Islands` },\n  { value: 'MOZ', label: t`Mozambique` },\n  { value: 'MRT', label: t`Mauritania` },\n  { value: 'MSR', label: t`Montserrat` },\n  { value: 'MTQ', label: t`Martinique` },\n  { value: 'MUS', label: t`Mauritius` },\n  { value: 'MWI', label: t`Malawi` },\n  { value: 'MYS', label: t`Malaysia` },\n  { value: 'MYT', label: t`Mayotte` },\n  { value: 'NAM', label: t`Namibia` },\n  { value: 'NCL', label: t`New Caledonia` },\n  { value: 'NER', label: t`Niger` },\n  { value: 'NFK', label: t`Norfolk Island` },\n  { value: 'NGA', label: t`Nigeria` },\n  { value: 'NIC', label: t`Nicaragua` },\n  { value: 'NIU', label: t`Niue` },\n  { value: 'NLD', label: t`Netherlands` },\n  { value: 'NOR', label: t`Norway` },\n  { value: 'NPL', label: t`Nepal` },\n  { value: 'NRU', label: t`Nauru` },\n  { value: 'NZL', label: t`New Zealand` },\n  { value: 'OMN', label: t`Oman` },\n  { value: 'PAK', label: t`Pakistan` },\n  { value: 'PAN', label: t`Panama` },\n  { value: 'PCN', label: t`Pitcairn` },\n  { value: 'PER', label: t`Peru` },\n  { value: 'PHL', label: t`Philippines` },\n  { value: 'PLW', label: t`Palau` },\n  { value: 'PNG', label: t`Papua New Guinea` },\n  { value: 'POL', label: t`Poland` },\n  { value: 'PRI', label: t`Puerto Rico` },\n  { value: 'PRK', label: t`Korea, Democratic People's Republic of` },\n  { value: 'PRT', label: t`Portugal` },\n  { value: 'PRY', label: t`Paraguay` },\n  { value: 'PSE', label: t`Palestine, State of` },\n  { value: 'PYF', label: t`French Polynesia` },\n  { value: 'QAT', label: t`Qatar` },\n  { value: 'REU', label: t`Réunion` },\n  { value: 'ROU', label: t`Romania` },\n  { value: 'RUS', label: t`Russian Federation` },\n  { value: 'RWA', label: t`Rwanda` },\n  { value: 'SAU', label: t`Saudi Arabia` },\n  { value: 'SDN', label: t`Sudan` },\n  { value: 'SEN', label: t`Senegal` },\n  { value: 'SGP', label: t`Singapore` },\n  { value: 'SGS', label: t`South Georgia and the South Sandwich Islands` },\n  { value: 'SHN', label: t`Saint Helena, Ascension and Tristan da Cunha` },\n  { value: 'SJM', label: t`Svalbard and Jan Mayen` },\n  { value: 'SLB', label: t`Solomon Islands` },\n  { value: 'SLE', label: t`Sierra Leone` },\n  { value: 'SLV', label: t`El Salvador` },\n  { value: 'SMR', label: t`San Marino` },\n  { value: 'SOM', label: t`Somalia` },\n  { value: 'SPM', label: t`Saint Pierre and Miquelon` },\n  { value: 'SRB', label: t`Serbia` },\n  { value: 'SSD', label: t`South Sudan` },\n  { value: 'STP', label: t`Sao Tome and Principe` },\n  { value: 'SUR', label: t`Suriname` },\n  { value: 'SVK', label: t`Slovakia` },\n  { value: 'SVN', label: t`Slovenia` },\n  { value: 'SWE', label: t`Sweden` },\n  { value: 'SWZ', label: t`Swaziland` },\n  { value: 'SXM', label: t`Sint Maarten (Dutch part)` },\n  { value: 'SYC', label: t`Seychelles` },\n  { value: 'SYR', label: t`Syrian Arab Republic` },\n  { value: 'TCA', label: t`Turks and Caicos Islands` },\n  { value: 'TCD', label: t`Chad` },\n  { value: 'TGO', label: t`Togo` },\n  { value: 'THA', label: t`Thailand` },\n  { value: 'TJK', label: t`Tajikistan` },\n  { value: 'TKL', label: t`Tokelau` },\n  { value: 'TKM', label: t`Turkmenistan` },\n  { value: 'TLS', label: t`Timor-Leste` },\n  { value: 'TON', label: t`Tonga` },\n  { value: 'TTO', label: t`Trinidad and Tobago` },\n  { value: 'TUN', label: t`Tunisia` },\n  { value: 'TUR', label: t`Turkey` },\n  { value: 'TUV', label: t`Tuvalu` },\n  { value: 'TWN', label: t`Taiwan, Province of China` },\n  { value: 'TZA', label: t`Tanzania, United Republic of` },\n  { value: 'UGA', label: t`Uganda` },\n  { value: 'UKR', label: t`Ukraine` },\n  { value: 'UMI', label: t`United States Minor Outlying Islands` },\n  { value: 'URY', label: t`Uruguay` },\n  { value: 'USA', label: t`United States of America` },\n  { value: 'UZB', label: t`Uzbekistan` },\n  { value: 'VAT', label: t`Holy See` },\n  { value: 'VCT', label: t`Saint Vincent and the Grenadines` },\n  { value: 'VEN', label: t`Venezuela, Bolivarian Republic of` },\n  { value: 'VGB', label: t`Virgin Islands, British` },\n  { value: 'VIR', label: t`Virgin Islands, U.S.` },\n  { value: 'VNM', label: t`VietNam` },\n  { value: 'VUT', label: t`Vanuatu` },\n  { value: 'WLF', label: t`Wallis and Futuna` },\n  { value: 'WSM', label: t`Samoa` },\n  { value: 'YEM', label: t`Yemen` },\n  { value: 'ZAF', label: t`South Africa` },\n  { value: 'ZMB', label: t`Zambia` },\n  { value: 'ZWE', label: t`Zimbabwe` }\n]"
		},
		{
			"id": 265,
			"name": "restroomSignIcons",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "Restroom.ts",
					"line": 14,
					"character": 23
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "string"
				}
			},
			"defaultValue": " [\n  'allGender',\n  'female',\n  'male',\n  'personInWheelchair',\n  'changingTable',\n  'baby',\n  'family',\n  'urinal',\n  'washBasin',\n  'toiletBowl'\n]"
		},
		{
			"id": 272,
			"name": "signLanguageCodes",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "We support IETF language tags for sign language (https://tools.ietf.org/html/rfc5646).",
				"text": "For sign language translations of strings, you can use media URLs pointing to video, video\nwebsites or description pictures. If there are several alternatives, it's best to point to a\nvideo.\n"
			},
			"sources": [
				{
					"fileName": "ietfLanguageTags.ts",
					"line": 770,
					"character": 30
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "intrinsic",
					"name": "string"
				}
			},
			"defaultValue": " [\n  'ase',\n  'sgn-ase',\n  'sgn-ase-US',\n  'sgn-GH-EP',\n  'sgn-DZ',\n  'sgn-US',\n  'sgn-AR',\n  'sgn-AM',\n  'sgn-AU-NT',\n  'sgn-AU',\n  'sgn-AT',\n  'sgn-ID-BA',\n  'sgn-BE-VLG',\n  'sgn-BE-WAL',\n  'sgn-BO',\n  'sgn-BR',\n  'sgn-GB',\n  'sgn-BG',\n  'sgn-ES-CT',\n  'sgn-TD',\n  'sgn-CL',\n  'sgn-CN',\n  'sgn-CO',\n  'sgn-CR',\n  'sgn-CZ',\n  'sgn-DK',\n  'sgn-NL',\n  'sgn-EC',\n  'sgn-SV',\n  'sgn-CA-NU',\n  'sgn-ET',\n  'sgn-FI',\n  'sgn-CA-QC',\n  'sgn-FR',\n  'sgn-DE',\n  'sgn-GH',\n  'sgn-GR',\n  'sgn-GT',\n  'sgn-US-HI',\n  'sgn-HK',\n  'sgn-IS',\n  'sgn-ID',\n  'sgn-IN',\n  'sgn-IE',\n  'sgn-IL',\n  'sgn-IT',\n  'sgn-JM',\n  'sgn-JP',\n  'sgn-JO',\n  'sgn-KE',\n  'sgn-KR',\n  'sgn-MY-B',\n  'sgn-LV',\n  'sgn-LY',\n  'sgn-LT',\n  'sgn-FR-69',\n  'sgn-MY',\n  'sgn-MT',\n  'sgn-US-MA',\n  'sgn-MX-YUC',\n  'sgn-MX',\n  'sgn-VA',\n  'sgn-MN',\n  'sgn-MA',\n  'sgn-NA',\n  'sgn-NP',\n  'sgn-NZ',\n  'sgn-NI',\n  'sgn-NG',\n  'sgn-NO',\n  'sgn-CA-NS',\n  'sgn-GB-KEN',\n  'sgn-MY-P',\n  'sgn-IR',\n  'sgn-PE',\n  'sgn-PH',\n  'sgn-US-SD',\n  'sgn-PL',\n  'sgn-PT',\n  'sgn-CO-SAP',\n  'sgn-PR',\n  'sgn-SB',\n  'sgn-RO',\n  'sgn-RU',\n  'sgn-SA',\n  'sgn-SE-crp',\n  'sgn-SG',\n  'sgn-SK',\n  'sgn-ZA',\n  'sgn-ES',\n  'sgn-LK',\n  'sgn-SE',\n  'sgn-CH-GE',\n  'sgn-CH-ZH',\n  'sgn-CH-TI',\n  'sgn-TW',\n  'sgn-TZ',\n  'sgn-TH',\n  'sgn-TN',\n  'sgn-TR',\n  'sgn-UG',\n  'sgn-UA',\n  'sgn-BR-MA',\n  'sgn-UY',\n  'sgn-VE',\n  'sgn-IL-yid',\n  'sgn-YU',\n  'sgn-ZM',\n  'sgn-ZW',\n  'sgn-afr-ZA',\n  'sgn-chi-TW',\n  'sgn-dan-DK',\n  'sgn-dut-BE',\n  'sgn-dut-NL',\n  'sgn-eng-GB',\n  'sgn-eng-IE',\n  'sgn-eng-US',\n  'sgn-fin-FI',\n  'sgn-fre-BE',\n  'sgn-fre-CA',\n  'sgn-fre-FR',\n  'sgn-jpn-JP',\n  'sgn-nor-NO',\n  'sgn-por-PT',\n  'sgn-swe-SE'\n]"
		},
		{
			"id": 370,
			"name": "smokingPolicies",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "SmokingPolicy.ts",
					"line": 14,
					"character": 28
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "reflection",
					"declaration": {
						"id": 371,
						"name": "__type",
						"kind": 65536,
						"kindString": "Type literal",
						"flags": {},
						"children": [
							{
								"id": 372,
								"name": "label",
								"kind": 32,
								"kindString": "Variable",
								"flags": {},
								"sources": [
									{
										"fileName": "SmokingPolicy.ts",
										"line": 15,
										"character": 9
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"defaultValue": " t`dedicated to smoking`"
							},
							{
								"id": 373,
								"name": "value",
								"kind": 32,
								"kindString": "Variable",
								"flags": {},
								"sources": [
									{
										"fileName": "SmokingPolicy.ts",
										"line": 15,
										"character": 41
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"defaultValue": "\"dedicatedToSmoking\""
							}
						],
						"groups": [
							{
								"title": "Variables",
								"kind": 32,
								"children": [
									372,
									373
								]
							}
						]
					}
				}
			},
			"defaultValue": " [\n  { label: t`dedicated to smoking`, value: 'dedicatedToSmoking' },\n  { label: t`allowed everywhere`, value: 'allowedEverywhere' },\n  { label: t`only allowed in separate (but not isolated) area`, value: 'inSeparateArea' },\n  { label: t`only allowed in isolated area`, value: 'inIsolatedArea' },\n  { label: t`prohibited`, value: 'prohibited' },\n  { label: t`only outside`, value: 'onlyOutside' }\n]"
		},
		{
			"id": 609,
			"name": "compareByOperator",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 610,
					"name": "compareByOperator",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 611,
							"name": "first",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Comparable",
								"id": 541
							}
						},
						{
							"id": 612,
							"name": "second",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Comparable",
								"id": 541
							}
						},
						{
							"id": 613,
							"name": "operator",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Operators",
								"id": 607
							},
							"defaultValue": "\"$eq\""
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 123,
					"character": 26
				}
			]
		},
		{
			"id": 73,
			"name": "createSchemaInstance",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 74,
					"name": "createSchemaInstance",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Internal helper for creating schemata with attached schemaType"
					},
					"parameters": [
						{
							"id": 75,
							"name": "type",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 76,
							"name": "definition",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 77,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 78,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 79,
													"name": "key",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "SchemaDefinition"
													},
													{
														"type": "reference",
														"name": "SchemaType"
													}
												]
											}
										}
									],
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 164,
											"character": 13
										}
									]
								}
							}
						},
						{
							"id": 80,
							"name": "baseSchema",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "SimpleSchema"
									},
									{
										"type": "intrinsic",
										"name": "null"
									}
								]
							},
							"defaultValue": " null"
						},
						{
							"id": 81,
							"name": "schemaOptions",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 82,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 85,
											"name": "check",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "SimpleSchemaExtensions.ts",
													"line": 169,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 83,
											"name": "humanizeAutoLabels",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "SimpleSchemaExtensions.ts",
													"line": 167,
													"character": 22
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "false"
													},
													{
														"type": "intrinsic",
														"name": "true"
													}
												]
											}
										},
										{
											"id": 84,
											"name": "tracker",
											"kind": 32,
											"kindString": "Variable",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "SimpleSchemaExtensions.ts",
													"line": 168,
													"character": 11
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												85,
												83,
												84
											]
										}
									],
									"sources": [
										{
											"fileName": "SimpleSchemaExtensions.ts",
											"line": 166,
											"character": 16
										}
									]
								}
							},
							"defaultValue": " {}"
						}
					],
					"type": {
						"type": "reference",
						"name": "ExtendedSchema",
						"id": 69
					}
				}
			],
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 162,
					"character": 36
				}
			]
		},
		{
			"id": 117,
			"name": "determineUnitKind",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Looks at a simple schema, and determines the unit used for a key.\nIf the SimpleSchema is a QuantitySchema will always look at the unit key.",
				"returns": "'unknown' or one of the js-quantities unit kinds (e.g. 'length')\n"
			},
			"signatures": [
				{
					"id": 118,
					"name": "determineUnitKind",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Looks at a simple schema, and determines the unit used for a key.\nIf the SimpleSchema is a QuantitySchema will always look at the unit key.",
						"returns": "'unknown' or one of the js-quantities unit kinds (e.g. 'length')\n"
					},
					"parameters": [
						{
							"id": 119,
							"name": "schema",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "the schema to determine the unit of"
							},
							"type": {
								"type": "reference",
								"name": "SimpleSchema"
							}
						},
						{
							"id": 120,
							"name": "key",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "the key to the schema property to determine the unit of"
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 115,
					"character": 30
				}
			]
		},
		{
			"id": 64,
			"name": "evaluateAccessibilitySchemaExtension",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 65,
					"name": "evaluateAccessibilitySchemaExtension",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"typeParameter": [
						{
							"id": 66,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 67,
							"name": "extension",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "AccessibilitySchemaExtension",
								"id": 12,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 68,
							"name": "context",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "QuestionFunctionContext",
								"id": 2,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "EvaluatedAccessibilitySchemaExtension",
						"id": 29,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "T"
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 128,
					"character": 52
				}
			]
		},
		{
			"id": 600,
			"name": "evaluateAndRule",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 601,
					"name": "evaluateAndRule",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 602,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "__type"
							}
						},
						{
							"id": 603,
							"name": "andRule",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "AndRule",
								"id": 577
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "RuleEvaluationResult",
						"id": 590
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 88,
					"character": 24
				}
			]
		},
		{
			"id": 614,
			"name": "evaluateMatchRule",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 615,
					"name": "evaluateMatchRule",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 616,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "__type"
							}
						},
						{
							"id": 617,
							"name": "rule",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "MatchRule",
								"id": 570
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "RuleEvaluationResult",
						"id": 590
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 152,
					"character": 26
				}
			]
		},
		{
			"id": 596,
			"name": "evaluateOrRule",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 597,
					"name": "evaluateOrRule",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 598,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "__type"
							}
						},
						{
							"id": 599,
							"name": "orRule",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "OrRule",
								"id": 574
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "RuleEvaluationResult",
						"id": 590
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 68,
					"character": 23
				}
			]
		},
		{
			"id": 59,
			"name": "evaluateQuestionValue",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 60,
					"name": "evaluateQuestionValue",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"typeParameter": [
						{
							"id": 61,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 62,
							"name": "question",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "QuestionValue",
								"id": 57,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						},
						{
							"id": 63,
							"name": "context",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "QuestionFunctionContext",
								"id": 2,
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 111,
					"character": 37
				}
			]
		},
		{
			"id": 618,
			"name": "evaluateRule",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 619,
					"name": "evaluateRule",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 620,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "__type"
							}
						},
						{
							"id": 621,
							"name": "rule",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Rule",
								"id": 580
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "RuleEvaluationResult",
						"id": 590
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 229,
					"character": 28
				}
			]
		},
		{
			"id": 668,
			"name": "evaluateToiletWheelmapA11y",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 669,
					"name": "evaluateToiletWheelmapA11y",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 670,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "__type"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "A11yRating",
						"id": 664
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/WheelmapA11yRuleset.ts",
					"line": 83,
					"character": 42
				}
			]
		},
		{
			"id": 665,
			"name": "evaluateWheelmapA11y",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 666,
					"name": "evaluateWheelmapA11y",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 667,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "__type"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "A11yRating",
						"id": 664
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/WheelmapA11yRuleset.ts",
					"line": 64,
					"character": 36
				}
			]
		},
		{
			"id": 535,
			"name": "forEachKeyInSchemas",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"signatures": [
				{
					"id": 536,
					"name": "forEachKeyInSchemas",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 537,
							"name": "schema",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "SimpleSchema"
							}
						},
						{
							"id": 538,
							"name": "callback",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "ForEachKeyInSchemasCallbackFunction",
								"id": 519
							}
						},
						{
							"id": 539,
							"name": "prefix",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						},
						{
							"id": 540,
							"name": "rootPathPrefix",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"\""
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "SchemaHelpers.ts",
					"line": 54,
					"character": 32
				}
			]
		},
		{
			"id": 529,
			"name": "getFirstSchemaFromDefinition",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Returns the SimpleSchema of the type of the given definition"
			},
			"signatures": [
				{
					"id": 530,
					"name": "getFirstSchemaFromDefinition",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the SimpleSchema of the type of the given definition"
					},
					"parameters": [
						{
							"id": 531,
							"name": "definition",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "SchemaDefinition"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "SimpleSchema"
					}
				}
			],
			"sources": [
				{
					"fileName": "SchemaHelpers.ts",
					"line": 31,
					"character": 41
				}
			]
		},
		{
			"id": 604,
			"name": "getQuantityValue",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 605,
					"name": "getQuantityValue",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 606,
							"name": "a",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "reference",
										"name": "Quantity",
										"id": 97
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 99,
					"character": 25
				}
			]
		},
		{
			"id": 584,
			"name": "isAndRule",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 585,
					"name": "isAndRule",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 586,
							"name": "rule",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Rule",
								"id": 580
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 48,
					"character": 18
				}
			]
		},
		{
			"id": 532,
			"name": "isDefinitionTypeArray",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": " Returns true if the given SimpleSchema definition contains an array"
			},
			"signatures": [
				{
					"id": 533,
					"name": "isDefinitionTypeArray",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": " Returns true if the given SimpleSchema definition contains an array"
					},
					"parameters": [
						{
							"id": 534,
							"name": "definition",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "SchemaDefinition"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "SchemaHelpers.ts",
					"line": 44,
					"character": 34
				}
			]
		},
		{
			"id": 526,
			"name": "isDefinitionTypeSchema",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": " Returns true if the given SimpleSchema definition contains a SimpleSchema instance"
			},
			"signatures": [
				{
					"id": 527,
					"name": "isDefinitionTypeSchema",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": " Returns true if the given SimpleSchema definition contains a SimpleSchema instance"
					},
					"parameters": [
						{
							"id": 528,
							"name": "definition",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "SchemaDefinition"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "SchemaHelpers.ts",
					"line": 13,
					"character": 35
				}
			]
		},
		{
			"id": 587,
			"name": "isMatchRule",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 588,
					"name": "isMatchRule",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 589,
							"name": "rule",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Rule",
								"id": 580
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 52,
					"character": 20
				}
			]
		},
		{
			"id": 581,
			"name": "isOrRule",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"signatures": [
				{
					"id": 582,
					"name": "isOrRule",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 583,
							"name": "rule",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Rule",
								"id": 580
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 44,
					"character": 17
				}
			]
		},
		{
			"id": 592,
			"name": "logRule",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 593,
					"name": "logRule",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 594,
							"name": "message",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 595,
							"name": "args",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isRest": true
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "unknown"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			],
			"sources": [
				{
					"fileName": "rules/RatingRules.ts",
					"line": 61,
					"character": 13
				}
			]
		},
		{
			"id": 110,
			"name": "makeQuantitySchema",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 111,
					"name": "makeQuantitySchema",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 112,
							"name": "kind",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 113,
							"name": "defaultValue",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 114,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 115,
											"name": "__schemaType",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "SimpleSchemaExtensions.ts",
													"line": 155,
													"character": 14
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 116,
											"name": "__schemaVersion",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "SimpleSchemaExtensions.ts",
													"line": 156,
													"character": 17
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												115,
												116
											]
										}
									]
								}
							},
							{
								"type": "reference",
								"name": "SimpleSchema"
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 90,
					"character": 24
				}
			]
		},
		{
			"id": 46,
			"name": "makeQuestionContext",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 47,
					"name": "makeQuestionContext",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"typeParameter": [
						{
							"id": 48,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					],
					"parameters": [
						{
							"id": 49,
							"name": "path",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 50,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						},
						{
							"id": 51,
							"name": "schema",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "SimpleSchema"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "QuestionFunctionContext",
						"id": 2,
						"typeArguments": [
							{
								"type": "typeParameter",
								"name": "T"
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "SimpleSchemaExtensions.ts",
					"line": 20,
					"character": 35
				}
			]
		},
		{
			"id": 796,
			"name": "parseFloatUnit",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 797,
					"name": "parseFloatUnit",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 798,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 799,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						},
						{
							"id": 800,
							"name": "unit",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 801,
							"name": "operator",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "Dictionary",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								]
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 184,
					"character": 20
				}
			]
		},
		{
			"id": 771,
			"name": "parseHasArray",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 772,
					"name": "parseHasArray",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 773,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 774,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 153,
					"character": 19
				}
			]
		},
		{
			"id": 775,
			"name": "parseHasEntry",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 776,
					"name": "parseHasEntry",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 777,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 778,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 157,
					"character": 19
				}
			]
		},
		{
			"id": 765,
			"name": "parseHasWithDefault",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 766,
					"name": "parseHasWithDefault",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 767,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 768,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						},
						{
							"id": 769,
							"name": "existsValue",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 770,
							"name": "doesNotExistValue",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 134,
					"character": 25
				}
			]
		},
		{
			"id": 802,
			"name": "parseIntUnit",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 803,
					"name": "parseIntUnit",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 804,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 805,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						},
						{
							"id": 806,
							"name": "unit",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 807,
							"name": "operator",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "Dictionary",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								]
							}
						]
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 195,
					"character": 18
				}
			]
		},
		{
			"id": 786,
			"name": "parseIsAnyOf",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 787,
					"name": "parseIsAnyOf",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 788,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 789,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						},
						{
							"id": 790,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 176,
					"character": 18
				}
			]
		},
		{
			"id": 791,
			"name": "parseIsAnyOfEntry",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 792,
					"name": "parseIsAnyOfEntry",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 793,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 794,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						},
						{
							"id": 795,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 180,
					"character": 23
				}
			]
		},
		{
			"id": 779,
			"name": "parseIsAnyOfWithDefault",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 780,
					"name": "parseIsAnyOfWithDefault",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 781,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 782,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						},
						{
							"id": 783,
							"name": "list",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 784,
							"name": "existsValue",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 785,
							"name": "doesNotExistValue",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 161,
					"character": 29
				}
			]
		},
		{
			"id": 808,
			"name": "parseMultiSelect",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 809,
					"name": "parseMultiSelect",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 810,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 811,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 206,
					"character": 22
				}
			]
		},
		{
			"id": 756,
			"name": "parseValue",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 757,
					"name": "parseValue",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 758,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 759,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						},
						{
							"id": 760,
							"name": "type",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "FieldTypes",
								"id": 755
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 102,
					"character": 16
				}
			]
		},
		{
			"id": 761,
			"name": "parseYesNo",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isConst": true
			},
			"signatures": [
				{
					"id": 762,
					"name": "parseYesNo",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 763,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						},
						{
							"id": 764,
							"name": "field",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboKey",
								"id": 754
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "unknown"
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 130,
					"character": 16
				}
			]
		},
		{
			"id": 141,
			"name": "quantityDefinition",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 142,
					"name": "quantityDefinition",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 143,
							"name": "type",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "SchemaType"
							}
						},
						{
							"id": 144,
							"name": "optional",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 145,
							"name": "accessibility",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isOptional": true
							},
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "__type"
									}
								]
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "SchemaDefinition"
					}
				}
			],
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 151,
					"character": 34
				}
			]
		},
		{
			"id": 812,
			"name": "transformKoboToA11y",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"signatures": [
				{
					"id": 813,
					"name": "transformKoboToA11y",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"parameters": [
						{
							"id": 814,
							"name": "data",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "KoboResult",
								"id": 681
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 815,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 816,
									"name": "properties",
									"kind": 2097152,
									"kindString": "Object literal",
									"flags": {},
									"children": [
										{
											"id": 817,
											"name": "hasAccessibility",
											"kind": 32,
											"kindString": "Variable",
											"flags": {},
											"sources": [
												{
													"fileName": "transformers/transformKoboToA11y.ts",
													"line": 385,
													"character": 22
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"groups": [
										{
											"title": "Variables",
											"kind": 32,
											"children": [
												817
											]
										}
									],
									"sources": [
										{
											"fileName": "transformers/transformKoboToA11y.ts",
											"line": 384,
											"character": 14
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								}
							],
							"groups": [
								{
									"title": "Object literals",
									"kind": 2097152,
									"children": [
										816
									]
								}
							]
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "transformers/transformKoboToA11y.ts",
					"line": 218,
					"character": 32
				}
			]
		},
		{
			"id": 105,
			"name": "validateUnit",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Builds a custom validation function that ensures that the value of the field\nis a unit of the kind passed to `validateUnit`",
				"text": "If the validation fails, a new `invalid_unit` error message is raised.\n",
				"returns": "A custom SimpleSchema Validation function\n"
			},
			"signatures": [
				{
					"id": 106,
					"name": "validateUnit",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Builds a custom validation function that ensures that the value of the field\nis a unit of the kind passed to `validateUnit`",
						"text": "If the validation fails, a new `invalid_unit` error message is raised.\n",
						"returns": "A custom SimpleSchema Validation function\n"
					},
					"parameters": [
						{
							"id": 107,
							"name": "kind",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "One of js-quantities unit kinds, e.g. length, mass, etc."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reference",
						"name": "ValidationFunction"
					}
				}
			],
			"sources": [
				{
					"fileName": "Units.ts",
					"line": 31,
					"character": 25
				}
			]
		},
		{
			"id": 315,
			"name": "AccessibleTablesPrefab",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 316,
					"name": "height",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 317,
							"name": "operator",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 44,
									"character": 12
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": ">="
							},
							"defaultValue": "\">=\""
						},
						{
							"id": 319,
							"name": "unit",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 46,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"cm\""
						},
						{
							"id": 318,
							"name": "value",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 45,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "72"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								317,
								319,
								318
							]
						}
					],
					"sources": [
						{
							"fileName": "Tables.ts",
							"line": 43,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 328,
					"name": "spaceBelowDepth",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 329,
							"name": "operator",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 59,
									"character": 12
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": ">="
							},
							"defaultValue": "\">=\""
						},
						{
							"id": 331,
							"name": "unit",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 61,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"cm\""
						},
						{
							"id": 330,
							"name": "value",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 60,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "50"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								329,
								331,
								330
							]
						}
					],
					"sources": [
						{
							"fileName": "Tables.ts",
							"line": 58,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 320,
					"name": "spaceBelowHeight",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 321,
							"name": "operator",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 49,
									"character": 12
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": ">="
							},
							"defaultValue": "\">=\""
						},
						{
							"id": 323,
							"name": "unit",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 51,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"cm\""
						},
						{
							"id": 322,
							"name": "value",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 50,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "70"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								321,
								323,
								322
							]
						}
					],
					"sources": [
						{
							"fileName": "Tables.ts",
							"line": 48,
							"character": 18
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 324,
					"name": "spaceBelowWidth",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 325,
							"name": "operator",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 54,
									"character": 12
								}
							],
							"type": {
								"type": "stringLiteral",
								"value": ">="
							},
							"defaultValue": "\">=\""
						},
						{
							"id": 327,
							"name": "unit",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 56,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"cm\""
						},
						{
							"id": 326,
							"name": "value",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "Tables.ts",
									"line": 55,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "80"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								325,
								327,
								326
							]
						}
					],
					"sources": [
						{
							"fileName": "Tables.ts",
							"line": 53,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						316,
						328,
						320,
						324
					]
				}
			],
			"sources": [
				{
					"fileName": "Tables.ts",
					"line": 42,
					"character": 35
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 162,
			"name": "LocalizedStringSchema",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 164,
					"name": "blackbox",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "LocalizedString.ts",
							"line": 14,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "true"
				},
				{
					"id": 165,
					"name": "optional",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "LocalizedString.ts",
							"line": 15,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					},
					"defaultValue": "true"
				},
				{
					"id": 163,
					"name": "type",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "LocalizedString.ts",
							"line": 13,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"name": "ObjectConstructor"
					},
					"defaultValue": " Object"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						164,
						165,
						163
					]
				}
			],
			"sources": [
				{
					"fileName": "LocalizedString.ts",
					"line": 12,
					"character": 34
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 622,
			"name": "flatStepHeight",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 625,
					"name": "operator",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 5,
							"character": 62
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"<=\""
				},
				{
					"id": 623,
					"name": "unit",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 5,
							"character": 36
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"defaultValue": "\"cm\""
				},
				{
					"id": 624,
					"name": "value",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 5,
							"character": 49
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "7"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						625,
						623,
						624
					]
				}
			],
			"sources": [
				{
					"fileName": "rules/WheelmapA11yRuleset.ts",
					"line": 5,
					"character": 27
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 635,
			"name": "fullWheelmapA11yRuleSet",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 636,
					"name": "$or",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 16,
							"character": 5
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "reflection",
									"declaration": {
										"id": 637,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 638,
												"name": "properties.accessibility.entrances.0.hasFixedRamp",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "rules/WheelmapA11yRuleset.ts",
														"line": 18,
														"character": 57
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "true"
												},
												"defaultValue": "true"
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													638
												]
											}
										]
									}
								},
								{
									"type": "reflection",
									"declaration": {
										"id": 639,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 640,
												"name": "properties.accessibility.entrances.0.hasRemovableRamp",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "rules/WheelmapA11yRuleset.ts",
														"line": 21,
														"character": 61
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "true"
												},
												"defaultValue": "true"
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													640
												]
											}
										]
									}
								},
								{
									"type": "reflection",
									"declaration": {
										"id": 641,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 642,
												"name": "properties.accessibility.entrances.0.stairs.0.count",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "rules/WheelmapA11yRuleset.ts",
														"line": 24,
														"character": 59
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "number"
												},
												"defaultValue": "0"
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													642
												]
											}
										]
									}
								},
								{
									"type": "reflection",
									"declaration": {
										"id": 643,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 644,
												"name": "properties.accessibility.entrances.0.stairs",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "rules/WheelmapA11yRuleset.ts",
														"line": 27,
														"character": 51
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "null"
												},
												"defaultValue": " null"
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													644
												]
											}
										]
									}
								},
								{
									"type": "reflection",
									"declaration": {
										"id": 645,
										"name": "__type",
										"kind": 65536,
										"kindString": "Type literal",
										"flags": {},
										"children": [
											{
												"id": 646,
												"name": "properties.accessibility.entrances.0.isLevel",
												"kind": 32,
												"kindString": "Variable",
												"flags": {},
												"sources": [
													{
														"fileName": "rules/WheelmapA11yRuleset.ts",
														"line": 30,
														"character": 52
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "true"
												},
												"defaultValue": "true"
											}
										],
										"groups": [
											{
												"title": "Variables",
												"kind": 32,
												"children": [
													646
												]
											}
										]
									}
								}
							]
						}
					},
					"defaultValue": " [\n    {\n      'properties.accessibility.entrances.0.hasFixedRamp': true\n    },\n    {\n      'properties.accessibility.entrances.0.hasRemovableRamp': true\n    },\n    {\n      'properties.accessibility.entrances.0.stairs.0.count': 0\n    },\n    {\n      'properties.accessibility.entrances.0.stairs': null\n    },\n    {\n      'properties.accessibility.entrances.0.isLevel': true\n    }\n  ]"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						636
					]
				}
			],
			"sources": [
				{
					"fileName": "rules/WheelmapA11yRuleset.ts",
					"line": 15,
					"character": 36
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 647,
			"name": "partialWheelmapA11yRuleSet",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 648,
					"name": "$or",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 39,
							"character": 5
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reflection",
							"declaration": {
								"id": 649,
								"name": "__type",
								"kind": 65536,
								"kindString": "Type literal",
								"flags": {},
								"children": [
									{
										"id": 650,
										"name": "properties.accessibility.entrances.0.stairs.0.count",
										"kind": 32,
										"kindString": "Variable",
										"flags": {},
										"sources": [
											{
												"fileName": "rules/WheelmapA11yRuleset.ts",
												"line": 41,
												"character": 59
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "number"
										},
										"defaultValue": "1"
									},
									{
										"id": 651,
										"name": "properties.accessibility.entrances.0.stairs.0.stepHeight",
										"kind": 2097152,
										"kindString": "Object literal",
										"flags": {},
										"children": [
											{
												"id": 652,
												"name": "$lte",
												"kind": 2097152,
												"kindString": "Object literal",
												"flags": {},
												"children": [
													{
														"id": 654,
														"name": "unit",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "rules/WheelmapA11yRuleset.ts",
																"line": 43,
																"character": 32
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														},
														"defaultValue": "\"cm\""
													},
													{
														"id": 653,
														"name": "value",
														"kind": 32,
														"kindString": "Variable",
														"flags": {},
														"sources": [
															{
																"fileName": "rules/WheelmapA11yRuleset.ts",
																"line": 43,
																"character": 21
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "number"
														},
														"defaultValue": "7"
													}
												],
												"groups": [
													{
														"title": "Variables",
														"kind": 32,
														"children": [
															654,
															653
														]
													}
												],
												"sources": [
													{
														"fileName": "rules/WheelmapA11yRuleset.ts",
														"line": 43,
														"character": 12
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "object"
												}
											}
										],
										"groups": [
											{
												"title": "Object literals",
												"kind": 2097152,
												"children": [
													652
												]
											}
										],
										"sources": [
											{
												"fileName": "rules/WheelmapA11yRuleset.ts",
												"line": 42,
												"character": 64
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								],
								"groups": [
									{
										"title": "Variables",
										"kind": 32,
										"children": [
											650
										]
									},
									{
										"title": "Object literals",
										"kind": 2097152,
										"children": [
											651
										]
									}
								]
							}
						}
					},
					"defaultValue": " [\n    {\n      'properties.accessibility.entrances.0.stairs.0.count': 1,\n      'properties.accessibility.entrances.0.stairs.0.stepHeight': {\n        $lte: { value: 7.0, unit: 'cm' }\n      }\n    }\n  ]"
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						648
					]
				}
			],
			"sources": [
				{
					"fileName": "rules/WheelmapA11yRuleset.ts",
					"line": 38,
					"character": 39
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 626,
			"name": "wheelChairWashBasin",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 631,
					"name": "depth",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 633,
							"name": "operator",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rules/WheelmapA11yRuleset.ts",
									"line": 10,
									"character": 31
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\">=\""
						},
						{
							"id": 632,
							"name": "unit",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rules/WheelmapA11yRuleset.ts",
									"line": 10,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"cm\""
						},
						{
							"id": 634,
							"name": "value",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rules/WheelmapA11yRuleset.ts",
									"line": 10,
									"character": 44
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "50"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								633,
								632,
								634
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 10,
							"character": 7
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 627,
					"name": "height",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 629,
							"name": "operator",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rules/WheelmapA11yRuleset.ts",
									"line": 9,
									"character": 32
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\">=\""
						},
						{
							"id": 628,
							"name": "unit",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rules/WheelmapA11yRuleset.ts",
									"line": 9,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"defaultValue": "\"cm\""
						},
						{
							"id": 630,
							"name": "value",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rules/WheelmapA11yRuleset.ts",
									"line": 9,
									"character": 45
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "80"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								629,
								628,
								630
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 9,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						631,
						627
					]
				}
			],
			"sources": [
				{
					"fileName": "rules/WheelmapA11yRuleset.ts",
					"line": 8,
					"character": 32
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		},
		{
			"id": 655,
			"name": "wheelmapToiletA11yRuleSet",
			"kind": 2097152,
			"kindString": "Object literal",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"children": [
				{
					"id": 662,
					"name": "properties.accessibility.restrooms.0.entrance.isLevel",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 56,
							"character": 57
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "true"
					},
					"defaultValue": "true"
				},
				{
					"id": 663,
					"name": "properties.accessibility.restrooms.0.washBasin.accessibleWithWheelchair",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 57,
							"character": 75
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "true"
					},
					"defaultValue": "true"
				},
				{
					"id": 656,
					"name": "properties.accessibility.restrooms",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 657,
							"name": "$exists",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rules/WheelmapA11yRuleset.ts",
									"line": 53,
									"character": 49
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							},
							"defaultValue": "true"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								657
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 53,
							"character": 38
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 658,
					"name": "properties.accessibility.restrooms.0",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 659,
							"name": "$exists",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rules/WheelmapA11yRuleset.ts",
									"line": 54,
									"character": 51
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							},
							"defaultValue": "true"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								659
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 54,
							"character": 40
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 660,
					"name": "properties.accessibility.restrooms.0.toilet",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 661,
							"name": "$exists",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "rules/WheelmapA11yRuleset.ts",
									"line": 55,
									"character": 58
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "true"
							},
							"defaultValue": "true"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								661
							]
						}
					],
					"sources": [
						{
							"fileName": "rules/WheelmapA11yRuleset.ts",
							"line": 55,
							"character": 47
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						662,
						663
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						656,
						658,
						660
					]
				}
			],
			"sources": [
				{
					"fileName": "rules/WheelmapA11yRuleset.ts",
					"line": 52,
					"character": 38
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "object"
			}
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				2
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				374,
				12,
				362,
				146,
				180,
				489,
				447,
				29,
				442,
				216,
				354,
				286,
				198,
				350,
				332,
				300,
				87,
				514,
				494,
				436,
				97,
				250,
				192,
				236,
				277,
				166,
				413,
				309,
				225,
				206,
				338,
				282
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				664,
				435,
				577,
				541,
				548,
				563,
				486,
				542,
				69,
				755,
				519,
				440,
				557,
				560,
				273,
				276,
				671,
				754,
				681,
				139,
				551,
				554,
				158,
				570,
				569,
				566,
				108,
				607,
				574,
				52,
				57,
				266,
				580,
				590,
				274,
				369,
				545,
				140,
				680,
				679
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				408,
				86,
				430,
				487,
				368,
				109,
				157,
				191,
				493,
				488,
				446,
				221,
				1,
				441,
				361,
				121,
				129,
				103,
				299,
				202,
				104,
				353,
				337,
				308,
				96,
				518,
				513,
				439,
				267,
				194,
				246,
				281,
				176,
				429,
				314,
				232,
				125,
				134,
				212,
				352,
				285,
				608,
				271,
				275,
				591,
				409,
				265,
				272,
				370
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				609,
				73,
				117,
				64,
				600,
				614,
				596,
				59,
				618,
				668,
				665,
				535,
				529,
				604,
				584,
				532,
				526,
				587,
				581,
				592,
				110,
				46,
				796,
				771,
				775,
				765,
				802,
				786,
				791,
				779,
				808,
				756,
				761,
				141,
				812,
				105
			]
		},
		{
			"title": "Object literals",
			"kind": 2097152,
			"children": [
				315,
				162,
				622,
				635,
				647,
				626,
				655
			]
		}
	]
}