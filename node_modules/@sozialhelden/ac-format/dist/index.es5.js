import SimpleSchema from 'simpl-schema';
import { sample, extend, entries, get, intersection, isMatch, isEqual, setWith, set, unset, includes, pickBy } from 'lodash';
import { t } from 'ttag';
import { parse } from 'js-quantities';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var FormatVersion = '4.7.3';

var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

SimpleSchema.extendOptions(['accessibility']);
/**
 * Context for the question function, to read additional fields or generate questions dynamically
 */

var QuestionFunctionContext = function QuestionFunctionContext() {
  _classCallCheck(this, QuestionFunctionContext);
};
function makeQuestionContext(path, value, schema) {
  return new QuestionFunctionContext();
}
function evaluateQuestionValue(question, context) {
  if (typeof question === 'string') {
    return question;
  }

  if (Array.isArray(question)) {
    return sample(question);
  }

  if (typeof question === 'function') {
    return question(context);
  }

  return undefined;
}
function evaluateAccessibilitySchemaExtension(extension, context) {
  var question = extension.question,
      questionMore = extension.questionMore,
      questionBlockBegin = extension.questionBlockBegin,
      remaining = __rest(extension, ["question", "questionMore", "questionBlockBegin"]);

  if (question) {
    question = evaluateQuestionValue(question, context);
  }

  if (questionMore) {
    questionMore = evaluateQuestionValue(questionMore, context);
  }

  if (questionBlockBegin) {
    questionBlockBegin = evaluateQuestionValue(questionBlockBegin, context);
  }

  return Object.assign({
    question: question,
    questionMore: questionMore,
    questionBlockBegin: questionBlockBegin
  }, remaining);
}
/**
 * Internal helper for creating schemata with attached schemaType
 */

function createSchemaInstance(type, definition) {
  var baseSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var schemaOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var extendedSchema = new SimpleSchema(definition, schemaOptions);

  if (baseSchema) {
    extendedSchema.extend(baseSchema);
  }

  extendedSchema.__schemaType = type;
  extendedSchema.__schemaVersion = FormatVersion;
  return extendedSchema;
}
/**
 * A schema for validating the AccessibilitySchemaExtension. Used for internal tests.
 */

var AccessibilitySchemaExtensionSchema = new SimpleSchema({
  example: {
    type: String,
    optional: true
  },
  description: {
    type: String,
    optional: true
  },
  extendedInformationUrl: {
    type: String,
    optional: true
  },
  options: {
    type: Array,
    optional: true
  },
  'options.$': {
    type: Object,
    blackbox: true
  },
  // FIXME disabled value validation until SimpleSchema.oneOf bug is fixed
  // https://github.com/aldeed/simple-schema-js/issues/112
  // 'options.$.value': {
  //   type: SimpleSchema.oneOf(
  //     String,
  //     {
  //       type: Object,
  //       blackbox: true
  //     },
  //     Number,
  //   ),
  // },
  'options.$.label': {
    type: String
  },
  question: {
    type: String,
    optional: true
  },
  questionMore: {
    type: String,
    optional: true
  },
  questionBlockBegin: {
    type: String,
    optional: true
  },
  machineData: {
    type: Boolean,
    optional: true
  },
  componentHint: {
    type: String,
    optional: true
  },
  inseparable: {
    type: Boolean,
    optional: true
  },
  preferredUnit: {
    type: String,
    optional: true
  },
  deprecated: {
    type: Boolean,
    optional: true
  }
});

var PersonalProfileSchema = new SimpleSchema({
  muteness: {
    type: Boolean,
    optional: true
  },
  guideDog: {
    type: Boolean,
    optional: true
  },
  hearingImpairment: {
    type: Boolean,
    optional: true
  },
  learningImpairment: {
    type: Boolean,
    optional: true
  },
  mobilityImpairment: {
    type: Boolean,
    optional: true
  },
  visualImpairment: {
    type: Boolean,
    optional: true
  },
  blindness: {
    type: Boolean,
    optional: true
  },
  wheelchair: {
    type: Boolean,
    optional: true
  }
});

SimpleSchema.setDefaultMessages({
  messages: {
    en: {
      invalid_unit: 'Invalid Unit'
    }
  }
});
/**
 * The unit kind for length units such as meter, centimeter or inch
 */

var LengthUnitKind = 'length';
var OtherUnitKind = 'other';
/**
 * Builds a custom validation function that ensures that the value of the field
 * is a unit of the kind passed to `validateUnit`
 *
 * If the validation fails, a new `invalid_unit` error message is raised.
 *
 * @param {string} kind One of js-quantities unit kinds, e.g. length, mass, etc.
 * @returns {ValidationFunction} A custom SimpleSchema Validation function
 */

var validateUnit = function validateUnit(kind) {
  return function () {
    var qty = parse(this.value);

    if (!qty || qty.scalar !== 1 || qty.kind() !== kind) {
      return 'invalid_unit';
    }

    return undefined;
  };
};
/**
 * The BaseQuantitySchema allows easy validation, cleaning and checking of quantity objects.
 * It does not define a unit kind, and will not validate the unit.
 */

var BaseQuantitySchema = new SimpleSchema({
  operator: {
    type: String,
    allowedValues: ['<', '<=', '==', '>=', '>'],
    optional: true
  },
  value: {
    type: Number
  },
  unit: {
    type: String
  },
  accuracy: {
    type: Number,
    optional: true
  },
  rawValue: {
    type: String,
    optional: true
  }
}); // takes the BaseQuantitySchema and extends it with validation for the given unit type

var makeQuantitySchema = function makeQuantitySchema(kind, defaultValue) {
  return createSchemaInstance('Quantity', {
    unit: {
      type: String,
      custom: validateUnit(kind),
      defaultValue: defaultValue,
      accessibility: {
        preferredUnit: kind
      }
    }
  }, BaseQuantitySchema);
};
/**
 * Looks at a simple schema, and determines the unit used for a key.
 * If the SimpleSchema is a QuantitySchema will always look at the unit key.
 *
 * @param {SimpleSchema} schema the schema to determine the unit of
 * @param {string} key the key to the schema property to determine the unit of
 * @returns {string} 'unknown' or one of the js-quantities unit kinds (e.g. 'length')
 */


var determineUnitKind = function determineUnitKind(schema, key) {
  if (!SimpleSchema.isSimpleSchema(schema)) {
    throw new Error('No simple schema passed to determineUnitKind');
  }

  if (schema.__schemaType === 'Quantity') {
    key = 'unit';
  } else {
    if (!key) {
      throw new Error('No key passed into determineUnitKind for non Quantity schema');
    }

    key = "".concat(key, ".unit");
  }

  var definition = schema.getDefinition(key, ['accessibility']);

  if (!definition || !definition.accessibility || !definition.accessibility.preferredUnit) {
    return 'unknown';
  }

  return definition.accessibility.preferredUnit;
};
/**
 * The LengthQuantitySchema allows easy validation, cleaning and checking of length quantity objects.
 * It validates the unit and will only accept length units, eg. meter, centimeter or inch.
 */

var LengthQuantitySchema = makeQuantitySchema(LengthUnitKind, 'meter');
var VolumeQuantitySchema = makeQuantitySchema(OtherUnitKind, 'decibel');
var LengthSchema = SimpleSchema.oneOf(LengthQuantitySchema, String);
var VolumeSchema = SimpleSchema.oneOf(VolumeQuantitySchema, String);
function quantityDefinition(type) {
  var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var accessibility = arguments.length > 2 ? arguments[2] : undefined;
  var base = {
    type: LengthSchema,
    accessibility: {
      inseparable: true,
      componentHint: 'Unit'
    }
  };

  if (optional === true) {
    base.optional = optional;
  }

  if (accessibility) {
    extend(base.accessibility, accessibility);
  }

  return base;
}

function _templateObject11() {
  var data = _taggedTemplateLiteral(["Does this door require an euro key?"]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  var data = _taggedTemplateLiteral(["Does this door require a radar key?"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteral(["Is this a revolving door?"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteral(["Does this door have an ergonomic handle?"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["Is this an automatic door or is the door always open?"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["Does the glass door have clear markings?"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["This refers to the maximum size of an object that can pass."]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["How wide is the door?"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["Is this an automatic door or is the door always open?"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["Does the door open to the outside?"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["How much space for turning is there at the entrance?"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var DoorSchema = new SimpleSchema({
  turningSpaceInFront: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject())
  }),
  doorOpensToOutside: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject2())
    }
  },
  isAutomaticOrAlwaysOpen: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject3())
    }
  },
  width: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject4()),
    description: t(_templateObject5())
  }),
  hasClearMarkingOnGlassDoor: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject6())
    }
  },
  isEasyToHoldOpen: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject7())
    }
  },
  hasErgonomicDoorHandle: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject8())
    }
  },
  isRevolving: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject9())
    }
  },
  needsRadarKey: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject10())
    }
  },
  needsEuroKey: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject11())
    }
  }
});

/**
 * Localized strings can either be just `String`s, or be `Object`s with IETF language tags
 * as property names and localized strings as property values.
 */
var LocalizedStringSchema = {
  type: Object,
  blackbox: true,
  optional: true
};

function _templateObject10$1() {
  var data = _taggedTemplateLiteral(["accessibility.cloud Equipment ID"]);

  _templateObject10$1 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$1() {
  var data = _taggedTemplateLiteral(["accessibility.cloud IDs of alternative escalators, elevators, hoists, or stair lifts to replace this pathway"]);

  _templateObject9$1 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$1() {
  var data = _taggedTemplateLiteral(["Do the stairs have braille navigation hints printed on the rails?"]);

  _templateObject8$1 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$1() {
  var data = _taggedTemplateLiteral(["Do the stairs have tactile safety strips?"]);

  _templateObject7$1 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$1() {
  var data = _taggedTemplateLiteral(["Is there a hand rail?"]);

  _templateObject6$1 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$1() {
  var data = _taggedTemplateLiteral(["How high is this step / are these steps?"]);

  _templateObject5$1 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$1() {
  var data = _taggedTemplateLiteral(["What is the name of these stairs?"]);

  _templateObject4$1 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$1() {
  var data = _taggedTemplateLiteral(["Do the steps have anti-slip material?"]);

  _templateObject3$1 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$1() {
  var data = _taggedTemplateLiteral(["Are the steps nosings marked for higher contrast?"]);

  _templateObject2$1 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$1() {
  var data = _taggedTemplateLiteral(["How many steps are there?"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var StairsSchema = createSchemaInstance('Stairs', {
  /// number of steps
  count: {
    type: Number,
    optional: true,
    accessibility: {
      question: t(_templateObject$1())
    }
  },
  nosing: {
    type: Object,
    optional: true,
    accessibility: {}
  },
  'nosing.isHighContrast': {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject2$1())
    }
  },
  'nosing.isAntiSlip': {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject3$1())
    }
  },
  name: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject4$1())
    }
  },
  stepHeight: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject5$1())
  }),
  hasHandRail: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject6$1())
    }
  },
  hasTactileSafetyStrips: {
    type: Boolean,
    optional: true,
    accessibility: {
      description: t(_templateObject7$1())
    }
  },
  hasBrailleNavigation: {
    type: Boolean,
    optional: true,
    accessibility: {
      description: t(_templateObject8$1())
    }
  },
  alternativeMobileEquipmentIds: {
    type: Array,
    optional: true,
    accessibility: {
      machineData: true,
      description: t(_templateObject9$1())
    }
  },
  'alternativeMobileEquipmentIds.$': {
    type: String,
    label: t(_templateObject10$1())
  }
});

function _templateObject13() {
  var data = _taggedTemplateLiteral(["Is there an intercom at this entrance?"]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  var data = _taggedTemplateLiteral(["Is there a lift at this entrance?"]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11$1() {
  var data = _taggedTemplateLiteral(["Would you like to add information about the door at the entrance?"]);

  _templateObject11$1 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10$2() {
  var data = _taggedTemplateLiteral(["Door"]);

  _templateObject10$2 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$2() {
  var data = _taggedTemplateLiteral(["Are there steps at the entrance?"]);

  _templateObject9$2 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$2() {
  var data = _taggedTemplateLiteral(["Stairs"]);

  _templateObject8$2 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$2() {
  var data = _taggedTemplateLiteral(["Is a portable ramp available? Please check with the staff on-site."]);

  _templateObject7$2 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$2() {
  var data = _taggedTemplateLiteral(["What is the angle of the slope?"]);

  _templateObject6$2 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$2() {
  var data = _taggedTemplateLiteral(["Grade in percent as calculated by `100 * rise / run` or the tangent of the angle of inclination times 100"], ["Grade in percent as calculated by \\`100 * rise / run\\` or the tangent of the angle of inclination times 100"]);

  _templateObject5$2 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$2() {
  var data = _taggedTemplateLiteral(["Is the entrance stepless?"]);

  _templateObject4$2 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$2() {
  var data = _taggedTemplateLiteral(["Is this the main entrance?"]);

  _templateObject3$2 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$2() {
  var data = _taggedTemplateLiteral(["e.g. main entrance"]);

  _templateObject2$2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$2() {
  var data = _taggedTemplateLiteral(["What is the name of this entrance?"]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}
var EntranceSchema = new SimpleSchema({
  name: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject$2()),
      example: t(_templateObject2$2())
    }
  },
  isMainEntrance: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject3$2())
    }
  },
  isLevel: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject4$2())
    }
  },
  slopeAngle: {
    type: Number,
    optional: true,
    accessibility: {
      description: t(_templateObject5$2()),
      question: t(_templateObject6$2())
    }
  },
  hasRemovableRamp: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject7$2())
    }
  },
  stairs: {
    type: StairsSchema,
    optional: true,
    label: t(_templateObject8$2()),
    accessibility: {
      question: t(_templateObject9$2())
    }
  },
  door: {
    type: DoorSchema,
    optional: true,
    label: t(_templateObject10$2()),
    accessibility: {
      questionBlockBegin: t(_templateObject11$1())
    }
  },
  elevatorEquipmentId: {
    type: String,
    optional: true,
    accessibility: {
      question: t(_templateObject12()),
      machineData: true // TODO foreign object flow equipment

    }
  },
  intercomEquipmentId: {
    type: String,
    optional: true,
    accessibility: {
      question: t(_templateObject13()),
      machineData: true // TODO foreign object flow equipment

    }
  }
});

var RoomSchema = createSchemaInstance('Room', {
  isAccessibleWithWheelchair: {
    type: Boolean,
    optional: true,
    accessibility: {
      machineData: true
    }
  }
});

function _templateObject2$3() {
  var data = _taggedTemplateLiteral(["Can the mirror be used when sitting in a wheelchair?"]);

  _templateObject2$3 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$3() {
  var data = _taggedTemplateLiteral(["Is the mirror inside the restroom?"]);

  _templateObject$3 = function _templateObject() {
    return data;
  };

  return data;
}
var MirrorSchema = createSchemaInstance('Mirror', {
  isLocatedInsideRestroom: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject$3())
    }
  },
  isAccessibleWhileSeated: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject2$3())
    }
  },
  heightFromGround: quantityDefinition(LengthSchema)
});

function _templateObject5$3() {
  var data = _taggedTemplateLiteral(["How deep is the space below the wash basin?"]);

  _templateObject5$3 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$3() {
  var data = _taggedTemplateLiteral(["How high is the space below the wash basin?"]);

  _templateObject4$3 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$3() {
  var data = _taggedTemplateLiteral(["Let\u2019s take a look at the space below the wash basin."]);

  _templateObject3$3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$4() {
  var data = _taggedTemplateLiteral(["At which height is the wash basin's top?"]);

  _templateObject2$4 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$4() {
  var data = _taggedTemplateLiteral(["Is the wash basin located inside the restroom cabin?"]);

  _templateObject$4 = function _templateObject() {
    return data;
  };

  return data;
}
var WashBasinSchema = createSchemaInstance('WashBasin', {
  isLocatedInsideRestroom: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject$4())
    }
  },
  height: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject2$4())
  }),
  spaceBelow: {
    type: Object,
    optional: true,
    accessibility: {
      question: t(_templateObject3$3())
    }
  },
  spaceBelowHeight: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject4$3())
  }),
  spaceBelowDepth: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject5$3())
  })
});

function _templateObject4$4() {
  var data = _taggedTemplateLiteral(["How far are the handles apart?"]);

  _templateObject4$4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$4() {
  var data = _taggedTemplateLiteral(["How high are the folding handles (top edge, measured from the floor)"]);

  _templateObject3$4 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$5() {
  var data = _taggedTemplateLiteral(["Is there a folding handle on right side? (from the perspective of somebody using the toilet)"]);

  _templateObject2$5 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$5() {
  var data = _taggedTemplateLiteral(["Is there a folding handle on left side? (from the perspective of somebody using the toilet)"]);

  _templateObject$5 = function _templateObject() {
    return data;
  };

  return data;
}
var FoldingHandlesSchema = createSchemaInstance('FoldingHandles', {
  onUsersLeftSide: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject$5())
    }
  },
  onUsersRightSide: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject2$5())
    }
  },
  topHeightFromFloor: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject3$4())
  }),
  distanceBetweenHandles: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject4$4())
  })
});

function _templateObject6$3() {
  var data = _taggedTemplateLiteral(["Let\u2019s describe the folding handles."]);

  _templateObject6$3 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$4() {
  var data = _taggedTemplateLiteral(["Does the toilet have folding handles?"]);

  _templateObject5$4 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$5() {
  var data = _taggedTemplateLiteral(["How much space is in front of the toilet?"]);

  _templateObject4$5 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$5() {
  var data = _taggedTemplateLiteral(["How much space is on the right side of the toilet? (from the perspective of somebody using the toilet)"]);

  _templateObject3$5 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$6() {
  var data = _taggedTemplateLiteral(["How much space is on the left side of the toilet? (from the perspective of somebody using the toilet)"]);

  _templateObject2$6 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$6() {
  var data = _taggedTemplateLiteral(["How high is the toilet\u2019s base?"]);

  _templateObject$6 = function _templateObject() {
    return data;
  };

  return data;
}
var ToiletSchema = createSchemaInstance('Toilet', {
  heightOfBase: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject$6())
  }),
  spaceOnUsersLeftSide: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject2$6())
  }),
  spaceOnUsersRightSide: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject3$5())
  }),
  spaceInFront: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject4$5())
  }),
  hasFoldingHandles: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject5$4())
    }
  },
  foldingHandles: {
    type: FoldingHandlesSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject6$3())
    }
  }
});

function _templateObject9$3() {
  var data = _taggedTemplateLiteral(["Is this a folding seat?"]);

  _templateObject9$3 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$3() {
  var data = _taggedTemplateLiteral(["Is the seat removable from the shower?"]);

  _templateObject8$3 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$3() {
  var data = _taggedTemplateLiteral(["Is there an ergonomic handle?"]);

  _templateObject7$3 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$4() {
  var data = _taggedTemplateLiteral(["Is there a shower seat?"]);

  _templateObject6$4 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$5() {
  var data = _taggedTemplateLiteral(["Are the support rails above and below the controls?"]);

  _templateObject5$5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$6() {
  var data = _taggedTemplateLiteral(["At which height are the support rails?"]);

  _templateObject4$6 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$6() {
  var data = _taggedTemplateLiteral(["Let\u2019s describe the support rails further."]);

  _templateObject3$6 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$7() {
  var data = _taggedTemplateLiteral(["Does the shower have support rails?"]);

  _templateObject2$7 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$7() {
  var data = _taggedTemplateLiteral(["Is the shower step-free and level with the space in front of it?"]);

  _templateObject$7 = function _templateObject() {
    return data;
  };

  return data;
}
var ShowerSchema = createSchemaInstance('Shower', {
  step: quantityDefinition(LengthSchema),
  isLevel: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject$7())
    }
  },
  hasSupportRails: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject2$7())
    }
  },
  supportRails: {
    type: Object,
    optional: true,
    accessibility: {
      question: t(_templateObject3$6())
    }
  },
  supportRailsHeight: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject4$6())
  }),
  supportRailsAreAboveAndBelowControls: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject5$5())
    }
  },
  hasShowerSeat: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject6$4())
    }
  },
  hasErgonomicHandle: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject7$3())
    }
  },
  showerSeatIsRemovable: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject8$3())
    }
  },
  showerSeatIsFolding: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject9$3())
    }
  }
});

function _templateObject14() {
  var data = _taggedTemplateLiteral(["Would you like to add information about the wash basin?"]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13$1() {
  var data = _taggedTemplateLiteral(["At which height from the floor is the drier or towel?"]);

  _templateObject13$1 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12$1() {
  var data = _taggedTemplateLiteral(["At which height from the floor is the soap?"]);

  _templateObject12$1 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11$2() {
  var data = _taggedTemplateLiteral(["Would you like to add information about the shower?"]);

  _templateObject11$2 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10$3() {
  var data = _taggedTemplateLiteral(["Does the restroom have a shower?"]);

  _templateObject10$3 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$4() {
  var data = _taggedTemplateLiteral(["Would you like to add information about the entrance to the restroom?"]);

  _templateObject9$4 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$4() {
  var data = _taggedTemplateLiteral(["Entrance"]);

  _templateObject8$4 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$4() {
  var data = _taggedTemplateLiteral(["Is there a bath tub in this room?"]);

  _templateObject7$4 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$5() {
  var data = _taggedTemplateLiteral(["Let\u2019s take a look at the toilet."]);

  _templateObject6$5 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$6() {
  var data = _taggedTemplateLiteral(["Toilet"]);

  _templateObject5$6 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$7() {
  var data = _taggedTemplateLiteral(["Are there support rails on the walls?"]);

  _templateObject4$7 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$7() {
  var data = _taggedTemplateLiteral(["How wide is the space inside that is usable for turning?"]);

  _templateObject3$7 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$8() {
  var data = _taggedTemplateLiteral(["Does the restroom have a mirror?"]);

  _templateObject2$8 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$8() {
  var data = _taggedTemplateLiteral(["Visible icons on the restroom\u2019s sign"]);

  _templateObject$8 = function _templateObject() {
    return data;
  };

  return data;
}
var restroomSignIcons = ['allGender', 'female', 'male', 'personInWheelchair', 'changingTable', 'baby', 'family', 'urinal', 'washBasin', 'toiletBowl'];
var RestroomSchema = createSchemaInstance('Restroom', {
  signIcons: {
    type: Array,
    optional: true,
    accessibility: {
      description: t(_templateObject$8())
    }
  },
  'signIcons.$': {
    type: String,
    allowedValues: restroomSignIcons
  },
  hasMirror: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject2$8())
    }
  },
  mirror: {
    type: MirrorSchema,
    optional: true,
    accessibility: {}
  },
  turningSpaceInside: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject3$7())
  }),
  hasSupportRails: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject4$7())
    }
  },
  toilet: {
    type: ToiletSchema,
    label: t(_templateObject5$6()),
    optional: true,
    accessibility: {
      question: t(_templateObject6$5())
    }
  },
  hasBathTub: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject7$4())
    }
  },
  entrance: {
    type: EntranceSchema,
    label: t(_templateObject8$4()),
    optional: true,
    accessibility: {
      question: t(_templateObject9$4())
    }
  },
  hasShower: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject10$3())
    }
  },
  shower: {
    type: ShowerSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject11$2())
    }
  },
  heightOfSoap: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject12$1())
  }),
  heightOfDrier: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject13$1())
  }),
  washBasin: {
    type: WashBasinSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject14())
    }
  }
}, RoomSchema);

/**
 * All existing IETF language tags.
 */
var ietfLanguageTags = ['af', 'af-NA', 'af-ZA', 'agq', 'agq-CM', 'ak', 'ak-GH', 'am', 'am-ET', 'ar', 'ar-001', 'ar-AE', 'ar-BH', 'ar-DJ', 'ar-DZ', 'ar-EG', 'ar-EH', 'ar-ER', 'ar-IL', 'ar-IQ', 'ar-JO', 'ar-KM', 'ar-KW', 'ar-LB', 'ar-LY', 'ar-MA', 'ar-MR', 'ar-OM', 'ar-PS', 'ar-QA', 'ar-SA', 'ar-SD', 'ar-SO', 'ar-SS', 'ar-SY', 'ar-TD', 'ar-TN', 'ar-YE', 'as', 'as-IN', 'asa', 'asa-TZ', 'ast', 'ast-ES', 'az', 'az-Cyrl', 'az-Cyrl-AZ', 'az-Latn', 'az-Latn-AZ', 'bas', 'bas-CM', 'be', 'be-BY', 'bem', 'bem-ZM', 'bez', 'bez-TZ', 'bg', 'bg-BG', 'bm', 'bm-ML', 'bn', 'bn-BD', 'bn-IN', 'bo', 'bo-CN', 'bo-IN', 'br', 'br-FR', 'brx', 'brx-IN', 'bs', 'bs-Cyrl', 'bs-Cyrl-BA', 'bs-Latn', 'bs-Latn-BA', 'ca', 'ca-AD', 'ca-ES', 'ca-ES-VALENCIA', 'ca-FR', 'ca-IT', 'ccp', 'ccp-BD', 'ccp-IN', 'ce', 'ce-RU', 'cgg', 'cgg-UG', 'chr', 'chr-US', 'ckb', 'ckb-IQ', 'ckb-IR', 'cs', 'cs-CZ', 'cu', 'cu-RU', 'cy', 'cy-GB', 'da', 'da-DK', 'da-GL', 'dav', 'dav-KE', 'de', 'de-AT', 'de-BE', 'de-CH', 'de-DE', 'de-IT', 'de-LI', 'de-LU', 'dje', 'dje-NE', 'dsb', 'dsb-DE', 'dua', 'dua-CM', 'dyo', 'dyo-SN', 'dz', 'dz-BT', 'ebu', 'ebu-KE', 'ee', 'ee-GH', 'ee-TG', 'el', 'el-CY', 'el-GR', 'en', 'en-001', 'en-150', 'en-AG', 'en-AI', 'en-AS', 'en-AT', 'en-AU', 'en-BB', 'en-BE', 'en-BI', 'en-BM', 'en-BS', 'en-BW', 'en-BZ', 'en-CA', 'en-CC', 'en-CH', 'en-CK', 'en-CM', 'en-CX', 'en-CY', 'en-DE', 'en-DG', 'en-DK', 'en-DM', 'en-ER', 'en-FI', 'en-FJ', 'en-FK', 'en-FM', 'en-GB', 'en-GD', 'en-GG', 'en-GH', 'en-GI', 'en-GM', 'en-GU', 'en-GY', 'en-HK', 'en-IE', 'en-IL', 'en-IM', 'en-IN', 'en-IO', 'en-JE', 'en-JM', 'en-KE', 'en-KI', 'en-KN', 'en-KY', 'en-LC', 'en-LR', 'en-LS', 'en-MG', 'en-MH', 'en-MO', 'en-MP', 'en-MS', 'en-MT', 'en-MU', 'en-MW', 'en-MY', 'en-NA', 'en-NF', 'en-NG', 'en-NL', 'en-NR', 'en-NU', 'en-NZ', 'en-PG', 'en-PH', 'en-PK', 'en-PN', 'en-PR', 'en-PW', 'en-RW', 'en-SB', 'en-SC', 'en-SD', 'en-SE', 'en-SG', 'en-SH', 'en-SI', 'en-SL', 'en-SS', 'en-SX', 'en-SZ', 'en-TC', 'en-TK', 'en-TO', 'en-TT', 'en-TV', 'en-TZ', 'en-UG', 'en-UM', 'en-US', 'en-US-POSIX', 'en-VC', 'en-VG', 'en-VI', 'en-VU', 'en-WS', 'en-ZA', 'en-ZM', 'en-ZW', 'eo', 'eo-001', 'es', 'es-419', 'es-AR', 'es-BO', 'es-BR', 'es-BZ', 'es-CL', 'es-CO', 'es-CR', 'es-CU', 'es-DO', 'es-EA', 'es-EC', 'es-ES', 'es-GQ', 'es-GT', 'es-HN', 'es-IC', 'es-MX', 'es-NI', 'es-PA', 'es-PE', 'es-PH', 'es-PR', 'es-PY', 'es-SV', 'es-US', 'es-UY', 'es-VE', 'et', 'et-EE', 'eu', 'eu-ES', 'ewo', 'ewo-CM', 'fa', 'fa-AF', 'fa-IR', 'ff', 'ff-Latn', 'ff-Latn-BF', 'ff-Latn-CM', 'ff-Latn-GH', 'ff-Latn-GM', 'ff-Latn-GN', 'ff-Latn-GW', 'ff-Latn-LR', 'ff-Latn-MR', 'ff-Latn-NE', 'ff-Latn-NG', 'ff-Latn-SL', 'ff-Latn-SN', 'fi', 'fi-FI', 'fil', 'fil-PH', 'fo', 'fo-DK', 'fo-FO', 'fr', 'fr-BE', 'fr-BF', 'fr-BI', 'fr-BJ', 'fr-BL', 'fr-CA', 'fr-CD', 'fr-CF', 'fr-CG', 'fr-CH', 'fr-CI', 'fr-CM', 'fr-DJ', 'fr-DZ', 'fr-FR', 'fr-GA', 'fr-GF', 'fr-GN', 'fr-GP', 'fr-GQ', 'fr-HT', 'fr-KM', 'fr-LU', 'fr-MA', 'fr-MC', 'fr-MF', 'fr-MG', 'fr-ML', 'fr-MQ', 'fr-MR', 'fr-MU', 'fr-NC', 'fr-NE', 'fr-PF', 'fr-PM', 'fr-RE', 'fr-RW', 'fr-SC', 'fr-SN', 'fr-SY', 'fr-TD', 'fr-TG', 'fr-TN', 'fr-VU', 'fr-WF', 'fr-YT', 'fur', 'fur-IT', 'fy', 'fy-NL', 'ga', 'ga-IE', 'gd', 'gd-GB', 'gl', 'gl-ES', 'gsw', 'gsw-CH', 'gsw-FR', 'gsw-LI', 'gu', 'gu-IN', 'guz', 'guz-KE', 'gv', 'gv-IM', 'ha', 'ha-GH', 'ha-NE', 'ha-NG', 'haw', 'haw-US', 'he', 'he-IL', 'hi', 'hi-IN', 'hr', 'hr-BA', 'hr-HR', 'hsb', 'hsb-DE', 'hu', 'hu-HU', 'hy', 'hy-AM', 'ia', 'ia-001', 'id', 'id-ID', 'ig', 'ig-NG', 'ii', 'ii-CN', 'is', 'is-IS', 'it', 'it-CH', 'it-IT', 'it-SM', 'it-VA', 'ja', 'ja-JP', 'jgo', 'jgo-CM', 'jmc', 'jmc-TZ', 'jv', 'jv-ID', 'ka', 'ka-GE', 'kab', 'kab-DZ', 'kam', 'kam-KE', 'kde', 'kde-TZ', 'kea', 'kea-CV', 'khq', 'khq-ML', 'ki', 'ki-KE', 'kk', 'kk-KZ', 'kkj', 'kkj-CM', 'kl', 'kl-GL', 'kln', 'kln-KE', 'km', 'km-KH', 'kn', 'kn-IN', 'ko', 'ko-KP', 'ko-KR', 'kok', 'kok-IN', 'ks', 'ks-IN', 'ksb', 'ksb-TZ', 'ksf', 'ksf-CM', 'ksh', 'ksh-DE', 'ku', 'ku-TR', 'kw', 'kw-GB', 'ky', 'ky-KG', 'lag', 'lag-TZ', 'lb', 'lb-LU', 'lg', 'lg-UG', 'lkt', 'lkt-US', 'ln', 'ln-AO', 'ln-CD', 'ln-CF', 'ln-CG', 'lo', 'lo-LA', 'lrc', 'lrc-IQ', 'lrc-IR', 'lt', 'lt-LT', 'lu', 'lu-CD', 'luo', 'luo-KE', 'luy', 'luy-KE', 'lv', 'lv-LV', 'mas', 'mas-KE', 'mas-TZ', 'mer', 'mer-KE', 'mfe', 'mfe-MU', 'mg', 'mg-MG', 'mgh', 'mgh-MZ', 'mgo', 'mgo-CM', 'mi', 'mi-NZ', 'mk', 'mk-MK', 'ml', 'ml-IN', 'mn', 'mn-MN', 'mr', 'mr-IN', 'ms', 'ms-BN', 'ms-MY', 'ms-SG', 'mt', 'mt-MT', 'mua', 'mua-CM', 'my', 'my-MM', 'mzn', 'mzn-IR', 'naq', 'naq-NA', 'nb', 'nb-NO', 'nb-SJ', 'nd', 'nd-ZW', 'nds', 'nds-DE', 'nds-NL', 'ne', 'ne-IN', 'ne-NP', 'nl', 'nl-AW', 'nl-BE', 'nl-BQ', 'nl-CW', 'nl-NL', 'nl-SR', 'nl-SX', 'nmg', 'nmg-CM', 'nn', 'nn-NO', 'nnh', 'nnh-CM', 'nus', 'nus-SS', 'nyn', 'nyn-UG', 'om', 'om-ET', 'om-KE', 'or', 'or-IN', 'os', 'os-GE', 'os-RU', 'pa', 'pa-Arab', 'pa-Arab-PK', 'pa-Guru', 'pa-Guru-IN', 'pl', 'pl-PL', 'prg', 'prg-001', 'ps', 'ps-AF', 'pt', 'pt-AO', 'pt-BR', 'pt-CH', 'pt-CV', 'pt-GQ', 'pt-GW', 'pt-LU', 'pt-MO', 'pt-MZ', 'pt-PT', 'pt-ST', 'pt-TL', 'qu', 'qu-BO', 'qu-EC', 'qu-PE', 'rm', 'rm-CH', 'rn', 'rn-BI', 'ro', 'ro-MD', 'ro-RO', 'rof', 'rof-TZ', 'root', 'ru', 'ru-BY', 'ru-KG', 'ru-KZ', 'ru-MD', 'ru-RU', 'ru-UA', 'rw', 'rw-RW', 'rwk', 'rwk-TZ', 'sah', 'sah-RU', 'saq', 'saq-KE', 'sbp', 'sbp-TZ', 'sd', 'sd-PK', 'se', 'se-FI', 'se-NO', 'se-SE', 'seh', 'seh-MZ', 'ses', 'ses-ML', 'sg', 'sg-CF', 'shi', 'shi-Latn', 'shi-Latn-MA', 'shi-Tfng', 'shi-Tfng-MA', 'si', 'si-LK', 'sk', 'sk-SK', 'sl', 'sl-SI', 'smn', 'smn-FI', 'sn', 'sn-ZW', 'so', 'so-DJ', 'so-ET', 'so-KE', 'so-SO', 'sq', 'sq-AL', 'sq-MK', 'sq-XK', 'sr', 'sr-Cyrl', 'sr-Cyrl-BA', 'sr-Cyrl-ME', 'sr-Cyrl-RS', 'sr-Cyrl-XK', 'sr-Latn', 'sr-Latn-BA', 'sr-Latn-ME', 'sr-Latn-RS', 'sr-Latn-XK', 'sv', 'sv-AX', 'sv-FI', 'sv-SE', 'sw', 'sw-CD', 'sw-KE', 'sw-TZ', 'sw-UG', 'ta', 'ta-IN', 'ta-LK', 'ta-MY', 'ta-SG', 'te', 'te-IN', 'teo', 'teo-KE', 'teo-UG', 'tg', 'tg-TJ', 'th', 'th-TH', 'ti', 'ti-ER', 'ti-ET', 'tk', 'tk-TM', 'to', 'to-TO', 'tr', 'tr-CY', 'tr-TR', 'tt', 'tt-RU', 'twq', 'twq-NE', 'tzm', 'tzm-MA', 'ug', 'ug-CN', 'uk', 'uk-UA', 'ur', 'ur-IN', 'ur-PK', 'uz', 'uz-Arab', 'uz-Arab-AF', 'uz-Cyrl', 'uz-Cyrl-UZ', 'uz-Latn', 'uz-Latn-UZ', 'vai', 'vai-Latn', 'vai-Latn-LR', 'vai-Vaii', 'vai-Vaii-LR', 'vi', 'vi-VN', 'vo', 'vo-001', 'vun', 'vun-TZ', 'wae', 'wae-CH', 'wo', 'wo-SN', 'xh', 'xh-ZA', 'xog', 'xog-UG', 'yav', 'yav-CM', 'yi', 'yi-001', 'yo', 'yo-BJ', 'yo-NG', 'yue', 'yue-Hans', 'yue-Hans-CN', 'yue-Hant', 'yue-Hant-HK', 'zgh', 'zgh-MA', 'zh', 'zh-Hans', 'zh-Hans-CN', 'zh-Hans-HK', 'zh-Hans-MO', 'zh-Hans-SG', 'zh-Hant', 'zh-Hant-HK', 'zh-Hant-MO', 'zh-Hant-TW', 'zu', 'zu-ZA'];
/**
 * We support IETF language tags for sign language (https://tools.ietf.org/html/rfc5646).
 *
 * For sign language translations of strings, you can use media URLs pointing to video, video
 * websites or description pictures. If there are several alternatives, it's best to point to a
 * video.
 */

var signLanguageCodes = ['ase', 'sgn-ase', 'sgn-ase-US', 'sgn-GH-EP', 'sgn-DZ', 'sgn-US', 'sgn-AR', 'sgn-AM', 'sgn-AU-NT', 'sgn-AU', 'sgn-AT', 'sgn-ID-BA', 'sgn-BE-VLG', 'sgn-BE-WAL', 'sgn-BO', 'sgn-BR', 'sgn-GB', 'sgn-BG', 'sgn-ES-CT', 'sgn-TD', 'sgn-CL', 'sgn-CN', 'sgn-CO', 'sgn-CR', 'sgn-CZ', 'sgn-DK', 'sgn-NL', 'sgn-EC', 'sgn-SV', 'sgn-CA-NU', 'sgn-ET', 'sgn-FI', 'sgn-CA-QC', 'sgn-FR', 'sgn-DE', 'sgn-GH', 'sgn-GR', 'sgn-GT', 'sgn-US-HI', 'sgn-HK', 'sgn-IS', 'sgn-ID', 'sgn-IN', 'sgn-IE', 'sgn-IL', 'sgn-IT', 'sgn-JM', 'sgn-JP', 'sgn-JO', 'sgn-KE', 'sgn-KR', 'sgn-MY-B', 'sgn-LV', 'sgn-LY', 'sgn-LT', 'sgn-FR-69', 'sgn-MY', 'sgn-MT', 'sgn-US-MA', 'sgn-MX-YUC', 'sgn-MX', 'sgn-VA', 'sgn-MN', 'sgn-MA', 'sgn-NA', 'sgn-NP', 'sgn-NZ', 'sgn-NI', 'sgn-NG', 'sgn-NO', 'sgn-CA-NS', 'sgn-GB-KEN', 'sgn-MY-P', 'sgn-IR', 'sgn-PE', 'sgn-PH', 'sgn-US-SD', 'sgn-PL', 'sgn-PT', 'sgn-CO-SAP', 'sgn-PR', 'sgn-SB', 'sgn-RO', 'sgn-RU', 'sgn-SA', 'sgn-SE-crp', 'sgn-SG', 'sgn-SK', 'sgn-ZA', 'sgn-ES', 'sgn-LK', 'sgn-SE', 'sgn-CH-GE', 'sgn-CH-ZH', 'sgn-CH-TI', 'sgn-TW', 'sgn-TZ', 'sgn-TH', 'sgn-TN', 'sgn-TR', 'sgn-UG', 'sgn-UA', 'sgn-BR-MA', 'sgn-UY', 'sgn-VE', 'sgn-IL-yid', 'sgn-YU', 'sgn-ZM', 'sgn-ZW', 'sgn-afr-ZA', 'sgn-chi-TW', 'sgn-dan-DK', 'sgn-dut-BE', 'sgn-dut-NL', 'sgn-eng-GB', 'sgn-eng-IE', 'sgn-eng-US', 'sgn-fin-FI', 'sgn-fre-BE', 'sgn-fre-CA', 'sgn-fre-FR', 'sgn-jpn-JP', 'sgn-nor-NO', 'sgn-por-PT', 'sgn-swe-SE'];
/**
 * We assume that IETF language tags will be extended with sign language codes (as proposed by
 * http://www.evertype.com/standards/iso639/sign-language.html) eventually, so our language tags
 * support them already.
 *
 * For sign language translations of strings, you can use media URLs pointing to videos or
 * description pictures.
 */

var ietfLanguageTagsAndSignLanguageCodes = ietfLanguageTags.concat(signLanguageCodes);

function _templateObject9$5() {
  var data = _taggedTemplateLiteral(["Language"]);

  _templateObject9$5 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$5() {
  var data = _taggedTemplateLiteral(["Which languages do the staff speak (including sign language variants)?"]);

  _templateObject8$5 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$5() {
  var data = _taggedTemplateLiteral(["Is there a free assistant for visitors?"]);

  _templateObject7$5 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$6() {
  var data = _taggedTemplateLiteral(["Visitor Assistant"]);

  _templateObject6$6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$7() {
  var data = _taggedTemplateLiteral(["Is the staff trained in local sign languages?"]);

  _templateObject5$7 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$8() {
  var data = _taggedTemplateLiteral(["Signing training"]);

  _templateObject4$8 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$8() {
  var data = _taggedTemplateLiteral(["e.g. via a greeter or reception, a window or a always-monitored camera system"]);

  _templateObject3$8 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$9() {
  var data = _taggedTemplateLiteral(["Can the staff see visitors arriving?"]);

  _templateObject2$9 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$9() {
  var data = _taggedTemplateLiteral(["See From Inside"]);

  _templateObject$9 = function _templateObject() {
    return data;
  };

  return data;
}
/**
 * The StaffSchema allows easy validation, cleaning and checking of Staff objects.
 */

var StaffSchema = new SimpleSchema({
  canSeeVisitorsFromInside: {
    type: Boolean,
    label: t(_templateObject$9()),
    accessibility: {
      question: t(_templateObject2$9()),
      description: t(_templateObject3$8())
    },
    optional: true
  },
  isTrainedInSigning: {
    type: Boolean,
    label: t(_templateObject4$8()),
    accessibility: {
      question: t(_templateObject5$7())
    },
    optional: true
  },
  hasFreeAssistantForVisitors: {
    type: Boolean,
    label: t(_templateObject6$6()),
    accessibility: {
      question: t(_templateObject7$5())
    },
    optional: true
  },
  spokenLanguages: {
    type: Array,
    defaultValue: [],
    optional: true,
    accessibility: {
      question: t(_templateObject8$5())
    }
  },
  'spokenLanguages.$': {
    type: String,
    label: t(_templateObject9$5()),
    allowedValues: ietfLanguageTagsAndSignLanguageCodes
  }
});

function _templateObject4$9() {
  var data = _taggedTemplateLiteral(["Is there additional space for an assistant for each seat?"]);

  _templateObject4$9 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$9() {
  var data = _taggedTemplateLiteral(["Assistant Space"]);

  _templateObject3$9 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$a() {
  var data = _taggedTemplateLiteral(["How many wheelchair places are there?"]);

  _templateObject2$a = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$a() {
  var data = _taggedTemplateLiteral(["Number Of Places"]);

  _templateObject$a = function _templateObject() {
    return data;
  };

  return data;
}
/**
 * The WheelchairPlacesSchema allows easy validation, cleaning and checking of WheelchairPlaces objects.
 */

var WheelchairPlacesSchema = new SimpleSchema({
  count: {
    type: SimpleSchema.Integer,
    label: t(_templateObject$a()),
    accessibility: {
      question: t(_templateObject2$a())
    },
    min: 0
  },
  hasSpaceForAssistant: {
    type: Boolean,
    label: t(_templateObject3$9()),
    accessibility: {
      question: t(_templateObject4$9())
    },
    optional: true
  }
});

function _templateObject32() {
  var data = _taggedTemplateLiteral(["How much space for turning is in front of the media?"]);

  _templateObject32 = function _templateObject32() {
    return data;
  };

  return data;
}

function _templateObject31() {
  var data = _taggedTemplateLiteral(["Language"]);

  _templateObject31 = function _templateObject31() {
    return data;
  };

  return data;
}

function _templateObject30() {
  var data = _taggedTemplateLiteral(["What are the available languages?"]);

  _templateObject30 = function _templateObject30() {
    return data;
  };

  return data;
}

function _templateObject29() {
  var data = _taggedTemplateLiteral(["Languages"]);

  _templateObject29 = function _templateObject29() {
    return data;
  };

  return data;
}

function _templateObject28() {
  var data = _taggedTemplateLiteral(["Is there a plain language option?"]);

  _templateObject28 = function _templateObject28() {
    return data;
  };

  return data;
}

function _templateObject27() {
  var data = _taggedTemplateLiteral(["Plain Language Option"]);

  _templateObject27 = function _templateObject27() {
    return data;
  };

  return data;
}

function _templateObject26() {
  var data = _taggedTemplateLiteral(["Is there real time captioning?"]);

  _templateObject26 = function _templateObject26() {
    return data;
  };

  return data;
}

function _templateObject25() {
  var data = _taggedTemplateLiteral(["Real-time Captioning"]);

  _templateObject25 = function _templateObject25() {
    return data;
  };

  return data;
}

function _templateObject24() {
  var data = _taggedTemplateLiteral(["Are there subtitles?"]);

  _templateObject24 = function _templateObject24() {
    return data;
  };

  return data;
}

function _templateObject23() {
  var data = _taggedTemplateLiteral(["Subtitles"]);

  _templateObject23 = function _templateObject23() {
    return data;
  };

  return data;
}

function _templateObject22() {
  var data = _taggedTemplateLiteral(["Is there a dedicated screen for subtitles."]);

  _templateObject22 = function _templateObject22() {
    return data;
  };

  return data;
}

function _templateObject21() {
  var data = _taggedTemplateLiteral(["Dedicated Subtitle Screen"]);

  _templateObject21 = function _templateObject21() {
    return data;
  };

  return data;
}

function _templateObject20() {
  var data = _taggedTemplateLiteral(["Is the print on a contrasting background?"]);

  _templateObject20 = function _templateObject20() {
    return data;
  };

  return data;
}

function _templateObject19() {
  var data = _taggedTemplateLiteral(["Contrasting Background"]);

  _templateObject19 = function _templateObject19() {
    return data;
  };

  return data;
}

function _templateObject18() {
  var data = _taggedTemplateLiteral(["Is there a large print version available?"]);

  _templateObject18 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17() {
  var data = _taggedTemplateLiteral(["Large Print"]);

  _templateObject17 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16() {
  var data = _taggedTemplateLiteral(["Is there an audio version available?"]);

  _templateObject16 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15() {
  var data = _taggedTemplateLiteral(["Audio"]);

  _templateObject15 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14$1() {
  var data = _taggedTemplateLiteral(["Is there a braille version available?"]);

  _templateObject14$1 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13$2() {
  var data = _taggedTemplateLiteral(["Braille"]);

  _templateObject13$2 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12$2() {
  var data = _taggedTemplateLiteral(["e.g. 'daily menu' or 'park guide'"]);

  _templateObject12$2 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11$3() {
  var data = _taggedTemplateLiteral(["What the name of the"]);

  _templateObject11$3 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10$4() {
  var data = _taggedTemplateLiteral(["Media Name"]);

  _templateObject10$4 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$6() {
  var data = _taggedTemplateLiteral(["screen"]);

  _templateObject9$6 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$6() {
  var data = _taggedTemplateLiteral(["movie"]);

  _templateObject8$6 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$6() {
  var data = _taggedTemplateLiteral(["exhibit"]);

  _templateObject7$6 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$7() {
  var data = _taggedTemplateLiteral(["presentation"]);

  _templateObject6$7 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$8() {
  var data = _taggedTemplateLiteral(["guide"]);

  _templateObject5$8 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$a() {
  var data = _taggedTemplateLiteral(["menu"]);

  _templateObject4$a = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$a() {
  var data = _taggedTemplateLiteral(["document"]);

  _templateObject3$a = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$b() {
  var data = _taggedTemplateLiteral(["What kind of media is described?"]);

  _templateObject2$b = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$b() {
  var data = _taggedTemplateLiteral(["Media Type"]);

  _templateObject$b = function _templateObject() {
    return data;
  };

  return data;
}
var MediaSchema = new SimpleSchema({
  type: {
    type: String,
    label: t(_templateObject$b()),
    allowedValues: ['document', 'menu', 'guide', 'presentation', 'exhibit', 'movie', 'play', 'screen'],
    accessibility: {
      question: t(_templateObject2$b()),
      options: [{
        value: 'document',
        label: t(_templateObject3$a())
      }, {
        value: 'menu',
        label: t(_templateObject4$a())
      }, {
        value: 'guide',
        label: t(_templateObject5$8())
      }, {
        value: 'presentation',
        label: t(_templateObject6$7())
      }, {
        value: 'exhibit',
        label: t(_templateObject7$6())
      }, {
        value: 'movie',
        label: t(_templateObject8$6())
      }, {
        value: 'screen',
        label: t(_templateObject9$6())
      }]
    }
  },
  name: {
    type: LocalizedStringSchema,
    label: t(_templateObject10$4()),
    optional: true,
    accessibility: {
      question: t(_templateObject11$3()),
      description: t(_templateObject12$2())
    }
  },
  isBraille: {
    type: Boolean,
    label: t(_templateObject13$2()),
    optional: true,
    accessibility: {
      question: t(_templateObject14$1())
    }
  },
  isAudio: {
    type: Boolean,
    label: t(_templateObject15()),
    optional: true,
    accessibility: {
      question: t(_templateObject16())
    }
  },
  isLargePrint: {
    type: Boolean,
    label: t(_templateObject17()),
    optional: true,
    accessibility: {
      question: t(_templateObject18())
    }
  },
  hasContrastingBackground: {
    type: Boolean,
    label: t(_templateObject19()),
    optional: true,
    accessibility: {
      question: t(_templateObject20())
    }
  },
  hasDedicatedScreenForSubtitles: {
    type: Boolean,
    label: t(_templateObject21()),
    optional: true,
    accessibility: {
      question: t(_templateObject22())
    }
  },
  hasSubtitles: {
    type: Boolean,
    label: t(_templateObject23()),
    optional: true,
    accessibility: {
      question: t(_templateObject24())
    }
  },
  hasRealTimeCaptioning: {
    type: Boolean,
    label: t(_templateObject25()),
    optional: true,
    accessibility: {
      question: t(_templateObject26())
    }
  },
  // There are no standardized language codes for this yet, so this needs to be an extra flag for now.
  hasPlainLanguageOption: {
    type: Boolean,
    label: t(_templateObject27()),
    optional: true,
    accessibility: {
      question: t(_templateObject28())
    }
  },
  languages: {
    type: Array,
    label: t(_templateObject29()),
    optional: true,
    accessibility: {
      question: t(_templateObject30())
    }
  },
  'languages.$': {
    type: String,
    label: t(_templateObject31()),
    allowedValues: ietfLanguageTagsAndSignLanguageCodes
  },
  turningSpaceInFront: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject32())
  })
});

function _templateObject18$1() {
  var data = _taggedTemplateLiteral(["What is the custom information?"]);

  _templateObject18$1 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17$1() {
  var data = _taggedTemplateLiteral(["Custom Payment Information"]);

  _templateObject17$1 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16$1() {
  var data = _taggedTemplateLiteral(["e.g. additional phone numbers, parking lot IDs etc."]);

  _templateObject16$1 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15$1() {
  var data = _taggedTemplateLiteral(["Is there additional custom payment information?"]);

  _templateObject15$1 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14$2() {
  var data = _taggedTemplateLiteral(["Is there custom payment information?"]);

  _templateObject14$2 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13$3() {
  var data = _taggedTemplateLiteral(["Custom Payment Information"]);

  _templateObject13$3 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12$3() {
  var data = _taggedTemplateLiteral(["Is payment by bills accepted?"]);

  _templateObject12$3 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11$4() {
  var data = _taggedTemplateLiteral(["Bills"]);

  _templateObject11$4 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10$5() {
  var data = _taggedTemplateLiteral(["Is payment by coins accepted?"]);

  _templateObject10$5 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$7() {
  var data = _taggedTemplateLiteral(["Coins"]);

  _templateObject9$7 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$7() {
  var data = _taggedTemplateLiteral(["Is payment by debit card accepted?"]);

  _templateObject8$7 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$7() {
  var data = _taggedTemplateLiteral(["Debit Cards"]);

  _templateObject7$7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$8() {
  var data = _taggedTemplateLiteral(["Is payment by credit card accepted?"]);

  _templateObject6$8 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$9() {
  var data = _taggedTemplateLiteral(["Credit Cards"]);

  _templateObject5$9 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$b() {
  var data = _taggedTemplateLiteral(["Is payment by mobile phone accepted?"]);

  _templateObject4$b = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$b() {
  var data = _taggedTemplateLiteral(["Mobile Phone Payment"]);

  _templateObject3$b = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$c() {
  var data = _taggedTemplateLiteral(["Is there a portable payment system?"]);

  _templateObject2$c = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$c() {
  var data = _taggedTemplateLiteral(["Portable Payment System"]);

  _templateObject$c = function _templateObject() {
    return data;
  };

  return data;
}
var PaymentSchema = new SimpleSchema({
  hasPortablePaymentSystem: {
    type: Boolean,
    label: t(_templateObject$c()),
    optional: true,
    accessibility: {
      question: t(_templateObject2$c())
    }
  },
  acceptsPaymentByMobilePhone: {
    type: Boolean,
    label: t(_templateObject3$b()),
    optional: true,
    accessibility: {
      question: t(_templateObject4$b())
    }
  },
  acceptsCreditCards: {
    type: Boolean,
    label: t(_templateObject5$9()),
    optional: true,
    accessibility: {
      question: t(_templateObject6$8())
    }
  },
  acceptsDebitCards: {
    type: Boolean,
    label: t(_templateObject7$7()),
    optional: true,
    accessibility: {
      question: t(_templateObject8$7())
    }
  },
  acceptsCoins: {
    type: Boolean,
    label: t(_templateObject9$7()),
    optional: true,
    accessibility: {
      question: t(_templateObject10$5())
    }
  },
  acceptsBills: {
    type: Boolean,
    label: t(_templateObject11$4()),
    optional: true,
    accessibility: {
      question: t(_templateObject12$3())
    }
  },
  customPaymentMetaInfo: {
    type: Array,
    label: t(_templateObject13$3()),
    optional: true,
    accessibility: {
      question: t(_templateObject14$2()),
      questionMore: t(_templateObject15$1()),
      description: t(_templateObject16$1())
    }
  },
  'customPaymentMetaInfo.$': {
    type: LocalizedStringSchema,
    label: t(_templateObject17$1()),
    accessibility: {
      question: t(_templateObject18$1())
    }
  }
});

function _templateObject4$c() {
  var data = _taggedTemplateLiteral(["How deep is the free space below the table?"]);

  _templateObject4$c = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$c() {
  var data = _taggedTemplateLiteral(["How wide is the free space below the table?"]);

  _templateObject3$c = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$d() {
  var data = _taggedTemplateLiteral(["How high is the free space below the table?"]);

  _templateObject2$d = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$d() {
  var data = _taggedTemplateLiteral(["How high is the table?"]);

  _templateObject$d = function _templateObject() {
    return data;
  };

  return data;
}
var TablesSchema = new SimpleSchema({
  height: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject$d())
  }),
  spaceBelowHeight: quantityDefinition(LengthSchema, false, {
    question: t(_templateObject2$d())
  }),
  spaceBelowWidth: quantityDefinition(LengthSchema, false, {
    question: t(_templateObject3$c())
  }),
  spaceBelowDepth: quantityDefinition(LengthSchema, false, {
    question: t(_templateObject4$c())
  })
});
var AccessibleTablesPrefab = {
  height: {
    operator: '>=',
    value: 72,
    unit: 'cm'
  },
  spaceBelowHeight: {
    operator: '>=',
    value: 70,
    unit: 'cm'
  },
  spaceBelowWidth: {
    operator: '>=',
    value: 80,
    unit: 'cm'
  },
  spaceBelowDepth: {
    operator: '>=',
    value: 50,
    unit: 'cm'
  }
};

function _templateObject6$9() {
  var data = _taggedTemplateLiteral(["Grade in percent as calculated by `100 * rise / run` or the tangent of the angle of inclination, multiplied by 100"], ["Grade in percent as calculated by \\`100 * rise / run\\` or the tangent of the angle of inclination, multiplied by 100"]);

  _templateObject6$9 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$a() {
  var data = _taggedTemplateLiteral(["What is the angle of the lateral slope?"]);

  _templateObject5$a = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$d() {
  var data = _taggedTemplateLiteral(["Grade in percent as calculated by `100 * rise / run` or the tangent of the angle of inclination, multiplied by 100"], ["Grade in percent as calculated by \\`100 * rise / run\\` or the tangent of the angle of inclination, multiplied by 100"]);

  _templateObject4$d = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$d() {
  var data = _taggedTemplateLiteral(["What is the angle of the longitudinal slope?"]);

  _templateObject3$d = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$e() {
  var data = _taggedTemplateLiteral(["What is the minimum width at obstacles?"]);

  _templateObject2$e = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$e() {
  var data = _taggedTemplateLiteral(["How wide are the aisles or pathways?"]);

  _templateObject$e = function _templateObject() {
    return data;
  };

  return data;
}
// https://register.apple.com/resources/imdf/Relationship/
// and
// https://docs.google.com/document/d/1qJOTe4m_a4dcJnvXYt4smYj4QQ1ejZ8CvLBYzDM5IyM

var PathwaysSchema = new SimpleSchema({
  width: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject$e())
  }),
  widthAtObstacles: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject2$e())
  }),
  maxLongitudinalSlope: {
    type: Number,
    optional: true,
    accessibility: {
      question: t(_templateObject3$d()),
      description: t(_templateObject4$d())
    }
  },
  maxLateralSlope: {
    type: Number,
    optional: true,
    accessibility: {
      question: t(_templateObject5$a()),
      description: t(_templateObject6$9())
    }
  }
});

function _templateObject13$4() {
  var data = _taggedTemplateLiteral(["Is there parking for wheelchair users?"]);

  _templateObject13$4 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12$4() {
  var data = _taggedTemplateLiteral(["Which permit is needed?"]);

  _templateObject12$4 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11$5() {
  var data = _taggedTemplateLiteral(["Are any special parking permits required?"]);

  _templateObject11$5 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10$6() {
  var data = _taggedTemplateLiteral(["Is there payment by parking zone?"]);

  _templateObject10$6 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$8() {
  var data = _taggedTemplateLiteral(["Is there payment by parking space?"]);

  _templateObject9$8 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$8() {
  var data = _taggedTemplateLiteral(["Is there dedicated disabled parking signage?"]);

  _templateObject8$8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$8() {
  var data = _taggedTemplateLiteral(["What is the max vehicle height of the parking spaces?"]);

  _templateObject7$8 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$a() {
  var data = _taggedTemplateLiteral(["How long are the parking spaces?"]);

  _templateObject6$a = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$b() {
  var data = _taggedTemplateLiteral(["How wide are the parking spaces?"]);

  _templateObject5$b = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$e() {
  var data = _taggedTemplateLiteral(["Are the parking spaces located inside?"]);

  _templateObject4$e = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$e() {
  var data = _taggedTemplateLiteral(["How many wheelchair accessible parking spaces are there?"]);

  _templateObject3$e = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$f() {
  var data = _taggedTemplateLiteral(["How far away is the parking from the main entrance?"]);

  _templateObject2$f = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$f() {
  var data = _taggedTemplateLiteral(["Where is the parking located?"]);

  _templateObject$f = function _templateObject() {
    return data;
  };

  return data;
}
var WheelchairParkingSchema = new SimpleSchema({
  location: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject$f())
    }
  },
  distanceToEntrance: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject2$f())
  }),
  count: {
    type: Number,
    optional: true,
    accessibility: {
      question: t(_templateObject3$e())
    },
    min: 0
  },
  isLocatedInside: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject4$e())
    }
  },
  width: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject5$b())
  }),
  length: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject6$a())
  }),
  maxVehicleHeight: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject7$8())
  }),
  hasDedicatedSignage: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject8$8())
    }
  },
  paymentBySpace: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject9$8())
    }
  },
  paymentByZone: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject10$6())
    }
  },
  neededParkingPermits: {
    type: Array,
    optional: true,
    accessibility: {
      question: t(_templateObject11$5())
    }
  },
  'neededParkingPermits.$': {
    type: LocalizedStringSchema,
    accessibility: {
      question: t(_templateObject12$4())
    }
  }
});
var ParkingSchema = new SimpleSchema({
  forWheelchairUsers: {
    type: WheelchairParkingSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject13$4())
    }
  }
});

function _templateObject7$9() {
  var data = _taggedTemplateLiteral(["How much space for turning is there?"]);

  _templateObject7$9 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$b() {
  var data = _taggedTemplateLiteral(["How far is the entrance from the next dropped curb?"]);

  _templateObject6$b = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$c() {
  var data = _taggedTemplateLiteral(["Is the pavement even, ie. no cobble stones?"]);

  _templateObject5$c = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$f() {
  var data = _taggedTemplateLiteral(["What is the angle of the slope?"]);

  _templateObject4$f = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$f() {
  var data = _taggedTemplateLiteral(["Grade in percent as calculated by `100 * rise / run` or the tangent of the angle of inclination times 100"], ["Grade in percent as calculated by \\`100 * rise / run\\` or the tangent of the angle of inclination times 100"]);

  _templateObject3$f = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$g() {
  var data = _taggedTemplateLiteral(["Is the ground level?"]);

  _templateObject2$g = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$g() {
  var data = _taggedTemplateLiteral(["How would you rate the conditions of the sidewalk?"]);

  _templateObject$g = function _templateObject() {
    return data;
  };

  return data;
}
var GroundSchema = new SimpleSchema({
  sidewalkConditions: {
    type: Number,
    optional: true,
    min: 0,
    max: 1,
    accessibility: {
      question: t(_templateObject$g()),
      componentHint: 'StarRating'
    }
  },
  isLevel: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject2$g())
    }
  },
  slopeAngle: {
    type: Number,
    optional: true,
    accessibility: {
      description: t(_templateObject3$f()),
      question: t(_templateObject4$f())
    }
  },
  evenPavement: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject5$c())
    }
  },
  distanceToDroppedCurb: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject6$b())
  }),
  turningSpace: quantityDefinition(LengthSchema, true, {
    question: t(_templateObject7$9())
  })
});

function _templateObject6$c() {
  var data = _taggedTemplateLiteral(["Does this place supply water for pets?"]);

  _templateObject6$c = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$d() {
  var data = _taggedTemplateLiteral(["Does this place allow any kind of pets?"]);

  _templateObject5$d = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$g() {
  var data = _taggedTemplateLiteral(["Does this place enforce that dogs wear a muzzle?"]);

  _templateObject4$g = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$g() {
  var data = _taggedTemplateLiteral(["Does this place allow visitors to bring dogs?"]);

  _templateObject3$g = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$h() {
  var data = _taggedTemplateLiteral(["Does this place allow therapy animals?"]);

  _templateObject2$h = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$h() {
  var data = _taggedTemplateLiteral(["Does this place allow guide dogs?"]);

  _templateObject$h = function _templateObject() {
    return data;
  };

  return data;
}
var AnimalPolicySchema = new SimpleSchema({
  allowsGuideDogs: {
    type: Boolean,
    accessibility: {
      question: t(_templateObject$h())
    }
  },
  allowsServiceAnimals: {
    type: Boolean,
    accessibility: {
      question: t(_templateObject2$h())
    }
  },
  allowsDogs: {
    type: Boolean,
    accessibility: {
      question: t(_templateObject3$g())
    }
  },
  dogsNeedMuzzle: {
    type: Boolean,
    accessibility: {
      question: t(_templateObject4$g())
    }
  },
  allowsAnyPets: {
    type: Boolean,
    accessibility: {
      question: t(_templateObject5$d())
    }
  },
  suppliesWaterForPets: {
    type: Boolean,
    accessibility: {
      question: t(_templateObject6$c())
    }
  }
});

function _templateObject6$d() {
  var data = _taggedTemplateLiteral(["only outside"]);

  _templateObject6$d = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$e() {
  var data = _taggedTemplateLiteral(["prohibited"]);

  _templateObject5$e = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$h() {
  var data = _taggedTemplateLiteral(["only allowed in isolated area"]);

  _templateObject4$h = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$h() {
  var data = _taggedTemplateLiteral(["only allowed in separate (but not isolated) area"]);

  _templateObject3$h = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$i() {
  var data = _taggedTemplateLiteral(["allowed everywhere"]);

  _templateObject2$i = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$i() {
  var data = _taggedTemplateLiteral(["dedicated to smoking"]);

  _templateObject$i = function _templateObject() {
    return data;
  };

  return data;
}
var smokingPolicies = [{
  label: t(_templateObject$i()),
  value: 'dedicatedToSmoking'
}, {
  label: t(_templateObject2$i()),
  value: 'allowedEverywhere'
}, {
  label: t(_templateObject3$h()),
  value: 'inSeparateArea'
}, {
  label: t(_templateObject4$h()),
  value: 'inIsolatedArea'
}, {
  label: t(_templateObject5$e()),
  value: 'prohibited'
}, {
  label: t(_templateObject6$d()),
  value: 'onlyOutside'
}];

function _templateObject23$1() {
  var data = _taggedTemplateLiteral(["How can the service staff be reached?"]);

  _templateObject23$1 = function _templateObject23() {
    return data;
  };

  return data;
}

function _templateObject22$1() {
  var data = _taggedTemplateLiteral(["Accessible table"]);

  _templateObject22$1 = function _templateObject22() {
    return data;
  };

  return data;
}

function _templateObject21$1() {
  var data = _taggedTemplateLiteral(["Are there any tables here?"]);

  _templateObject21$1 = function _templateObject21() {
    return data;
  };

  return data;
}

function _templateObject20$1() {
  var data = _taggedTemplateLiteral(["Would you like to rate another restroom?"]);

  _templateObject20$1 = function _templateObject20() {
    return data;
  };

  return data;
}

function _templateObject19$1() {
  var data = _taggedTemplateLiteral(["Would you like to rate the accessibility of the restroom?"]);

  _templateObject19$1 = function _templateObject19() {
    return data;
  };

  return data;
}

function _templateObject18$2() {
  var data = _taggedTemplateLiteral(["Restrooms"]);

  _templateObject18$2 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17$2() {
  var data = _taggedTemplateLiteral(["Would you like to rate another entrance?"]);

  _templateObject17$2 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16$2() {
  var data = _taggedTemplateLiteral(["Would you like to rate the first entrance?"]);

  _templateObject16$2 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15$2() {
  var data = _taggedTemplateLiteral(["Entrances"]);

  _templateObject15$2 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14$3() {
  var data = _taggedTemplateLiteral(["What is the animal policy of this place?"]);

  _templateObject14$3 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13$5() {
  var data = _taggedTemplateLiteral(["Is smoking allowed here?"]);

  _templateObject13$5 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12$5() {
  var data = _taggedTemplateLiteral(["Does this place have induction loops?"]);

  _templateObject12$5 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11$6() {
  var data = _taggedTemplateLiteral(["Is the place quiet?"]);

  _templateObject11$6 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10$7() {
  var data = _taggedTemplateLiteral(["Is the place well lit?"]);

  _templateObject10$7 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$9() {
  var data = _taggedTemplateLiteral(["How spacious is this place?"]);

  _templateObject9$9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$9() {
  var data = _taggedTemplateLiteral(["In which condition is the ground you have to traverse to get here?"]);

  _templateObject8$9 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$a() {
  var data = _taggedTemplateLiteral(["Is there parking attached to this place?"]);

  _templateObject7$a = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$e() {
  var data = _taggedTemplateLiteral(["Is there any payment possible?"]);

  _templateObject6$e = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$f() {
  var data = _taggedTemplateLiteral(["e.g. menus, exhibits or presentations"]);

  _templateObject5$f = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$i() {
  var data = _taggedTemplateLiteral(["Is there more media available?"]);

  _templateObject4$i = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$i() {
  var data = _taggedTemplateLiteral(["Is there any media available?"]);

  _templateObject3$i = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$j() {
  var data = _taggedTemplateLiteral(["Are there any spaces reserved for people in wheelchairs?"]);

  _templateObject2$j = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$j() {
  var data = _taggedTemplateLiteral(["Is there any staff on the premises?"]);

  _templateObject$j = function _templateObject() {
    return data;
  };

  return data;
}
var AccessibilitySchema = new SimpleSchema({
  accessibleWith: {
    type: PersonalProfileSchema,
    optional: true,
    accessibility: {
      deprecated: true
    }
  },
  partiallyAccessibleWith: {
    type: PersonalProfileSchema,
    optional: true,
    accessibility: {
      deprecated: true
    }
  },
  offersActivitiesForPeopleWith: {
    type: PersonalProfileSchema,
    optional: true,
    accessibility: {
      deprecated: true
    }
  },
  staff: {
    type: StaffSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject$j())
    }
  },
  wheelchairPlaces: {
    type: WheelchairPlacesSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject2$j())
    }
  },
  media: {
    type: Array,
    optional: true,
    accessibility: {
      question: t(_templateObject3$i()),
      questionMore: t(_templateObject4$i()),
      description: t(_templateObject5$f())
    }
  },
  'media.$': {
    type: MediaSchema
  },
  payment: {
    type: PaymentSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject6$e())
    }
  },
  parking: {
    type: ParkingSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject7$a())
    }
  },
  ground: {
    type: GroundSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject8$9())
    }
  },
  ratingSpacious: {
    type: Number,
    optional: true,
    min: 0,
    max: 1,
    accessibility: {
      deprecated: true,
      question: t(_templateObject9$9()),
      componentHint: 'StarRating'
    }
  },
  isWellLit: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject10$7())
    }
  },
  isQuiet: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject11$6())
    }
  },
  hasInductionLoop: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject12$5())
    }
  },
  // TODO: Causes test error. Fix this!
  // ambientNoiseLevel: quantityDefinition(LengthSchema, true, {
  //   question: t`How loud is the ambient noise here typically (A-Weighted)?`,
  //   machineData: true
  // }),
  smokingPolicy: {
    type: String,
    optional: true,
    allowedValues: smokingPolicies.map(function (s) {
      return s.value;
    }),
    accessibility: {
      question: t(_templateObject13$5()),
      options: smokingPolicies
    }
  },
  hasTactileGuideStrips: {
    type: Boolean,
    optional: true
  },
  animalPolicy: {
    type: AnimalPolicySchema,
    optional: true,
    accessibility: {
      question: t(_templateObject14$3())
    }
  },
  pathways: {
    type: PathwaysSchema,
    optional: true
  },
  entrances: {
    type: Array,
    optional: true,
    label: t(_templateObject15$2()),
    accessibility: {
      questionBlockBegin: t(_templateObject16$2()),
      questionMore: t(_templateObject17$2())
    }
  },
  'entrances.$': EntranceSchema,
  restrooms: {
    type: Array,
    optional: true,
    label: t(_templateObject18$2()),
    accessibility: {
      questionBlockBegin: t(_templateObject19$1()),
      questionMore: t(_templateObject20$1())
    }
  },
  'restrooms.$': RestroomSchema,
  tables: {
    type: TablesSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject21$1()),
      options: [{
        label: t(_templateObject22$1()),
        option: AccessibleTablesPrefab
      }]
    }
  },
  sitemap: {
    type: Object,
    optional: true
  },
  lifts: {
    type: Array,
    optional: true
  },
  'lifts.$': Object,
  switches: {
    type: Array,
    optional: true
  },
  'switches.$': Object,
  vendingMachines: {
    type: Array,
    optional: true
  },
  'vendingMachines.$': Object,
  powerOutlets: {
    type: Array,
    optional: true
  },
  'powerOutlets.$': Object,
  beds: {
    type: Array,
    optional: true
  },
  'beds.$': Object,
  wardrobe: {
    type: Object,
    optional: true
  },
  changingRoom: {
    type: Object,
    optional: true
  },
  stage: {
    type: Object,
    optional: true
  },
  cashRegister: {
    type: Object,
    optional: true
  },
  seats: {
    type: Object,
    optional: true
  },
  serviceContact: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject23$1())
    }
  },
  services: {
    type: Object,
    optional: true
  },
  infoDesk: {
    type: Object,
    optional: true
  },
  signage: {
    type: Object,
    optional: true
  }
});

function _templateObject249() {
  var data = _taggedTemplateLiteral(["Zimbabwe"]);

  _templateObject249 = function _templateObject249() {
    return data;
  };

  return data;
}

function _templateObject248() {
  var data = _taggedTemplateLiteral(["Zambia"]);

  _templateObject248 = function _templateObject248() {
    return data;
  };

  return data;
}

function _templateObject247() {
  var data = _taggedTemplateLiteral(["South Africa"]);

  _templateObject247 = function _templateObject247() {
    return data;
  };

  return data;
}

function _templateObject246() {
  var data = _taggedTemplateLiteral(["Yemen"]);

  _templateObject246 = function _templateObject246() {
    return data;
  };

  return data;
}

function _templateObject245() {
  var data = _taggedTemplateLiteral(["Samoa"]);

  _templateObject245 = function _templateObject245() {
    return data;
  };

  return data;
}

function _templateObject244() {
  var data = _taggedTemplateLiteral(["Wallis and Futuna"]);

  _templateObject244 = function _templateObject244() {
    return data;
  };

  return data;
}

function _templateObject243() {
  var data = _taggedTemplateLiteral(["Vanuatu"]);

  _templateObject243 = function _templateObject243() {
    return data;
  };

  return data;
}

function _templateObject242() {
  var data = _taggedTemplateLiteral(["VietNam"]);

  _templateObject242 = function _templateObject242() {
    return data;
  };

  return data;
}

function _templateObject241() {
  var data = _taggedTemplateLiteral(["Virgin Islands, U.S."]);

  _templateObject241 = function _templateObject241() {
    return data;
  };

  return data;
}

function _templateObject240() {
  var data = _taggedTemplateLiteral(["Virgin Islands, British"]);

  _templateObject240 = function _templateObject240() {
    return data;
  };

  return data;
}

function _templateObject239() {
  var data = _taggedTemplateLiteral(["Venezuela, Bolivarian Republic of"]);

  _templateObject239 = function _templateObject239() {
    return data;
  };

  return data;
}

function _templateObject238() {
  var data = _taggedTemplateLiteral(["Saint Vincent and the Grenadines"]);

  _templateObject238 = function _templateObject238() {
    return data;
  };

  return data;
}

function _templateObject237() {
  var data = _taggedTemplateLiteral(["Holy See"]);

  _templateObject237 = function _templateObject237() {
    return data;
  };

  return data;
}

function _templateObject236() {
  var data = _taggedTemplateLiteral(["Uzbekistan"]);

  _templateObject236 = function _templateObject236() {
    return data;
  };

  return data;
}

function _templateObject235() {
  var data = _taggedTemplateLiteral(["United States of America"]);

  _templateObject235 = function _templateObject235() {
    return data;
  };

  return data;
}

function _templateObject234() {
  var data = _taggedTemplateLiteral(["Uruguay"]);

  _templateObject234 = function _templateObject234() {
    return data;
  };

  return data;
}

function _templateObject233() {
  var data = _taggedTemplateLiteral(["United States Minor Outlying Islands"]);

  _templateObject233 = function _templateObject233() {
    return data;
  };

  return data;
}

function _templateObject232() {
  var data = _taggedTemplateLiteral(["Ukraine"]);

  _templateObject232 = function _templateObject232() {
    return data;
  };

  return data;
}

function _templateObject231() {
  var data = _taggedTemplateLiteral(["Uganda"]);

  _templateObject231 = function _templateObject231() {
    return data;
  };

  return data;
}

function _templateObject230() {
  var data = _taggedTemplateLiteral(["Tanzania, United Republic of"]);

  _templateObject230 = function _templateObject230() {
    return data;
  };

  return data;
}

function _templateObject229() {
  var data = _taggedTemplateLiteral(["Taiwan, Province of China"]);

  _templateObject229 = function _templateObject229() {
    return data;
  };

  return data;
}

function _templateObject228() {
  var data = _taggedTemplateLiteral(["Tuvalu"]);

  _templateObject228 = function _templateObject228() {
    return data;
  };

  return data;
}

function _templateObject227() {
  var data = _taggedTemplateLiteral(["Turkey"]);

  _templateObject227 = function _templateObject227() {
    return data;
  };

  return data;
}

function _templateObject226() {
  var data = _taggedTemplateLiteral(["Tunisia"]);

  _templateObject226 = function _templateObject226() {
    return data;
  };

  return data;
}

function _templateObject225() {
  var data = _taggedTemplateLiteral(["Trinidad and Tobago"]);

  _templateObject225 = function _templateObject225() {
    return data;
  };

  return data;
}

function _templateObject224() {
  var data = _taggedTemplateLiteral(["Tonga"]);

  _templateObject224 = function _templateObject224() {
    return data;
  };

  return data;
}

function _templateObject223() {
  var data = _taggedTemplateLiteral(["Timor-Leste"]);

  _templateObject223 = function _templateObject223() {
    return data;
  };

  return data;
}

function _templateObject222() {
  var data = _taggedTemplateLiteral(["Turkmenistan"]);

  _templateObject222 = function _templateObject222() {
    return data;
  };

  return data;
}

function _templateObject221() {
  var data = _taggedTemplateLiteral(["Tokelau"]);

  _templateObject221 = function _templateObject221() {
    return data;
  };

  return data;
}

function _templateObject220() {
  var data = _taggedTemplateLiteral(["Tajikistan"]);

  _templateObject220 = function _templateObject220() {
    return data;
  };

  return data;
}

function _templateObject219() {
  var data = _taggedTemplateLiteral(["Thailand"]);

  _templateObject219 = function _templateObject219() {
    return data;
  };

  return data;
}

function _templateObject218() {
  var data = _taggedTemplateLiteral(["Togo"]);

  _templateObject218 = function _templateObject218() {
    return data;
  };

  return data;
}

function _templateObject217() {
  var data = _taggedTemplateLiteral(["Chad"]);

  _templateObject217 = function _templateObject217() {
    return data;
  };

  return data;
}

function _templateObject216() {
  var data = _taggedTemplateLiteral(["Turks and Caicos Islands"]);

  _templateObject216 = function _templateObject216() {
    return data;
  };

  return data;
}

function _templateObject215() {
  var data = _taggedTemplateLiteral(["Syrian Arab Republic"]);

  _templateObject215 = function _templateObject215() {
    return data;
  };

  return data;
}

function _templateObject214() {
  var data = _taggedTemplateLiteral(["Seychelles"]);

  _templateObject214 = function _templateObject214() {
    return data;
  };

  return data;
}

function _templateObject213() {
  var data = _taggedTemplateLiteral(["Sint Maarten (Dutch part)"]);

  _templateObject213 = function _templateObject213() {
    return data;
  };

  return data;
}

function _templateObject212() {
  var data = _taggedTemplateLiteral(["Swaziland"]);

  _templateObject212 = function _templateObject212() {
    return data;
  };

  return data;
}

function _templateObject211() {
  var data = _taggedTemplateLiteral(["Sweden"]);

  _templateObject211 = function _templateObject211() {
    return data;
  };

  return data;
}

function _templateObject210() {
  var data = _taggedTemplateLiteral(["Slovenia"]);

  _templateObject210 = function _templateObject210() {
    return data;
  };

  return data;
}

function _templateObject209() {
  var data = _taggedTemplateLiteral(["Slovakia"]);

  _templateObject209 = function _templateObject209() {
    return data;
  };

  return data;
}

function _templateObject208() {
  var data = _taggedTemplateLiteral(["Suriname"]);

  _templateObject208 = function _templateObject208() {
    return data;
  };

  return data;
}

function _templateObject207() {
  var data = _taggedTemplateLiteral(["Sao Tome and Principe"]);

  _templateObject207 = function _templateObject207() {
    return data;
  };

  return data;
}

function _templateObject206() {
  var data = _taggedTemplateLiteral(["South Sudan"]);

  _templateObject206 = function _templateObject206() {
    return data;
  };

  return data;
}

function _templateObject205() {
  var data = _taggedTemplateLiteral(["Serbia"]);

  _templateObject205 = function _templateObject205() {
    return data;
  };

  return data;
}

function _templateObject204() {
  var data = _taggedTemplateLiteral(["Saint Pierre and Miquelon"]);

  _templateObject204 = function _templateObject204() {
    return data;
  };

  return data;
}

function _templateObject203() {
  var data = _taggedTemplateLiteral(["Somalia"]);

  _templateObject203 = function _templateObject203() {
    return data;
  };

  return data;
}

function _templateObject202() {
  var data = _taggedTemplateLiteral(["San Marino"]);

  _templateObject202 = function _templateObject202() {
    return data;
  };

  return data;
}

function _templateObject201() {
  var data = _taggedTemplateLiteral(["El Salvador"]);

  _templateObject201 = function _templateObject201() {
    return data;
  };

  return data;
}

function _templateObject200() {
  var data = _taggedTemplateLiteral(["Sierra Leone"]);

  _templateObject200 = function _templateObject200() {
    return data;
  };

  return data;
}

function _templateObject199() {
  var data = _taggedTemplateLiteral(["Solomon Islands"]);

  _templateObject199 = function _templateObject199() {
    return data;
  };

  return data;
}

function _templateObject198() {
  var data = _taggedTemplateLiteral(["Svalbard and Jan Mayen"]);

  _templateObject198 = function _templateObject198() {
    return data;
  };

  return data;
}

function _templateObject197() {
  var data = _taggedTemplateLiteral(["Saint Helena, Ascension and Tristan da Cunha"]);

  _templateObject197 = function _templateObject197() {
    return data;
  };

  return data;
}

function _templateObject196() {
  var data = _taggedTemplateLiteral(["South Georgia and the South Sandwich Islands"]);

  _templateObject196 = function _templateObject196() {
    return data;
  };

  return data;
}

function _templateObject195() {
  var data = _taggedTemplateLiteral(["Singapore"]);

  _templateObject195 = function _templateObject195() {
    return data;
  };

  return data;
}

function _templateObject194() {
  var data = _taggedTemplateLiteral(["Senegal"]);

  _templateObject194 = function _templateObject194() {
    return data;
  };

  return data;
}

function _templateObject193() {
  var data = _taggedTemplateLiteral(["Sudan"]);

  _templateObject193 = function _templateObject193() {
    return data;
  };

  return data;
}

function _templateObject192() {
  var data = _taggedTemplateLiteral(["Saudi Arabia"]);

  _templateObject192 = function _templateObject192() {
    return data;
  };

  return data;
}

function _templateObject191() {
  var data = _taggedTemplateLiteral(["Rwanda"]);

  _templateObject191 = function _templateObject191() {
    return data;
  };

  return data;
}

function _templateObject190() {
  var data = _taggedTemplateLiteral(["Russian Federation"]);

  _templateObject190 = function _templateObject190() {
    return data;
  };

  return data;
}

function _templateObject189() {
  var data = _taggedTemplateLiteral(["Romania"]);

  _templateObject189 = function _templateObject189() {
    return data;
  };

  return data;
}

function _templateObject188() {
  var data = _taggedTemplateLiteral(["R\xE9union"]);

  _templateObject188 = function _templateObject188() {
    return data;
  };

  return data;
}

function _templateObject187() {
  var data = _taggedTemplateLiteral(["Qatar"]);

  _templateObject187 = function _templateObject187() {
    return data;
  };

  return data;
}

function _templateObject186() {
  var data = _taggedTemplateLiteral(["French Polynesia"]);

  _templateObject186 = function _templateObject186() {
    return data;
  };

  return data;
}

function _templateObject185() {
  var data = _taggedTemplateLiteral(["Palestine, State of"]);

  _templateObject185 = function _templateObject185() {
    return data;
  };

  return data;
}

function _templateObject184() {
  var data = _taggedTemplateLiteral(["Paraguay"]);

  _templateObject184 = function _templateObject184() {
    return data;
  };

  return data;
}

function _templateObject183() {
  var data = _taggedTemplateLiteral(["Portugal"]);

  _templateObject183 = function _templateObject183() {
    return data;
  };

  return data;
}

function _templateObject182() {
  var data = _taggedTemplateLiteral(["Korea, Democratic People's Republic of"]);

  _templateObject182 = function _templateObject182() {
    return data;
  };

  return data;
}

function _templateObject181() {
  var data = _taggedTemplateLiteral(["Puerto Rico"]);

  _templateObject181 = function _templateObject181() {
    return data;
  };

  return data;
}

function _templateObject180() {
  var data = _taggedTemplateLiteral(["Poland"]);

  _templateObject180 = function _templateObject180() {
    return data;
  };

  return data;
}

function _templateObject179() {
  var data = _taggedTemplateLiteral(["Papua New Guinea"]);

  _templateObject179 = function _templateObject179() {
    return data;
  };

  return data;
}

function _templateObject178() {
  var data = _taggedTemplateLiteral(["Palau"]);

  _templateObject178 = function _templateObject178() {
    return data;
  };

  return data;
}

function _templateObject177() {
  var data = _taggedTemplateLiteral(["Philippines"]);

  _templateObject177 = function _templateObject177() {
    return data;
  };

  return data;
}

function _templateObject176() {
  var data = _taggedTemplateLiteral(["Peru"]);

  _templateObject176 = function _templateObject176() {
    return data;
  };

  return data;
}

function _templateObject175() {
  var data = _taggedTemplateLiteral(["Pitcairn"]);

  _templateObject175 = function _templateObject175() {
    return data;
  };

  return data;
}

function _templateObject174() {
  var data = _taggedTemplateLiteral(["Panama"]);

  _templateObject174 = function _templateObject174() {
    return data;
  };

  return data;
}

function _templateObject173() {
  var data = _taggedTemplateLiteral(["Pakistan"]);

  _templateObject173 = function _templateObject173() {
    return data;
  };

  return data;
}

function _templateObject172() {
  var data = _taggedTemplateLiteral(["Oman"]);

  _templateObject172 = function _templateObject172() {
    return data;
  };

  return data;
}

function _templateObject171() {
  var data = _taggedTemplateLiteral(["New Zealand"]);

  _templateObject171 = function _templateObject171() {
    return data;
  };

  return data;
}

function _templateObject170() {
  var data = _taggedTemplateLiteral(["Nauru"]);

  _templateObject170 = function _templateObject170() {
    return data;
  };

  return data;
}

function _templateObject169() {
  var data = _taggedTemplateLiteral(["Nepal"]);

  _templateObject169 = function _templateObject169() {
    return data;
  };

  return data;
}

function _templateObject168() {
  var data = _taggedTemplateLiteral(["Norway"]);

  _templateObject168 = function _templateObject168() {
    return data;
  };

  return data;
}

function _templateObject167() {
  var data = _taggedTemplateLiteral(["Netherlands"]);

  _templateObject167 = function _templateObject167() {
    return data;
  };

  return data;
}

function _templateObject166() {
  var data = _taggedTemplateLiteral(["Niue"]);

  _templateObject166 = function _templateObject166() {
    return data;
  };

  return data;
}

function _templateObject165() {
  var data = _taggedTemplateLiteral(["Nicaragua"]);

  _templateObject165 = function _templateObject165() {
    return data;
  };

  return data;
}

function _templateObject164() {
  var data = _taggedTemplateLiteral(["Nigeria"]);

  _templateObject164 = function _templateObject164() {
    return data;
  };

  return data;
}

function _templateObject163() {
  var data = _taggedTemplateLiteral(["Norfolk Island"]);

  _templateObject163 = function _templateObject163() {
    return data;
  };

  return data;
}

function _templateObject162() {
  var data = _taggedTemplateLiteral(["Niger"]);

  _templateObject162 = function _templateObject162() {
    return data;
  };

  return data;
}

function _templateObject161() {
  var data = _taggedTemplateLiteral(["New Caledonia"]);

  _templateObject161 = function _templateObject161() {
    return data;
  };

  return data;
}

function _templateObject160() {
  var data = _taggedTemplateLiteral(["Namibia"]);

  _templateObject160 = function _templateObject160() {
    return data;
  };

  return data;
}

function _templateObject159() {
  var data = _taggedTemplateLiteral(["Mayotte"]);

  _templateObject159 = function _templateObject159() {
    return data;
  };

  return data;
}

function _templateObject158() {
  var data = _taggedTemplateLiteral(["Malaysia"]);

  _templateObject158 = function _templateObject158() {
    return data;
  };

  return data;
}

function _templateObject157() {
  var data = _taggedTemplateLiteral(["Malawi"]);

  _templateObject157 = function _templateObject157() {
    return data;
  };

  return data;
}

function _templateObject156() {
  var data = _taggedTemplateLiteral(["Mauritius"]);

  _templateObject156 = function _templateObject156() {
    return data;
  };

  return data;
}

function _templateObject155() {
  var data = _taggedTemplateLiteral(["Martinique"]);

  _templateObject155 = function _templateObject155() {
    return data;
  };

  return data;
}

function _templateObject154() {
  var data = _taggedTemplateLiteral(["Montserrat"]);

  _templateObject154 = function _templateObject154() {
    return data;
  };

  return data;
}

function _templateObject153() {
  var data = _taggedTemplateLiteral(["Mauritania"]);

  _templateObject153 = function _templateObject153() {
    return data;
  };

  return data;
}

function _templateObject152() {
  var data = _taggedTemplateLiteral(["Mozambique"]);

  _templateObject152 = function _templateObject152() {
    return data;
  };

  return data;
}

function _templateObject151() {
  var data = _taggedTemplateLiteral(["Northern Mariana Islands"]);

  _templateObject151 = function _templateObject151() {
    return data;
  };

  return data;
}

function _templateObject150() {
  var data = _taggedTemplateLiteral(["Mongolia"]);

  _templateObject150 = function _templateObject150() {
    return data;
  };

  return data;
}

function _templateObject149() {
  var data = _taggedTemplateLiteral(["Montenegro"]);

  _templateObject149 = function _templateObject149() {
    return data;
  };

  return data;
}

function _templateObject148() {
  var data = _taggedTemplateLiteral(["Myanmar"]);

  _templateObject148 = function _templateObject148() {
    return data;
  };

  return data;
}

function _templateObject147() {
  var data = _taggedTemplateLiteral(["Malta"]);

  _templateObject147 = function _templateObject147() {
    return data;
  };

  return data;
}

function _templateObject146() {
  var data = _taggedTemplateLiteral(["Mali"]);

  _templateObject146 = function _templateObject146() {
    return data;
  };

  return data;
}

function _templateObject145() {
  var data = _taggedTemplateLiteral(["Macedonia, the former Yugoslav Republic of"]);

  _templateObject145 = function _templateObject145() {
    return data;
  };

  return data;
}

function _templateObject144() {
  var data = _taggedTemplateLiteral(["Marshall Islands"]);

  _templateObject144 = function _templateObject144() {
    return data;
  };

  return data;
}

function _templateObject143() {
  var data = _taggedTemplateLiteral(["Mexico"]);

  _templateObject143 = function _templateObject143() {
    return data;
  };

  return data;
}

function _templateObject142() {
  var data = _taggedTemplateLiteral(["Maldives"]);

  _templateObject142 = function _templateObject142() {
    return data;
  };

  return data;
}

function _templateObject141() {
  var data = _taggedTemplateLiteral(["Madagascar"]);

  _templateObject141 = function _templateObject141() {
    return data;
  };

  return data;
}

function _templateObject140() {
  var data = _taggedTemplateLiteral(["Moldova, Republic of"]);

  _templateObject140 = function _templateObject140() {
    return data;
  };

  return data;
}

function _templateObject139() {
  var data = _taggedTemplateLiteral(["Monaco"]);

  _templateObject139 = function _templateObject139() {
    return data;
  };

  return data;
}

function _templateObject138() {
  var data = _taggedTemplateLiteral(["Morocco"]);

  _templateObject138 = function _templateObject138() {
    return data;
  };

  return data;
}

function _templateObject137() {
  var data = _taggedTemplateLiteral(["Saint Martin (French part)"]);

  _templateObject137 = function _templateObject137() {
    return data;
  };

  return data;
}

function _templateObject136() {
  var data = _taggedTemplateLiteral(["Macao"]);

  _templateObject136 = function _templateObject136() {
    return data;
  };

  return data;
}

function _templateObject135() {
  var data = _taggedTemplateLiteral(["Latvia"]);

  _templateObject135 = function _templateObject135() {
    return data;
  };

  return data;
}

function _templateObject134() {
  var data = _taggedTemplateLiteral(["Luxembourg"]);

  _templateObject134 = function _templateObject134() {
    return data;
  };

  return data;
}

function _templateObject133() {
  var data = _taggedTemplateLiteral(["Lithuania"]);

  _templateObject133 = function _templateObject133() {
    return data;
  };

  return data;
}

function _templateObject132() {
  var data = _taggedTemplateLiteral(["Lesotho"]);

  _templateObject132 = function _templateObject132() {
    return data;
  };

  return data;
}

function _templateObject131() {
  var data = _taggedTemplateLiteral(["Sri Lanka"]);

  _templateObject131 = function _templateObject131() {
    return data;
  };

  return data;
}

function _templateObject130() {
  var data = _taggedTemplateLiteral(["Liechtenstein"]);

  _templateObject130 = function _templateObject130() {
    return data;
  };

  return data;
}

function _templateObject129() {
  var data = _taggedTemplateLiteral(["Saint Lucia"]);

  _templateObject129 = function _templateObject129() {
    return data;
  };

  return data;
}

function _templateObject128() {
  var data = _taggedTemplateLiteral(["Libya"]);

  _templateObject128 = function _templateObject128() {
    return data;
  };

  return data;
}

function _templateObject127() {
  var data = _taggedTemplateLiteral(["Liberia"]);

  _templateObject127 = function _templateObject127() {
    return data;
  };

  return data;
}

function _templateObject126() {
  var data = _taggedTemplateLiteral(["Lebanon"]);

  _templateObject126 = function _templateObject126() {
    return data;
  };

  return data;
}

function _templateObject125() {
  var data = _taggedTemplateLiteral(["Lao People's Democratic Republic"]);

  _templateObject125 = function _templateObject125() {
    return data;
  };

  return data;
}

function _templateObject124() {
  var data = _taggedTemplateLiteral(["Kuwait"]);

  _templateObject124 = function _templateObject124() {
    return data;
  };

  return data;
}

function _templateObject123() {
  var data = _taggedTemplateLiteral(["Korea, Republic of"]);

  _templateObject123 = function _templateObject123() {
    return data;
  };

  return data;
}

function _templateObject122() {
  var data = _taggedTemplateLiteral(["Saint Kitts and Nevis"]);

  _templateObject122 = function _templateObject122() {
    return data;
  };

  return data;
}

function _templateObject121() {
  var data = _taggedTemplateLiteral(["Kiribati"]);

  _templateObject121 = function _templateObject121() {
    return data;
  };

  return data;
}

function _templateObject120() {
  var data = _taggedTemplateLiteral(["Cambodia"]);

  _templateObject120 = function _templateObject120() {
    return data;
  };

  return data;
}

function _templateObject119() {
  var data = _taggedTemplateLiteral(["Kyrgyzstan"]);

  _templateObject119 = function _templateObject119() {
    return data;
  };

  return data;
}

function _templateObject118() {
  var data = _taggedTemplateLiteral(["Kenya"]);

  _templateObject118 = function _templateObject118() {
    return data;
  };

  return data;
}

function _templateObject117() {
  var data = _taggedTemplateLiteral(["Kazakhstan"]);

  _templateObject117 = function _templateObject117() {
    return data;
  };

  return data;
}

function _templateObject116() {
  var data = _taggedTemplateLiteral(["Japan"]);

  _templateObject116 = function _templateObject116() {
    return data;
  };

  return data;
}

function _templateObject115() {
  var data = _taggedTemplateLiteral(["Jordan"]);

  _templateObject115 = function _templateObject115() {
    return data;
  };

  return data;
}

function _templateObject114() {
  var data = _taggedTemplateLiteral(["Jersey"]);

  _templateObject114 = function _templateObject114() {
    return data;
  };

  return data;
}

function _templateObject113() {
  var data = _taggedTemplateLiteral(["Jamaica"]);

  _templateObject113 = function _templateObject113() {
    return data;
  };

  return data;
}

function _templateObject112() {
  var data = _taggedTemplateLiteral(["Italy"]);

  _templateObject112 = function _templateObject112() {
    return data;
  };

  return data;
}

function _templateObject111() {
  var data = _taggedTemplateLiteral(["Israel"]);

  _templateObject111 = function _templateObject111() {
    return data;
  };

  return data;
}

function _templateObject110() {
  var data = _taggedTemplateLiteral(["Iceland"]);

  _templateObject110 = function _templateObject110() {
    return data;
  };

  return data;
}

function _templateObject109() {
  var data = _taggedTemplateLiteral(["Iraq"]);

  _templateObject109 = function _templateObject109() {
    return data;
  };

  return data;
}

function _templateObject108() {
  var data = _taggedTemplateLiteral(["Iran, Islamic Republic of"]);

  _templateObject108 = function _templateObject108() {
    return data;
  };

  return data;
}

function _templateObject107() {
  var data = _taggedTemplateLiteral(["Ireland"]);

  _templateObject107 = function _templateObject107() {
    return data;
  };

  return data;
}

function _templateObject106() {
  var data = _taggedTemplateLiteral(["British Indian Ocean Territory"]);

  _templateObject106 = function _templateObject106() {
    return data;
  };

  return data;
}

function _templateObject105() {
  var data = _taggedTemplateLiteral(["India"]);

  _templateObject105 = function _templateObject105() {
    return data;
  };

  return data;
}

function _templateObject104() {
  var data = _taggedTemplateLiteral(["Isle of Man"]);

  _templateObject104 = function _templateObject104() {
    return data;
  };

  return data;
}

function _templateObject103() {
  var data = _taggedTemplateLiteral(["Indonesia"]);

  _templateObject103 = function _templateObject103() {
    return data;
  };

  return data;
}

function _templateObject102() {
  var data = _taggedTemplateLiteral(["Hungary"]);

  _templateObject102 = function _templateObject102() {
    return data;
  };

  return data;
}

function _templateObject101() {
  var data = _taggedTemplateLiteral(["Haiti"]);

  _templateObject101 = function _templateObject101() {
    return data;
  };

  return data;
}

function _templateObject100() {
  var data = _taggedTemplateLiteral(["Croatia"]);

  _templateObject100 = function _templateObject100() {
    return data;
  };

  return data;
}

function _templateObject99() {
  var data = _taggedTemplateLiteral(["Honduras"]);

  _templateObject99 = function _templateObject99() {
    return data;
  };

  return data;
}

function _templateObject98() {
  var data = _taggedTemplateLiteral(["Heard Island and McDonald Islands"]);

  _templateObject98 = function _templateObject98() {
    return data;
  };

  return data;
}

function _templateObject97() {
  var data = _taggedTemplateLiteral(["Hong Kong"]);

  _templateObject97 = function _templateObject97() {
    return data;
  };

  return data;
}

function _templateObject96() {
  var data = _taggedTemplateLiteral(["Guyana"]);

  _templateObject96 = function _templateObject96() {
    return data;
  };

  return data;
}

function _templateObject95() {
  var data = _taggedTemplateLiteral(["Guam"]);

  _templateObject95 = function _templateObject95() {
    return data;
  };

  return data;
}

function _templateObject94() {
  var data = _taggedTemplateLiteral(["French Guiana"]);

  _templateObject94 = function _templateObject94() {
    return data;
  };

  return data;
}

function _templateObject93() {
  var data = _taggedTemplateLiteral(["Guatemala"]);

  _templateObject93 = function _templateObject93() {
    return data;
  };

  return data;
}

function _templateObject92() {
  var data = _taggedTemplateLiteral(["Greenland"]);

  _templateObject92 = function _templateObject92() {
    return data;
  };

  return data;
}

function _templateObject91() {
  var data = _taggedTemplateLiteral(["Grenada"]);

  _templateObject91 = function _templateObject91() {
    return data;
  };

  return data;
}

function _templateObject90() {
  var data = _taggedTemplateLiteral(["Greece"]);

  _templateObject90 = function _templateObject90() {
    return data;
  };

  return data;
}

function _templateObject89() {
  var data = _taggedTemplateLiteral(["Equatorial Guinea"]);

  _templateObject89 = function _templateObject89() {
    return data;
  };

  return data;
}

function _templateObject88() {
  var data = _taggedTemplateLiteral(["Guinea-Bissau"]);

  _templateObject88 = function _templateObject88() {
    return data;
  };

  return data;
}

function _templateObject87() {
  var data = _taggedTemplateLiteral(["Gambia"]);

  _templateObject87 = function _templateObject87() {
    return data;
  };

  return data;
}

function _templateObject86() {
  var data = _taggedTemplateLiteral(["Guadeloupe"]);

  _templateObject86 = function _templateObject86() {
    return data;
  };

  return data;
}

function _templateObject85() {
  var data = _taggedTemplateLiteral(["Guinea"]);

  _templateObject85 = function _templateObject85() {
    return data;
  };

  return data;
}

function _templateObject84() {
  var data = _taggedTemplateLiteral(["Gibraltar"]);

  _templateObject84 = function _templateObject84() {
    return data;
  };

  return data;
}

function _templateObject83() {
  var data = _taggedTemplateLiteral(["Ghana"]);

  _templateObject83 = function _templateObject83() {
    return data;
  };

  return data;
}

function _templateObject82() {
  var data = _taggedTemplateLiteral(["Guernsey"]);

  _templateObject82 = function _templateObject82() {
    return data;
  };

  return data;
}

function _templateObject81() {
  var data = _taggedTemplateLiteral(["Georgia"]);

  _templateObject81 = function _templateObject81() {
    return data;
  };

  return data;
}

function _templateObject80() {
  var data = _taggedTemplateLiteral(["United Kingdom"]);

  _templateObject80 = function _templateObject80() {
    return data;
  };

  return data;
}

function _templateObject79() {
  var data = _taggedTemplateLiteral(["Gabon"]);

  _templateObject79 = function _templateObject79() {
    return data;
  };

  return data;
}

function _templateObject78() {
  var data = _taggedTemplateLiteral(["Micronesia, Federated States of"]);

  _templateObject78 = function _templateObject78() {
    return data;
  };

  return data;
}

function _templateObject77() {
  var data = _taggedTemplateLiteral(["Faroe Islands"]);

  _templateObject77 = function _templateObject77() {
    return data;
  };

  return data;
}

function _templateObject76() {
  var data = _taggedTemplateLiteral(["France"]);

  _templateObject76 = function _templateObject76() {
    return data;
  };

  return data;
}

function _templateObject75() {
  var data = _taggedTemplateLiteral(["Falkland Islands (Malvinas)"]);

  _templateObject75 = function _templateObject75() {
    return data;
  };

  return data;
}

function _templateObject74() {
  var data = _taggedTemplateLiteral(["Fiji"]);

  _templateObject74 = function _templateObject74() {
    return data;
  };

  return data;
}

function _templateObject73() {
  var data = _taggedTemplateLiteral(["Finland"]);

  _templateObject73 = function _templateObject73() {
    return data;
  };

  return data;
}

function _templateObject72() {
  var data = _taggedTemplateLiteral(["Ethiopia"]);

  _templateObject72 = function _templateObject72() {
    return data;
  };

  return data;
}

function _templateObject71() {
  var data = _taggedTemplateLiteral(["Estonia"]);

  _templateObject71 = function _templateObject71() {
    return data;
  };

  return data;
}

function _templateObject70() {
  var data = _taggedTemplateLiteral(["Spain"]);

  _templateObject70 = function _templateObject70() {
    return data;
  };

  return data;
}

function _templateObject69() {
  var data = _taggedTemplateLiteral(["Western Sahara"]);

  _templateObject69 = function _templateObject69() {
    return data;
  };

  return data;
}

function _templateObject68() {
  var data = _taggedTemplateLiteral(["Eritrea"]);

  _templateObject68 = function _templateObject68() {
    return data;
  };

  return data;
}

function _templateObject67() {
  var data = _taggedTemplateLiteral(["Egypt"]);

  _templateObject67 = function _templateObject67() {
    return data;
  };

  return data;
}

function _templateObject66() {
  var data = _taggedTemplateLiteral(["Ecuador"]);

  _templateObject66 = function _templateObject66() {
    return data;
  };

  return data;
}

function _templateObject65() {
  var data = _taggedTemplateLiteral(["Algeria"]);

  _templateObject65 = function _templateObject65() {
    return data;
  };

  return data;
}

function _templateObject64() {
  var data = _taggedTemplateLiteral(["Dominican Republic"]);

  _templateObject64 = function _templateObject64() {
    return data;
  };

  return data;
}

function _templateObject63() {
  var data = _taggedTemplateLiteral(["Denmark"]);

  _templateObject63 = function _templateObject63() {
    return data;
  };

  return data;
}

function _templateObject62() {
  var data = _taggedTemplateLiteral(["Dominica"]);

  _templateObject62 = function _templateObject62() {
    return data;
  };

  return data;
}

function _templateObject61() {
  var data = _taggedTemplateLiteral(["Djibouti"]);

  _templateObject61 = function _templateObject61() {
    return data;
  };

  return data;
}

function _templateObject60() {
  var data = _taggedTemplateLiteral(["Germany"]);

  _templateObject60 = function _templateObject60() {
    return data;
  };

  return data;
}

function _templateObject59() {
  var data = _taggedTemplateLiteral(["Czechia"]);

  _templateObject59 = function _templateObject59() {
    return data;
  };

  return data;
}

function _templateObject58() {
  var data = _taggedTemplateLiteral(["Cyprus"]);

  _templateObject58 = function _templateObject58() {
    return data;
  };

  return data;
}

function _templateObject57() {
  var data = _taggedTemplateLiteral(["Cayman Islands"]);

  _templateObject57 = function _templateObject57() {
    return data;
  };

  return data;
}

function _templateObject56() {
  var data = _taggedTemplateLiteral(["Christmas Island"]);

  _templateObject56 = function _templateObject56() {
    return data;
  };

  return data;
}

function _templateObject55() {
  var data = _taggedTemplateLiteral(["Cura\xE7ao"]);

  _templateObject55 = function _templateObject55() {
    return data;
  };

  return data;
}

function _templateObject54() {
  var data = _taggedTemplateLiteral(["Cuba"]);

  _templateObject54 = function _templateObject54() {
    return data;
  };

  return data;
}

function _templateObject53() {
  var data = _taggedTemplateLiteral(["Costa Rica"]);

  _templateObject53 = function _templateObject53() {
    return data;
  };

  return data;
}

function _templateObject52() {
  var data = _taggedTemplateLiteral(["Cabo Verde"]);

  _templateObject52 = function _templateObject52() {
    return data;
  };

  return data;
}

function _templateObject51() {
  var data = _taggedTemplateLiteral(["Comoros"]);

  _templateObject51 = function _templateObject51() {
    return data;
  };

  return data;
}

function _templateObject50() {
  var data = _taggedTemplateLiteral(["Colombia"]);

  _templateObject50 = function _templateObject50() {
    return data;
  };

  return data;
}

function _templateObject49() {
  var data = _taggedTemplateLiteral(["Cook Islands"]);

  _templateObject49 = function _templateObject49() {
    return data;
  };

  return data;
}

function _templateObject48() {
  var data = _taggedTemplateLiteral(["Congo"]);

  _templateObject48 = function _templateObject48() {
    return data;
  };

  return data;
}

function _templateObject47() {
  var data = _taggedTemplateLiteral(["Congo, the Democratic Republic of the"]);

  _templateObject47 = function _templateObject47() {
    return data;
  };

  return data;
}

function _templateObject46() {
  var data = _taggedTemplateLiteral(["Cameroon"]);

  _templateObject46 = function _templateObject46() {
    return data;
  };

  return data;
}

function _templateObject45() {
  var data = _taggedTemplateLiteral(["C\xF4te d'Ivoire"]);

  _templateObject45 = function _templateObject45() {
    return data;
  };

  return data;
}

function _templateObject44() {
  var data = _taggedTemplateLiteral(["China"]);

  _templateObject44 = function _templateObject44() {
    return data;
  };

  return data;
}

function _templateObject43() {
  var data = _taggedTemplateLiteral(["Chile"]);

  _templateObject43 = function _templateObject43() {
    return data;
  };

  return data;
}

function _templateObject42() {
  var data = _taggedTemplateLiteral(["Switzerland"]);

  _templateObject42 = function _templateObject42() {
    return data;
  };

  return data;
}

function _templateObject41() {
  var data = _taggedTemplateLiteral(["Cocos (Keeling) Islands"]);

  _templateObject41 = function _templateObject41() {
    return data;
  };

  return data;
}

function _templateObject40() {
  var data = _taggedTemplateLiteral(["Canada"]);

  _templateObject40 = function _templateObject40() {
    return data;
  };

  return data;
}

function _templateObject39() {
  var data = _taggedTemplateLiteral(["Central African Republic"]);

  _templateObject39 = function _templateObject39() {
    return data;
  };

  return data;
}

function _templateObject38() {
  var data = _taggedTemplateLiteral(["Botswana"]);

  _templateObject38 = function _templateObject38() {
    return data;
  };

  return data;
}

function _templateObject37() {
  var data = _taggedTemplateLiteral(["Bouvet Island"]);

  _templateObject37 = function _templateObject37() {
    return data;
  };

  return data;
}

function _templateObject36() {
  var data = _taggedTemplateLiteral(["Bhutan"]);

  _templateObject36 = function _templateObject36() {
    return data;
  };

  return data;
}

function _templateObject35() {
  var data = _taggedTemplateLiteral(["Brunei Darussalam"]);

  _templateObject35 = function _templateObject35() {
    return data;
  };

  return data;
}

function _templateObject34() {
  var data = _taggedTemplateLiteral(["Barbados"]);

  _templateObject34 = function _templateObject34() {
    return data;
  };

  return data;
}

function _templateObject33() {
  var data = _taggedTemplateLiteral(["Brazil"]);

  _templateObject33 = function _templateObject33() {
    return data;
  };

  return data;
}

function _templateObject32$1() {
  var data = _taggedTemplateLiteral(["Bolivia, Plurinational State of"]);

  _templateObject32$1 = function _templateObject32() {
    return data;
  };

  return data;
}

function _templateObject31$1() {
  var data = _taggedTemplateLiteral(["Bermuda"]);

  _templateObject31$1 = function _templateObject31() {
    return data;
  };

  return data;
}

function _templateObject30$1() {
  var data = _taggedTemplateLiteral(["Belize"]);

  _templateObject30$1 = function _templateObject30() {
    return data;
  };

  return data;
}

function _templateObject29$1() {
  var data = _taggedTemplateLiteral(["Belarus"]);

  _templateObject29$1 = function _templateObject29() {
    return data;
  };

  return data;
}

function _templateObject28$1() {
  var data = _taggedTemplateLiteral(["Saint Barth\xE9lemy"]);

  _templateObject28$1 = function _templateObject28() {
    return data;
  };

  return data;
}

function _templateObject27$1() {
  var data = _taggedTemplateLiteral(["Bosnia and Herzegovina"]);

  _templateObject27$1 = function _templateObject27() {
    return data;
  };

  return data;
}

function _templateObject26$1() {
  var data = _taggedTemplateLiteral(["Bahamas"]);

  _templateObject26$1 = function _templateObject26() {
    return data;
  };

  return data;
}

function _templateObject25$1() {
  var data = _taggedTemplateLiteral(["Bahrain"]);

  _templateObject25$1 = function _templateObject25() {
    return data;
  };

  return data;
}

function _templateObject24$1() {
  var data = _taggedTemplateLiteral(["Bulgaria"]);

  _templateObject24$1 = function _templateObject24() {
    return data;
  };

  return data;
}

function _templateObject23$2() {
  var data = _taggedTemplateLiteral(["Bangladesh"]);

  _templateObject23$2 = function _templateObject23() {
    return data;
  };

  return data;
}

function _templateObject22$2() {
  var data = _taggedTemplateLiteral(["Burkina Faso"]);

  _templateObject22$2 = function _templateObject22() {
    return data;
  };

  return data;
}

function _templateObject21$2() {
  var data = _taggedTemplateLiteral(["Bonaire, Sint Eustatius and Saba"]);

  _templateObject21$2 = function _templateObject21() {
    return data;
  };

  return data;
}

function _templateObject20$2() {
  var data = _taggedTemplateLiteral(["Benin"]);

  _templateObject20$2 = function _templateObject20() {
    return data;
  };

  return data;
}

function _templateObject19$2() {
  var data = _taggedTemplateLiteral(["Belgium"]);

  _templateObject19$2 = function _templateObject19() {
    return data;
  };

  return data;
}

function _templateObject18$3() {
  var data = _taggedTemplateLiteral(["Burundi"]);

  _templateObject18$3 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17$3() {
  var data = _taggedTemplateLiteral(["Azerbaijan"]);

  _templateObject17$3 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16$3() {
  var data = _taggedTemplateLiteral(["Austria"]);

  _templateObject16$3 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15$3() {
  var data = _taggedTemplateLiteral(["Australia"]);

  _templateObject15$3 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14$4() {
  var data = _taggedTemplateLiteral(["Antigua and Barbuda"]);

  _templateObject14$4 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13$6() {
  var data = _taggedTemplateLiteral(["French Southern Territories"]);

  _templateObject13$6 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12$6() {
  var data = _taggedTemplateLiteral(["Antarctica"]);

  _templateObject12$6 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11$7() {
  var data = _taggedTemplateLiteral(["American Samoa"]);

  _templateObject11$7 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10$8() {
  var data = _taggedTemplateLiteral(["Armenia"]);

  _templateObject10$8 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$a() {
  var data = _taggedTemplateLiteral(["Argentina"]);

  _templateObject9$a = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$a() {
  var data = _taggedTemplateLiteral(["United Arab Emirates"]);

  _templateObject8$a = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$b() {
  var data = _taggedTemplateLiteral(["Andorra"]);

  _templateObject7$b = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$f() {
  var data = _taggedTemplateLiteral(["Albania"]);

  _templateObject6$f = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$g() {
  var data = _taggedTemplateLiteral(["\xC5land Islands"]);

  _templateObject5$g = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$j() {
  var data = _taggedTemplateLiteral(["Anguilla"]);

  _templateObject4$j = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$j() {
  var data = _taggedTemplateLiteral(["Angola"]);

  _templateObject3$j = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$k() {
  var data = _taggedTemplateLiteral(["Afghanistan"]);

  _templateObject2$k = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$k() {
  var data = _taggedTemplateLiteral(["Aruba"]);

  _templateObject$k = function _templateObject() {
    return data;
  };

  return data;
}
/**
 * All existing ISO 3166-1 alpha-3 country codes
 */

var isoAlphaThreeCountryCodes = [{
  value: 'ABW',
  label: t(_templateObject$k())
}, {
  value: 'AFG',
  label: t(_templateObject2$k())
}, {
  value: 'AGO',
  label: t(_templateObject3$j())
}, {
  value: 'AIA',
  label: t(_templateObject4$j())
}, {
  value: 'ALA',
  label: t(_templateObject5$g())
}, {
  value: 'ALB',
  label: t(_templateObject6$f())
}, {
  value: 'AND',
  label: t(_templateObject7$b())
}, {
  value: 'ARE',
  label: t(_templateObject8$a())
}, {
  value: 'ARG',
  label: t(_templateObject9$a())
}, {
  value: 'ARM',
  label: t(_templateObject10$8())
}, {
  value: 'ASM',
  label: t(_templateObject11$7())
}, {
  value: 'ATA',
  label: t(_templateObject12$6())
}, {
  value: 'ATF',
  label: t(_templateObject13$6())
}, {
  value: 'ATG',
  label: t(_templateObject14$4())
}, {
  value: 'AUS',
  label: t(_templateObject15$3())
}, {
  value: 'AUT',
  label: t(_templateObject16$3())
}, {
  value: 'AZE',
  label: t(_templateObject17$3())
}, {
  value: 'BDI',
  label: t(_templateObject18$3())
}, {
  value: 'BEL',
  label: t(_templateObject19$2())
}, {
  value: 'BEN',
  label: t(_templateObject20$2())
}, {
  value: 'BES',
  label: t(_templateObject21$2())
}, {
  value: 'BFA',
  label: t(_templateObject22$2())
}, {
  value: 'BGD',
  label: t(_templateObject23$2())
}, {
  value: 'BGR',
  label: t(_templateObject24$1())
}, {
  value: 'BHR',
  label: t(_templateObject25$1())
}, {
  value: 'BHS',
  label: t(_templateObject26$1())
}, {
  value: 'BIH',
  label: t(_templateObject27$1())
}, {
  value: 'BLM',
  label: t(_templateObject28$1())
}, {
  value: 'BLR',
  label: t(_templateObject29$1())
}, {
  value: 'BLZ',
  label: t(_templateObject30$1())
}, {
  value: 'BMU',
  label: t(_templateObject31$1())
}, {
  value: 'BOL',
  label: t(_templateObject32$1())
}, {
  value: 'BRA',
  label: t(_templateObject33())
}, {
  value: 'BRB',
  label: t(_templateObject34())
}, {
  value: 'BRN',
  label: t(_templateObject35())
}, {
  value: 'BTN',
  label: t(_templateObject36())
}, {
  value: 'BVT',
  label: t(_templateObject37())
}, {
  value: 'BWA',
  label: t(_templateObject38())
}, {
  value: 'CAF',
  label: t(_templateObject39())
}, {
  value: 'CAN',
  label: t(_templateObject40())
}, {
  value: 'CCK',
  label: t(_templateObject41())
}, {
  value: 'CHE',
  label: t(_templateObject42())
}, {
  value: 'CHL',
  label: t(_templateObject43())
}, {
  value: 'CHN',
  label: t(_templateObject44())
}, {
  value: 'CIV',
  label: t(_templateObject45())
}, {
  value: 'CMR',
  label: t(_templateObject46())
}, {
  value: 'COD',
  label: t(_templateObject47())
}, {
  value: 'COG',
  label: t(_templateObject48())
}, {
  value: 'COK',
  label: t(_templateObject49())
}, {
  value: 'COL',
  label: t(_templateObject50())
}, {
  value: 'COM',
  label: t(_templateObject51())
}, {
  value: 'CPV',
  label: t(_templateObject52())
}, {
  value: 'CRI',
  label: t(_templateObject53())
}, {
  value: 'CUB',
  label: t(_templateObject54())
}, {
  value: 'CUW',
  label: t(_templateObject55())
}, {
  value: 'CXR',
  label: t(_templateObject56())
}, {
  value: 'CYM',
  label: t(_templateObject57())
}, {
  value: 'CYP',
  label: t(_templateObject58())
}, {
  value: 'CZE',
  label: t(_templateObject59())
}, {
  value: 'DEU',
  label: t(_templateObject60())
}, {
  value: 'DJI',
  label: t(_templateObject61())
}, {
  value: 'DMA',
  label: t(_templateObject62())
}, {
  value: 'DNK',
  label: t(_templateObject63())
}, {
  value: 'DOM',
  label: t(_templateObject64())
}, {
  value: 'DZA',
  label: t(_templateObject65())
}, {
  value: 'ECU',
  label: t(_templateObject66())
}, {
  value: 'EGY',
  label: t(_templateObject67())
}, {
  value: 'ERI',
  label: t(_templateObject68())
}, {
  value: 'ESH',
  label: t(_templateObject69())
}, {
  value: 'ESP',
  label: t(_templateObject70())
}, {
  value: 'EST',
  label: t(_templateObject71())
}, {
  value: 'ETH',
  label: t(_templateObject72())
}, {
  value: 'FIN',
  label: t(_templateObject73())
}, {
  value: 'FJI',
  label: t(_templateObject74())
}, {
  value: 'FLK',
  label: t(_templateObject75())
}, {
  value: 'FRA',
  label: t(_templateObject76())
}, {
  value: 'FRO',
  label: t(_templateObject77())
}, {
  value: 'FSM',
  label: t(_templateObject78())
}, {
  value: 'GAB',
  label: t(_templateObject79())
}, {
  value: 'GBR',
  label: t(_templateObject80())
}, {
  value: 'GEO',
  label: t(_templateObject81())
}, {
  value: 'GGY',
  label: t(_templateObject82())
}, {
  value: 'GHA',
  label: t(_templateObject83())
}, {
  value: 'GIB',
  label: t(_templateObject84())
}, {
  value: 'GIN',
  label: t(_templateObject85())
}, {
  value: 'GLP',
  label: t(_templateObject86())
}, {
  value: 'GMB',
  label: t(_templateObject87())
}, {
  value: 'GNB',
  label: t(_templateObject88())
}, {
  value: 'GNQ',
  label: t(_templateObject89())
}, {
  value: 'GRC',
  label: t(_templateObject90())
}, {
  value: 'GRD',
  label: t(_templateObject91())
}, {
  value: 'GRL',
  label: t(_templateObject92())
}, {
  value: 'GTM',
  label: t(_templateObject93())
}, {
  value: 'GUF',
  label: t(_templateObject94())
}, {
  value: 'GUM',
  label: t(_templateObject95())
}, {
  value: 'GUY',
  label: t(_templateObject96())
}, {
  value: 'HKG',
  label: t(_templateObject97())
}, {
  value: 'HMD',
  label: t(_templateObject98())
}, {
  value: 'HND',
  label: t(_templateObject99())
}, {
  value: 'HRV',
  label: t(_templateObject100())
}, {
  value: 'HTI',
  label: t(_templateObject101())
}, {
  value: 'HUN',
  label: t(_templateObject102())
}, {
  value: 'IDN',
  label: t(_templateObject103())
}, {
  value: 'IMN',
  label: t(_templateObject104())
}, {
  value: 'IND',
  label: t(_templateObject105())
}, {
  value: 'IOT',
  label: t(_templateObject106())
}, {
  value: 'IRL',
  label: t(_templateObject107())
}, {
  value: 'IRN',
  label: t(_templateObject108())
}, {
  value: 'IRQ',
  label: t(_templateObject109())
}, {
  value: 'ISL',
  label: t(_templateObject110())
}, {
  value: 'ISR',
  label: t(_templateObject111())
}, {
  value: 'ITA',
  label: t(_templateObject112())
}, {
  value: 'JAM',
  label: t(_templateObject113())
}, {
  value: 'JEY',
  label: t(_templateObject114())
}, {
  value: 'JOR',
  label: t(_templateObject115())
}, {
  value: 'JPN',
  label: t(_templateObject116())
}, {
  value: 'KAZ',
  label: t(_templateObject117())
}, {
  value: 'KEN',
  label: t(_templateObject118())
}, {
  value: 'KGZ',
  label: t(_templateObject119())
}, {
  value: 'KHM',
  label: t(_templateObject120())
}, {
  value: 'KIR',
  label: t(_templateObject121())
}, {
  value: 'KNA',
  label: t(_templateObject122())
}, {
  value: 'KOR',
  label: t(_templateObject123())
}, {
  value: 'KWT',
  label: t(_templateObject124())
}, {
  value: 'LAO',
  label: t(_templateObject125())
}, {
  value: 'LBN',
  label: t(_templateObject126())
}, {
  value: 'LBR',
  label: t(_templateObject127())
}, {
  value: 'LBY',
  label: t(_templateObject128())
}, {
  value: 'LCA',
  label: t(_templateObject129())
}, {
  value: 'LIE',
  label: t(_templateObject130())
}, {
  value: 'LKA',
  label: t(_templateObject131())
}, {
  value: 'LSO',
  label: t(_templateObject132())
}, {
  value: 'LTU',
  label: t(_templateObject133())
}, {
  value: 'LUX',
  label: t(_templateObject134())
}, {
  value: 'LVA',
  label: t(_templateObject135())
}, {
  value: 'MAC',
  label: t(_templateObject136())
}, {
  value: 'MAF',
  label: t(_templateObject137())
}, {
  value: 'MAR',
  label: t(_templateObject138())
}, {
  value: 'MCO',
  label: t(_templateObject139())
}, {
  value: 'MDA',
  label: t(_templateObject140())
}, {
  value: 'MDG',
  label: t(_templateObject141())
}, {
  value: 'MDV',
  label: t(_templateObject142())
}, {
  value: 'MEX',
  label: t(_templateObject143())
}, {
  value: 'MHL',
  label: t(_templateObject144())
}, {
  value: 'MKD',
  label: t(_templateObject145())
}, {
  value: 'MLI',
  label: t(_templateObject146())
}, {
  value: 'MLT',
  label: t(_templateObject147())
}, {
  value: 'MMR',
  label: t(_templateObject148())
}, {
  value: 'MNE',
  label: t(_templateObject149())
}, {
  value: 'MNG',
  label: t(_templateObject150())
}, {
  value: 'MNP',
  label: t(_templateObject151())
}, {
  value: 'MOZ',
  label: t(_templateObject152())
}, {
  value: 'MRT',
  label: t(_templateObject153())
}, {
  value: 'MSR',
  label: t(_templateObject154())
}, {
  value: 'MTQ',
  label: t(_templateObject155())
}, {
  value: 'MUS',
  label: t(_templateObject156())
}, {
  value: 'MWI',
  label: t(_templateObject157())
}, {
  value: 'MYS',
  label: t(_templateObject158())
}, {
  value: 'MYT',
  label: t(_templateObject159())
}, {
  value: 'NAM',
  label: t(_templateObject160())
}, {
  value: 'NCL',
  label: t(_templateObject161())
}, {
  value: 'NER',
  label: t(_templateObject162())
}, {
  value: 'NFK',
  label: t(_templateObject163())
}, {
  value: 'NGA',
  label: t(_templateObject164())
}, {
  value: 'NIC',
  label: t(_templateObject165())
}, {
  value: 'NIU',
  label: t(_templateObject166())
}, {
  value: 'NLD',
  label: t(_templateObject167())
}, {
  value: 'NOR',
  label: t(_templateObject168())
}, {
  value: 'NPL',
  label: t(_templateObject169())
}, {
  value: 'NRU',
  label: t(_templateObject170())
}, {
  value: 'NZL',
  label: t(_templateObject171())
}, {
  value: 'OMN',
  label: t(_templateObject172())
}, {
  value: 'PAK',
  label: t(_templateObject173())
}, {
  value: 'PAN',
  label: t(_templateObject174())
}, {
  value: 'PCN',
  label: t(_templateObject175())
}, {
  value: 'PER',
  label: t(_templateObject176())
}, {
  value: 'PHL',
  label: t(_templateObject177())
}, {
  value: 'PLW',
  label: t(_templateObject178())
}, {
  value: 'PNG',
  label: t(_templateObject179())
}, {
  value: 'POL',
  label: t(_templateObject180())
}, {
  value: 'PRI',
  label: t(_templateObject181())
}, {
  value: 'PRK',
  label: t(_templateObject182())
}, {
  value: 'PRT',
  label: t(_templateObject183())
}, {
  value: 'PRY',
  label: t(_templateObject184())
}, {
  value: 'PSE',
  label: t(_templateObject185())
}, {
  value: 'PYF',
  label: t(_templateObject186())
}, {
  value: 'QAT',
  label: t(_templateObject187())
}, {
  value: 'REU',
  label: t(_templateObject188())
}, {
  value: 'ROU',
  label: t(_templateObject189())
}, {
  value: 'RUS',
  label: t(_templateObject190())
}, {
  value: 'RWA',
  label: t(_templateObject191())
}, {
  value: 'SAU',
  label: t(_templateObject192())
}, {
  value: 'SDN',
  label: t(_templateObject193())
}, {
  value: 'SEN',
  label: t(_templateObject194())
}, {
  value: 'SGP',
  label: t(_templateObject195())
}, {
  value: 'SGS',
  label: t(_templateObject196())
}, {
  value: 'SHN',
  label: t(_templateObject197())
}, {
  value: 'SJM',
  label: t(_templateObject198())
}, {
  value: 'SLB',
  label: t(_templateObject199())
}, {
  value: 'SLE',
  label: t(_templateObject200())
}, {
  value: 'SLV',
  label: t(_templateObject201())
}, {
  value: 'SMR',
  label: t(_templateObject202())
}, {
  value: 'SOM',
  label: t(_templateObject203())
}, {
  value: 'SPM',
  label: t(_templateObject204())
}, {
  value: 'SRB',
  label: t(_templateObject205())
}, {
  value: 'SSD',
  label: t(_templateObject206())
}, {
  value: 'STP',
  label: t(_templateObject207())
}, {
  value: 'SUR',
  label: t(_templateObject208())
}, {
  value: 'SVK',
  label: t(_templateObject209())
}, {
  value: 'SVN',
  label: t(_templateObject210())
}, {
  value: 'SWE',
  label: t(_templateObject211())
}, {
  value: 'SWZ',
  label: t(_templateObject212())
}, {
  value: 'SXM',
  label: t(_templateObject213())
}, {
  value: 'SYC',
  label: t(_templateObject214())
}, {
  value: 'SYR',
  label: t(_templateObject215())
}, {
  value: 'TCA',
  label: t(_templateObject216())
}, {
  value: 'TCD',
  label: t(_templateObject217())
}, {
  value: 'TGO',
  label: t(_templateObject218())
}, {
  value: 'THA',
  label: t(_templateObject219())
}, {
  value: 'TJK',
  label: t(_templateObject220())
}, {
  value: 'TKL',
  label: t(_templateObject221())
}, {
  value: 'TKM',
  label: t(_templateObject222())
}, {
  value: 'TLS',
  label: t(_templateObject223())
}, {
  value: 'TON',
  label: t(_templateObject224())
}, {
  value: 'TTO',
  label: t(_templateObject225())
}, {
  value: 'TUN',
  label: t(_templateObject226())
}, {
  value: 'TUR',
  label: t(_templateObject227())
}, {
  value: 'TUV',
  label: t(_templateObject228())
}, {
  value: 'TWN',
  label: t(_templateObject229())
}, {
  value: 'TZA',
  label: t(_templateObject230())
}, {
  value: 'UGA',
  label: t(_templateObject231())
}, {
  value: 'UKR',
  label: t(_templateObject232())
}, {
  value: 'UMI',
  label: t(_templateObject233())
}, {
  value: 'URY',
  label: t(_templateObject234())
}, {
  value: 'USA',
  label: t(_templateObject235())
}, {
  value: 'UZB',
  label: t(_templateObject236())
}, {
  value: 'VAT',
  label: t(_templateObject237())
}, {
  value: 'VCT',
  label: t(_templateObject238())
}, {
  value: 'VEN',
  label: t(_templateObject239())
}, {
  value: 'VGB',
  label: t(_templateObject240())
}, {
  value: 'VIR',
  label: t(_templateObject241())
}, {
  value: 'VNM',
  label: t(_templateObject242())
}, {
  value: 'VUT',
  label: t(_templateObject243())
}, {
  value: 'WLF',
  label: t(_templateObject244())
}, {
  value: 'WSM',
  label: t(_templateObject245())
}, {
  value: 'YEM',
  label: t(_templateObject246())
}, {
  value: 'ZAF',
  label: t(_templateObject247())
}, {
  value: 'ZMB',
  label: t(_templateObject248())
}, {
  value: 'ZWE',
  label: t(_templateObject249())
}];

function _templateObject38$1() {
  var data = _taggedTemplateLiteral(["A three-letter country code in ISO 3166-1 alpha-3, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3"]);

  _templateObject38$1 = function _templateObject38() {
    return data;
  };

  return data;
}

function _templateObject37$1() {
  var data = _taggedTemplateLiteral(["Country Code"]);

  _templateObject37$1 = function _templateObject37() {
    return data;
  };

  return data;
}

function _templateObject36$1() {
  var data = _taggedTemplateLiteral(["A code/abbreviation for the state division of a country."]);

  _templateObject36$1 = function _templateObject36() {
    return data;
  };

  return data;
}

function _templateObject35$1() {
  var data = _taggedTemplateLiteral(["State Code"]);

  _templateObject35$1 = function _templateObject35() {
    return data;
  };

  return data;
}

function _templateObject34$1() {
  var data = _taggedTemplateLiteral(["A division of a country; typically a first-level administrative division of a country and/or a geographical region."]);

  _templateObject34$1 = function _templateObject34() {
    return data;
  };

  return data;
}

function _templateObject33$1() {
  var data = _taggedTemplateLiteral(["State"]);

  _templateObject33$1 = function _templateObject33() {
    return data;
  };

  return data;
}

function _templateObject32$2() {
  var data = _taggedTemplateLiteral(["A division of a state; typically a secondary-level administrative division of a country or equivalent."]);

  _templateObject32$2 = function _templateObject32() {
    return data;
  };

  return data;
}

function _templateObject31$2() {
  var data = _taggedTemplateLiteral(["County"]);

  _templateObject31$2 = function _templateObject31() {
    return data;
  };

  return data;
}

function _templateObject30$2() {
  var data = _taggedTemplateLiteral(["For address conventions where more than to levels of named areas above the city level are in use, the regions attribute provides an array with all additional area names, ordered by decreasing size (starting with the highest subdivision below state)"]);

  _templateObject30$2 = function _templateObject30() {
    return data;
  };

  return data;
}

function _templateObject29$2() {
  var data = _taggedTemplateLiteral(["Regions"]);

  _templateObject29$2 = function _templateObject29() {
    return data;
  };

  return data;
}

function _templateObject28$2() {
  var data = _taggedTemplateLiteral(["In which city is this place?"]);

  _templateObject28$2 = function _templateObject28() {
    return data;
  };

  return data;
}

function _templateObject27$2() {
  var data = _taggedTemplateLiteral(["City"]);

  _templateObject27$2 = function _templateObject27() {
    return data;
  };

  return data;
}

function _templateObject26$2() {
  var data = _taggedTemplateLiteral(["The place is located destrict\u2026"]);

  _templateObject26$2 = function _templateObject26() {
    return data;
  };

  return data;
}

function _templateObject25$2() {
  var data = _taggedTemplateLiteral(["A division of city; typically an administrative unit within a larger city or a customary name of a city's neighborhood."], ["A division of city; typically an administrative unit within a larger city or a customary name of a city\\'s neighborhood."]);

  _templateObject25$2 = function _templateObject25() {
    return data;
  };

  return data;
}

function _templateObject24$2() {
  var data = _taggedTemplateLiteral(["District"]);

  _templateObject24$2 = function _templateObject24() {
    return data;
  };

  return data;
}

function _templateObject23$3() {
  var data = _taggedTemplateLiteral(["An array of named areas below the district and above street. In some regions such areas might also contain street names, when individual street segments have names separate from the name of the whole road."]);

  _templateObject23$3 = function _templateObject23() {
    return data;
  };

  return data;
}

function _templateObject22$3() {
  var data = _taggedTemplateLiteral(["Areas"]);

  _templateObject22$3 = function _templateObject22() {
    return data;
  };

  return data;
}

function _templateObject21$3() {
  var data = _taggedTemplateLiteral(["Also called ZIP code."]);

  _templateObject21$3 = function _templateObject21() {
    return data;
  };

  return data;
}

function _templateObject20$3() {
  var data = _taggedTemplateLiteral(["What is the postal code?"]);

  _templateObject20$3 = function _templateObject20() {
    return data;
  };

  return data;
}

function _templateObject19$3() {
  var data = _taggedTemplateLiteral(["Postal Code"]);

  _templateObject19$3 = function _templateObject19() {
    return data;
  };

  return data;
}

function _templateObject18$4() {
  var data = _taggedTemplateLiteral(["Please avoid numbers for houses or buildings."]);

  _templateObject18$4 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17$4() {
  var data = _taggedTemplateLiteral(["What is the name of the street?"]);

  _templateObject17$4 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16$4() {
  var data = _taggedTemplateLiteral(["Street"]);

  _templateObject16$4 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15$4() {
  var data = _taggedTemplateLiteral(["What is the house number?"]);

  _templateObject15$4 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14$5() {
  var data = _taggedTemplateLiteral(["House"]);

  _templateObject14$5 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13$7() {
  var data = _taggedTemplateLiteral(["e.g. main exposition hall"]);

  _templateObject13$7 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12$7() {
  var data = _taggedTemplateLiteral(["Building name"]);

  _templateObject12$7 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11$8() {
  var data = _taggedTemplateLiteral(["Building"]);

  _templateObject11$8 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10$9() {
  var data = _taggedTemplateLiteral(["e.g. 4"]);

  _templateObject10$9 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$b() {
  var data = _taggedTemplateLiteral(["What is the number of the floor?"]);

  _templateObject9$b = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$b() {
  var data = _taggedTemplateLiteral(["The number of the floor in british convention (ground floor is 0)"]);

  _templateObject8$b = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$c() {
  var data = _taggedTemplateLiteral(["Level"]);

  _templateObject7$c = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$g() {
  var data = _taggedTemplateLiteral(["e.g. meeting room 'Rome'"]);

  _templateObject6$g = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$h() {
  var data = _taggedTemplateLiteral(["What is the name of the room?"]);

  _templateObject5$h = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$k() {
  var data = _taggedTemplateLiteral(["Room name"]);

  _templateObject4$k = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$k() {
  var data = _taggedTemplateLiteral(["Room"]);

  _templateObject3$k = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$l() {
  var data = _taggedTemplateLiteral(["A displayable, formatted address as rich text (Markdown)."]);

  _templateObject2$l = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$l() {
  var data = _taggedTemplateLiteral(["Text"]);

  _templateObject$l = function _templateObject() {
    return data;
  };

  return data;
}
/**
 * The StructuredAddressSchema allows easy validation, cleaning and checking of structured address objects.
 */

var StructuredAddressSchema = new SimpleSchema({
  text: {
    label: t(_templateObject$l()),
    type: LocalizedStringSchema,
    accessibility: {
      description: t(_templateObject2$l())
    },
    optional: true
  },
  room: {
    label: t(_templateObject3$k()),
    type: LocalizedStringSchema,
    accessibility: {
      description: t(_templateObject4$k()),
      question: t(_templateObject5$h()),
      example: t(_templateObject6$g())
    },
    optional: true
  },
  level: {
    label: t(_templateObject7$c()),
    type: LocalizedStringSchema,
    accessibility: {
      description: t(_templateObject8$b()),
      question: t(_templateObject9$b()),
      extendedInformationUrl: 'https://en.wikipedia.org/wiki/Storey',
      example: t(_templateObject10$9())
    },
    optional: true
  },
  building: {
    label: t(_templateObject11$8()),
    type: LocalizedStringSchema,
    accessibility: {
      description: t(_templateObject12$7()),
      example: t(_templateObject13$7())
    },
    optional: true
  },
  house: {
    label: t(_templateObject14$5()),
    type: LocalizedStringSchema,
    accessibility: {
      question: t(_templateObject15$4())
    },
    optional: true
  },
  street: {
    label: t(_templateObject16$4()),
    type: LocalizedStringSchema,
    accessibility: {
      question: t(_templateObject17$4()),
      description: t(_templateObject18$4())
    },
    optional: true
  },
  postalCode: {
    label: t(_templateObject19$3()),
    type: LocalizedStringSchema,
    accessibility: {
      question: t(_templateObject20$3()),
      description: t(_templateObject21$3())
    },
    optional: true
  },
  areas: {
    label: t(_templateObject22$3()),
    type: Array,
    accessibility: {
      description: t(_templateObject23$3())
    },
    optional: true
  },
  'areas.$': {
    type: LocalizedStringSchema
  },
  district: {
    label: t(_templateObject24$2()),
    type: LocalizedStringSchema,
    accessibility: {
      description: t(_templateObject25$2()),
      question: t(_templateObject26$2())
    },
    optional: true
  },
  city: {
    label: t(_templateObject27$2()),
    type: LocalizedStringSchema,
    accessibility: {
      question: t(_templateObject28$2())
    },
    optional: true
  },
  regions: {
    label: t(_templateObject29$2()),
    type: Array,
    accessibility: {
      description: t(_templateObject30$2())
    },
    optional: true
  },
  'regions.$': {
    type: LocalizedStringSchema
  },
  county: {
    label: t(_templateObject31$2()),
    type: LocalizedStringSchema,
    accessibility: {
      description: t(_templateObject32$2())
    },
    optional: true
  },
  state: {
    label: t(_templateObject33$1()),
    type: LocalizedStringSchema,
    accessibility: {
      description: t(_templateObject34$1())
    },
    optional: true
  },
  stateCode: {
    label: t(_templateObject35$1()),
    type: LocalizedStringSchema,
    accessibility: {
      description: t(_templateObject36$1())
    },
    optional: true
  },
  countryCode: {
    label: t(_templateObject37$1()),
    type: LocalizedStringSchema,
    optional: true,
    allowedValues: isoAlphaThreeCountryCodes.map(function (c) {
      return c.value;
    }),
    accessibility: {
      description: t(_templateObject38$1()),
      options: isoAlphaThreeCountryCodes
    }
  }
});
/**
 * The AddressSchema extends the StructuredAddressSchema and allows also Strings
 */

var AddressSchema = SimpleSchema.oneOf(StructuredAddressSchema, String);

var PointGeometrySchema = new SimpleSchema({
  type: {
    type: String,
    allowedValues: ['Point']
  },
  coordinates: {
    type: Array,
    minCount: 2,
    maxCount: 2
  },
  'coordinates.$': {
    type: Number,
    min: -180,
    max: 180
  }
});
var GeometrySchema = PointGeometrySchema;

var ExternalIdSchema = new SimpleSchema({
  provider: String,
  id: String,
  schemaName: {
    type: String,
    optional: true
  }
});

function _templateObject28$3() {
  var data = _taggedTemplateLiteral(["Reference to the place that this equipment belongs to (accessibility.cloud ID)"]);

  _templateObject28$3 = function _templateObject28() {
    return data;
  };

  return data;
}

function _templateObject27$3() {
  var data = _taggedTemplateLiteral(["Data record that came from the original data source (for debugging)"]);

  _templateObject27$3 = function _templateObject27() {
    return data;
  };

  return data;
}

function _templateObject26$3() {
  var data = _taggedTemplateLiteral(["Reference to data source for operational status live updates (accessibility.cloud ID)"]);

  _templateObject26$3 = function _templateObject26() {
    return data;
  };

  return data;
}

function _templateObject25$3() {
  var data = _taggedTemplateLiteral(["Original ID of the place that this equipment belongs to (unique in the original data set)"]);

  _templateObject25$3 = function _templateObject25() {
    return data;
  };

  return data;
}

function _templateObject24$3() {
  var data = _taggedTemplateLiteral(["Original ID of the place data source that this equipment belongs to (accessibility.cloud ID)"]);

  _templateObject24$3 = function _templateObject24() {
    return data;
  };

  return data;
}

function _templateObject23$4() {
  var data = _taggedTemplateLiteral(["Reference to the data import where this information comes from (accessibility.cloud ID)"]);

  _templateObject23$4 = function _templateObject23() {
    return data;
  };

  return data;
}

function _templateObject22$4() {
  var data = _taggedTemplateLiteral(["Reference to the data source where this information comes from (accessibility.cloud ID)"]);

  _templateObject22$4 = function _templateObject22() {
    return data;
  };

  return data;
}

function _templateObject21$4() {
  var data = _taggedTemplateLiteral(["On which website address can you find updates about the operational status?"]);

  _templateObject21$4 = function _templateObject21() {
    return data;
  };

  return data;
}

function _templateObject20$4() {
  var data = _taggedTemplateLiteral(["e.g. +1-555-555-90-210"]);

  _templateObject20$4 = function _templateObject20() {
    return data;
  };

  return data;
}

function _templateObject19$4() {
  var data = _taggedTemplateLiteral(["Service phone number under which the facility management can be reached, with international country code"]);

  _templateObject19$4 = function _templateObject19() {
    return data;
  };

  return data;
}

function _templateObject18$5() {
  var data = _taggedTemplateLiteral(["Which phone number should be called to notify if the equipment is out of service?"]);

  _templateObject18$5 = function _templateObject18() {
    return data;
  };

  return data;
}

function _templateObject17$5() {
  var data = _taggedTemplateLiteral(["If the equipment is not in operation, when is it going to be again?"]);

  _templateObject17$5 = function _templateObject17() {
    return data;
  };

  return data;
}

function _templateObject16$5() {
  var data = _taggedTemplateLiteral(["Last update of the operational status"]);

  _templateObject16$5 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15$5() {
  var data = _taggedTemplateLiteral(["If the equipment is not in operation, why?"]);

  _templateObject15$5 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14$6() {
  var data = _taggedTemplateLiteral(["Is the equipment currently in operation?"]);

  _templateObject14$6 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13$8() {
  var data = _taggedTemplateLiteral(["Is there an alternative route to this equipment?"]);

  _templateObject13$8 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12$8() {
  var data = _taggedTemplateLiteral(["Is this equipment indoors?"]);

  _templateObject12$8 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11$9() {
  var data = _taggedTemplateLiteral(["Language"]);

  _templateObject11$9 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10$a() {
  var data = _taggedTemplateLiteral(["How long/deep is the cabin (as seen from the entrance)?"]);

  _templateObject10$a = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$c() {
  var data = _taggedTemplateLiteral(["How wide is the cabin (as seen from the entrance)?"]);

  _templateObject9$c = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$c() {
  var data = _taggedTemplateLiteral(["If this is an elevator, does it have doors in both directions?"]);

  _templateObject8$c = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$d() {
  var data = _taggedTemplateLiteral(["Would you like to add information about the door of this equipment?"]);

  _templateObject7$d = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$h() {
  var data = _taggedTemplateLiteral(["Door"]);

  _templateObject6$h = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$i() {
  var data = _taggedTemplateLiteral(["How high are the lowest working controls for this equipment?"]);

  _templateObject5$i = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$l() {
  var data = _taggedTemplateLiteral(["Contains the same information as description, but in a shorter form, to save space on the screen. May contain Unicode characters such as \u27F7 or \u2198\uFE0E as well as abbreviations (e.g. \u2018pl.\u2019 instead of \u2018platform\u2019, \u2018dir.\u2019 instead of \u2018direction\u2019)."]);

  _templateObject4$l = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$l() {
  var data = _taggedTemplateLiteral(["Contains the same information as description, but in a longer form which can be read out by a screen reader or voice assistant.\n        Words should be written out fully (e.g. \u2018direction\u2019 instead of \u2018dir.\u2018, \u2018ground\u2019 instead of \u2018G\u2018, \u2018platform\u2019 instead of \u2018pl.\u2019). The field should not contain any symbols (e.g. `->`, `<->`, or `\u2192`).\n        Suitable for people who have a visual impairment or use a screen reader or voice assistant (e.g. Amazon\u2019s Alexa).\n        If only one description field can be used for technical reasons, then the written-out form should be given preference, because a short form can be generated from the long form more easily than the other way around.\n        Can be used by web developers as content for the `aria-label`-attribute, for example."], ["Contains the same information as description, but in a longer form which can be read out by a screen reader or voice assistant.\n        Words should be written out fully (e.g. \u2018direction\u2019 instead of \u2018dir.\u2018, \u2018ground\u2019 instead of \u2018G\u2018, \u2018platform\u2019 instead of \u2018pl.\u2019). The field should not contain any symbols (e.g. \\`->\\`, \\`<->\\`, or \\`\u2192\\`).\n        Suitable for people who have a visual impairment or use a screen reader or voice assistant (e.g. Amazon\u2019s Alexa).\n        If only one description field can be used for technical reasons, then the written-out form should be given preference, because a short form can be generated from the long form more easily than the other way around.\n        Can be used by web developers as content for the \\`aria-label\\`-attribute, for example."]);

  _templateObject3$l = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$m() {
  var data = _taggedTemplateLiteral(["For elevators: \u2018Between ticket counter and Central Line platforms\u2019, \u2018From basement upwards towards Main Street exit\u2019"]);

  _templateObject2$m = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$m() {
  var data = _taggedTemplateLiteral(["Describes where the equipment is located. If only one description string is technically possible to maintain, it should not contain any abbreviations to allow being read aloud by screen readers or voice assistants"]);

  _templateObject$m = function _templateObject() {
    return data;
  };

  return data;
}
var AllowedEquipmentTypes = Object.freeze(['bed', 'wardrobe', 'elevator', 'escalator', 'movingWalkway', 'ramp', 'hoist', 'stairLift', 'switch', 'sitemap', 'vendingMachine', 'intercom', 'powerOutlet']);
var EquipmentPropertiesSchema = new SimpleSchema({
  ids: {
    type: Array,
    optional: true
  },
  'ids.$': ExternalIdSchema,
  originalId: {
    type: String,
    optional: true
  },
  category: {
    type: String,
    optional: true,
    allowedValues: AllowedEquipmentTypes.map(function (s) {
      return s;
    })
  },
  description: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      description: t(_templateObject$m()),
      example: t(_templateObject2$m())
    }
  },
  // Alternative description that is screen-reader compatible and replaces abbreviations / symbols with words
  longDescription: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      description: t(_templateObject3$l())
    }
  },
  // Alternative description that uses less screen estate, more abbreviations and Unicode symbols like `→`
  shortDescription: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      description: t(_templateObject4$l())
    }
  },
  heightOfControls: {
    type: LengthSchema,
    optional: true,
    accessibility: {
      componentHint: 'Unit',
      question: t(_templateObject5$i())
    }
  },
  door: {
    type: DoorSchema,
    optional: true,
    label: t(_templateObject6$h()),
    accessibility: {
      questionBlockBegin: t(_templateObject7$d())
    }
  },
  hasDoorsInBothDirections: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject8$c())
    }
  },
  cabinWidth: {
    type: LengthSchema,
    optional: true,
    accessibility: {
      componentHint: 'Unit',
      question: t(_templateObject9$c())
    }
  },
  cabinLength: {
    type: LengthSchema,
    optional: true,
    accessibility: {
      componentHint: 'Unit',
      question: t(_templateObject10$a())
    }
  },
  languages: {
    type: Array,
    defaultValue: [],
    optional: true
  },
  'languages.$': {
    type: String,
    label: t(_templateObject11$9()),
    allowedValues: ietfLanguageTagsAndSignLanguageCodes
  },
  hasRaisedText: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  hasBrailleText: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  hasSpeech: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  isHighContrast: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  hasLargePrint: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  isVoiceActivated: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  hasHeadPhoneJack: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  isEasyToUnderstand: {
    type: Boolean,
    defaultValue: false,
    optional: true
  },
  isIndoors: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject12$8())
    }
  },
  alternativeRouteInstructions: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject13$8())
    }
  },
  isWorking: {
    type: Boolean,
    optional: true,
    accessibility: {
      question: t(_templateObject14$6()),
      accessibility: {
        machineData: true
      }
    }
  },
  outOfOrderReason: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject15$5()),
      example: 'Vandalism, construction work, …',
      machineData: true
    }
  },
  stateLastUpdate: {
    type: Date,
    optional: true,
    accessibility: {
      machineData: true,
      description: t(_templateObject16$5())
    }
  },
  plannedCompletionDate: {
    type: Date,
    optional: true,
    accessibility: {
      question: t(_templateObject17$5())
    }
  },
  manufacturerName: {
    type: LocalizedStringSchema,
    optional: true
  },
  manufacturerSerialNumber: {
    type: String,
    optional: true
  },
  servicePhoneNumber: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject18$5()),
      description: t(_templateObject19$4()),
      example: t(_templateObject20$4()),
      componentHint: 'PhoneNumber'
    }
  },
  serviceWebsiteUrl: {
    type: LocalizedStringSchema,
    regEx: SimpleSchema.RegEx.Url,
    optional: true,
    accessibility: {
      question: t(_templateObject21$4())
    }
  },
  sourceId: {
    type: String,
    optional: true,
    accessibility: {
      machineData: true,
      description: t(_templateObject22$4())
    }
  },
  sourceImportId: {
    type: String,
    optional: true,
    accessibility: {
      machineData: true,
      description: t(_templateObject23$4())
    }
  },
  placeSourceId: {
    type: String,
    optional: true,
    accessibility: {
      machineData: true,
      description: t(_templateObject24$3())
    }
  },
  originalPlaceInfoId: {
    type: String,
    optional: true,
    accessibility: {
      machineData: true,
      description: t(_templateObject25$3())
    }
  },
  disruptionSourceImportId: {
    type: String,
    optional: true,
    accessibility: {
      machineData: true,
      description: t(_templateObject26$3())
    }
  },
  originalData: {
    type: String,
    optional: true,
    accessibility: {
      machineData: true,
      description: t(_templateObject27$3())
    }
  },
  placeInfoId: {
    type: String,
    optional: true,
    accessibility: {
      machineData: true,
      description: t(_templateObject28$3())
    }
  }
});

var EquipmentInfoSchema = new SimpleSchema({
  formatVersion: {
    type: String,
    optional: true
  },
  properties: {
    type: EquipmentPropertiesSchema
  },
  geometry: {
    type: PointGeometrySchema
  }
});

function _templateObject16$6() {
  var data = _taggedTemplateLiteral(["URL of the place\u2019s own website"]);

  _templateObject16$6 = function _templateObject16() {
    return data;
  };

  return data;
}

function _templateObject15$6() {
  var data = _taggedTemplateLiteral(["URL of the original data source\u2019s website on a subpage that allows to edit the original data."]);

  _templateObject15$6 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14$7() {
  var data = _taggedTemplateLiteral(["URL of the original data source\u2019s website describing this place"]);

  _templateObject14$7 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13$9() {
  var data = _taggedTemplateLiteral(["Describes the overall accessibility of a place."]);

  _templateObject13$9 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12$9() {
  var data = _taggedTemplateLiteral(["Okay, now let`s map the accessibility."], ["Okay, now let\\`s map the accessibility."]);

  _templateObject12$9 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11$a() {
  var data = _taggedTemplateLiteral(["e.g. accessibility@example.com"]);

  _templateObject11$a = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10$b() {
  var data = _taggedTemplateLiteral(["An email address where visitors can get accessibility relevant information"]);

  _templateObject10$b = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9$d() {
  var data = _taggedTemplateLiteral(["What is the email address of this place?"]);

  _templateObject9$d = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8$d() {
  var data = _taggedTemplateLiteral(["e.g. +1-555-555-90-210"]);

  _templateObject8$d = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7$e() {
  var data = _taggedTemplateLiteral(["The phone number of this place, with international country code"]);

  _templateObject7$e = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6$i() {
  var data = _taggedTemplateLiteral(["What is the phone number of this place?"]);

  _templateObject6$i = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5$j() {
  var data = _taggedTemplateLiteral(["How would you describe this place?"]);

  _templateObject5$j = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4$m() {
  var data = _taggedTemplateLiteral(["Would you like to add the address?"]);

  _templateObject4$m = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$m() {
  var data = _taggedTemplateLiteral(["Address"]);

  _templateObject3$m = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$n() {
  var data = _taggedTemplateLiteral(["What type of place is this?"]);

  _templateObject2$n = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$n() {
  var data = _taggedTemplateLiteral(["What is the name of this place?"]);

  _templateObject$n = function _templateObject() {
    return data;
  };

  return data;
}
var PlacePropertiesSchema = new SimpleSchema({
  name: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject$n())
    }
  },
  category: {
    type: String,
    accessibility: {
      question: t(_templateObject2$n()),
      componentHint: 'Category'
    }
  },
  address: {
    type: AddressSchema,
    optional: true,
    label: t(_templateObject3$m()),
    accessibility: {
      question: t(_templateObject4$m()),
      componentHint: 'Address'
    }
  },
  description: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject5$j()),
      componentHint: 'TextArea'
    }
  },
  phoneNumber: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject6$i()),
      description: t(_templateObject7$e()),
      example: t(_templateObject8$d()),
      componentHint: 'PhoneNumber'
    }
  },
  emailAddress: {
    type: LocalizedStringSchema,
    optional: true,
    accessibility: {
      question: t(_templateObject9$d()),
      description: t(_templateObject10$b()),
      example: t(_templateObject11$a())
    }
  },
  accessibility: {
    type: AccessibilitySchema,
    optional: true,
    accessibility: {
      question: t(_templateObject12$9()),
      description: t(_templateObject13$9())
    }
  },
  infoPageUrl: {
    type: LocalizedStringSchema,
    regEx: SimpleSchema.RegEx.Url,
    optional: true,
    accessibility: {
      description: t(_templateObject14$7())
    }
  },
  editPageUrl: {
    type: LocalizedStringSchema,
    regEx: SimpleSchema.RegEx.Url,
    optional: true,
    accessibility: {
      description: t(_templateObject15$6())
    }
  },
  placeWebsiteUrl: {
    type: LocalizedStringSchema,
    regEx: SimpleSchema.RegEx.Url,
    optional: true,
    accessibility: {
      description: t(_templateObject16$6())
    }
  },
  // machine data fields
  ids: {
    type: Array,
    optional: true,
    accessibility: {
      machineData: true
    }
  },
  'ids.$': ExternalIdSchema,
  originalId: {
    type: String,
    optional: true,
    accessibility: {
      machineData: true
    }
  },
  parentPlaceId: {
    type: String,
    optional: true,
    regEx: SimpleSchema.RegEx.Id,
    accessibility: {
      machineData: true
    }
  },
  originalData: {
    type: String,
    optional: true,
    accessibility: {
      machineData: true
    }
  },
  eventId: {
    type: String,
    optional: true,
    regEx: SimpleSchema.RegEx.Id,
    accessibility: {
      machineData: true
    }
  },
  creatorId: {
    type: String,
    optional: true,
    regEx: SimpleSchema.RegEx.Id,
    accessibility: {
      machineData: true
    }
  },
  sourceId: {
    type: String,
    optional: true,
    regEx: SimpleSchema.RegEx.Id,
    accessibility: {
      machineData: true
    }
  },
  sourceImportId: {
    type: String,
    optional: true,
    regEx: SimpleSchema.RegEx.Id,
    accessibility: {
      machineData: true
    }
  }
});

function _templateObject4$n() {
  var data = _taggedTemplateLiteral(["On the map, drag the place icon to the entrance's exact position."]);

  _templateObject4$n = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3$n() {
  var data = _taggedTemplateLiteral(["Place on map"]);

  _templateObject3$n = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2$o() {
  var data = _taggedTemplateLiteral(["First we need some information about the place."]);

  _templateObject2$o = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$o() {
  var data = _taggedTemplateLiteral(["Properties"]);

  _templateObject$o = function _templateObject() {
    return data;
  };

  return data;
}
/**
 * The PlaceInfoSchema allows easy validation, cleaning and checking of PlaceInfo objects.
 */

var PlaceInfoSchema = new SimpleSchema({
  formatVersion: {
    type: String,
    optional: true,
    accessibility: {
      machineData: true
    }
  },
  properties: {
    type: PlacePropertiesSchema,
    label: t(_templateObject$o()),
    accessibility: {
      question: t(_templateObject2$o())
    }
  },
  geometry: {
    type: GeometrySchema,
    label: t(_templateObject3$n()),
    accessibility: {
      question: t(_templateObject4$n()),
      inseparable: true
    }
  }
});

/**
 *  Returns true if the given SimpleSchema definition contains a SimpleSchema instance
 */

var isDefinitionTypeSchema = function isDefinitionTypeSchema(definition) {
  var type = definition.type; // Check whether we need to handle multiple definitions & non SimpleSchemaGroups

  if (type && type.definitions && type.definitions[0] && SimpleSchema.isSimpleSchema(type.definitions[0].type)) {
    return true;
  }

  return false;
};
/**
 * Returns the SimpleSchema of the type of the given definition
 */

var getFirstSchemaFromDefinition = function getFirstSchemaFromDefinition(definition) {
  var type = definition.type; // Check whether we need to handle multiple definitions & non SimpleSchemaGroups

  if (type && type.definitions && type.definitions[0]) {
    return type.definitions[0].type;
  }

  throw new Error('No schema found');
};
/**
 *  Returns true if the given SimpleSchema definition contains an array
 */

var isDefinitionTypeArray = function isDefinitionTypeArray(definition) {
  var type = definition.type; // Check whether we need to handle multiple definitions

  if (type && type.definitions[0] && type.definitions[0].type === Array) {
    return true;
  }

  return false;
};
var forEachKeyInSchemas = function forEachKeyInSchemas(schema, callback) {
  var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var rootPathPrefix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  var nodeNames = schema.objectKeys(prefix);
  var valuePrefix = '';

  if (prefix.length > 0) {
    valuePrefix = "".concat(prefix, ".");
  }

  var rootPrefix = '';

  if (rootPathPrefix.length > 0) {
    rootPrefix = "".concat(rootPathPrefix, ".");
  }

  nodeNames.forEach(function (name) {
    var definitionPath = "".concat(valuePrefix).concat(name);
    var pathFromRoot = "".concat(rootPrefix).concat(name);
    var origDefinition = schema.schema(definitionPath);
    var hasChildren = false;

    if (!origDefinition || !origDefinition.accessibility || !origDefinition.accessibility.inseparable) {
      if (isDefinitionTypeSchema(origDefinition)) {
        var subSchema = getFirstSchemaFromDefinition(origDefinition);
        hasChildren = forEachKeyInSchemas(subSchema, callback, '', pathFromRoot);
      } else if (isDefinitionTypeArray(origDefinition)) {
        var arrayPath = definitionPath + '.$';
        var rootArrayPath = pathFromRoot + '.$';
        var arrayFieldDefinition = schema.schema(arrayPath);

        if (isDefinitionTypeSchema(arrayFieldDefinition)) {
          var _subSchema = getFirstSchemaFromDefinition(arrayFieldDefinition);

          hasChildren = forEachKeyInSchemas(_subSchema, callback, '', rootArrayPath);
        } else {
          hasChildren = forEachKeyInSchemas(schema, callback, arrayPath, rootArrayPath);
        }
      } else {
        hasChildren = forEachKeyInSchemas(schema, callback, definitionPath, pathFromRoot);
      }
    }

    callback(schema, definitionPath, pathFromRoot, hasChildren);
  });
  return nodeNames.length > 0;
};

function isOrRule(rule) {
  return rule.hasOwnProperty('$or');
}

function isAndRule(rule) {
  return rule.hasOwnProperty('$and');
}

function isMatchRule(rule) {
  return !isAndRule(rule) && !isOrRule(rule);
}

var logRule = function logRule(message) {// console.log(''.padStart(indent, "  ") + message, ...args);
}; // combine multiple rules with a three valued or, with the order of true > false > unknown
// this does not align with Kleene and Priest logics, but knowing that a rule does not apply
// is strong enough reason to determine that the or should be false


function evaluateOrRule(data, orRule) {
  var finalResult = 'unknown';
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = orRule.$or[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var rule = _step.value;
      var result = evaluateRule(data, rule);

      if (result === 'true') {
        return 'true';
      } // apply not found if nothing was found before


      if (finalResult === 'unknown') {
        finalResult = result;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return finalResult;
}

function evaluateAndRule(data, andRule) {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = andRule.$and[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var rule = _step2.value;
      var result = evaluateRule(data, rule);

      if (result !== 'true') {
        return 'false';
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return 'true';
} // read the value out of a quantity


function getQuantityValue(a) {
  var aValue = 0;

  if (_typeof(a) === 'object') {
    // todo use better conversion in the future
    var multiplier = a.unit === 'inch' ? 2.54 : 1;
    aValue = a.value * multiplier;
  } else {
    aValue = a;
  }

  return aValue;
}

var allowedOperators = Object.freeze(['$eq', '$lt', '$lte', '$gt', '$gte', '$ne']); // compare two values using an operator, if they are quantities, read the underlying value

function compareByOperator(first, second) {
  var operator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '$eq';
  var a = getQuantityValue(first);
  var b = getQuantityValue(second);

  if (operator === '$eq') {
    return a === b;
  }

  if (operator === '$lt') {
    return a < b;
  }

  if (operator === '$lte') {
    return a <= b;
  }

  if (operator === '$gt') {
    return a > b;
  }

  if (operator === '$gte') {
    return a >= b;
  }

  if (operator === '$ne') {
    return a !== b;
  }

  return false;
} // checks wether the given data matches the rule


function evaluateMatchRule(data, rule) {
  var finalResult = undefined;
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = entries(rule)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var _step3$value = _slicedToArray(_step3.value, 2),
          path = _step3$value[0],
          matcher = _step3$value[1];

      var fieldData = get(data, path);
      logRule('match', path, matcher, fieldData, finalResult);
      var isObjectMatch = _typeof(matcher) === 'object';
      var isUnknownOrRule = matcher && isObjectMatch && matcher.hasOwnProperty('$unknownOr');
      var isExistsRule = matcher && isObjectMatch && matcher.hasOwnProperty('$exists');
      var isDefinedRule = matcher && isObjectMatch && matcher.hasOwnProperty('$defined');

      if (typeof fieldData === 'undefined' && !isDefinedRule && !isUnknownOrRule) {
        // data is missing, we don't know anything about this entry
        logRule('-match.dataMissing');
        return 'unknown';
      }

      if (matcher && isObjectMatch) {
        var matched = false;
        var foundOperators = intersection(allowedOperators, Object.keys(matcher || {}));

        if (foundOperators.length === 1) {
          // compare by operator
          matched = compareByOperator(fieldData, matcher[foundOperators[0]], foundOperators[0]);
          logRule('-match.compareByOperator', 'data', fieldData, 'matched', matched);
        } else if (isDefinedRule) {
          // custom defined check, unknown check is skipped above
          matched = typeof fieldData !== 'undefined';
          logRule('-match.isDefined', 'data', fieldData, 'matched', matched);
        } else if (isExistsRule) {
          // custom exists check
          var existsValue = matcher['$exists'];
          matched = fieldData !== null === existsValue;
          logRule('-match.$exists =', existsValue, 'data', fieldData, 'matched', matched);
        } else if (isUnknownOrRule) {
          // either undefined or exactly the value
          var unknownOrValue = matcher['$unknownOr'];
          matched = fieldData === unknownOrValue || typeof fieldData === 'undefined';
          logRule('-match.$unknownOr =', unknownOrValue, 'data', fieldData, 'matched', matched);
        } else {
          // match whole object
          matched = isMatch(fieldData, matcher);
          logRule('-match.isMatch =', matcher, 'data', fieldData, 'matched', matched);
        } // abort early with no match


        if (!matched) {
          // any failed comparision and we fail the whole match
          return 'false';
        }

        if (typeof finalResult === 'undefined') {
          // mark result as yes, and continue checking
          finalResult = 'true';
        }
      } else {
        // normal data, do a deep equals
        var equals = isEqual(fieldData, matcher);

        if (!equals) {
          // any failed comparision and we fail the whole match
          return 'false';
        }

        if (typeof finalResult === 'undefined') {
          // mark result as yes, and continue checking
          finalResult = 'true';
        }
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
        _iterator3["return"]();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
  return finalResult || 'unknown';
} // evaluates any kind of rule


function evaluateRule(data, rule) {
  var result = 'unknown';

  if (isOrRule(rule)) {
    result = evaluateOrRule(data, rule);
  } else if (isAndRule(rule)) {
    result = evaluateAndRule(data, rule);
  } else if (isMatchRule(rule)) {
    result = evaluateMatchRule(data, rule);
  }
  return result;
}

var flatStepHeight = {
  unit: 'cm',
  value: 7,
  operator: '<='
}; // TODO put real values in here!

var wheelChairWashBasin = {
  height: {
    unit: 'cm',
    operator: '>=',
    value: 80
  },
  depth: {
    unit: 'cm',
    operator: '>=',
    value: 50
  }
}; // the rules for determining that places are fully accessible
// first version only support one entrance / stair

var fullWheelmapA11yRuleSet = {
  $or: [{
    'properties.accessibility.entrances.0.hasFixedRamp': true
  }, {
    'properties.accessibility.entrances.0.hasRemovableRamp': true
  }, {
    'properties.accessibility.entrances.0.stairs.0.count': 0
  }, {
    'properties.accessibility.entrances.0.stairs': null
  }, {
    'properties.accessibility.entrances.0.isLevel': true
  }] // TODO add more rules for door width etc., multiple entrances, etc.

}; // the rules for determining that places are at least partially accessible, omitting the full rules
// first version only support one entrance / stair

var partialWheelmapA11yRuleSet = {
  $or: [{
    'properties.accessibility.entrances.0.stairs.0.count': 1,
    'properties.accessibility.entrances.0.stairs.0.stepHeight': {
      $lte: {
        value: 7.0,
        unit: 'cm'
      }
    }
  }] // TODO add more rules for door width etc., multiple entrances, etc.

}; // the rules for determining that toilets are fully accessible
// first version only support one restroom

var wheelmapToiletA11yRuleSet = {
  'properties.accessibility.restrooms': {
    $exists: true
  },
  'properties.accessibility.restrooms.0': {
    $exists: true
  },
  'properties.accessibility.restrooms.0.toilet': {
    $exists: true
  },
  'properties.accessibility.restrooms.0.entrance.isLevel': true,
  'properties.accessibility.restrooms.0.washBasin.accessibleWithWheelchair': true // TODO add more rules for door width etc.

}; // Evaluates the wheelchair accessibility using the predefined wheelmap rulesets

function evaluateWheelmapA11y(data) {
  var full = evaluateRule(data, fullWheelmapA11yRuleSet);

  if (full === 'true') {
    return 'yes';
  }

  var partial = evaluateRule(data, partialWheelmapA11yRuleSet);

  if (partial === 'true') {
    return 'partial';
  }

  if (full === 'false' || partial === 'false') {
    return 'no';
  }

  return 'unknown';
} // Evaluates the wheelchair accessibility of the toilet using the predefined wheelmap rulesets

function evaluateToiletWheelmapA11y(data) {
  var full = evaluateRule(data, wheelmapToiletA11yRuleSet);

  if (full === 'true') {
    return 'yes';
  }

  if (full === 'false') {
    return 'no';
  }

  return 'unknown';
}

var parseValue = function parseValue(data, field, type) {
  var rawValue = data[field];

  if (rawValue === null || typeof rawValue === 'undefined') {
    return rawValue;
  }

  if (typeof rawValue !== 'string') {
    return undefined;
  }

  if (type === 'yesno') {
    if (rawValue === 'true') {
      return true;
    }

    return rawValue === 'false' ? false : undefined;
  }

  if (type === 'float') {
    return parseFloat(rawValue);
  }

  if (type === 'int') {
    return parseInt(rawValue, 10);
  }

  return undefined;
};

var parseYesNo = function parseYesNo(data, field) {
  return parseValue(data, field, 'yesno');
};

var parseHasWithDefault = function parseHasWithDefault(data, field, existsValue, doesNotExistValue) {
  var value = parseValue(data, field, 'yesno');

  if (value === true) {
    return existsValue;
  }

  if (value === false) {
    return doesNotExistValue;
  }

  return undefined;
};

var parseHasArray = function parseHasArray(data, field) {
  return parseHasWithDefault(data, field, [], null);
};

var parseHasEntry = function parseHasEntry(data, field) {
  return parseHasWithDefault(data, field, {}, null);
};

var parseIsAnyOfWithDefault = function parseIsAnyOfWithDefault(data, field, list, existsValue, doesNotExistValue) {
  var rawValue = data[field];

  if (rawValue === null || typeof rawValue === 'undefined') {
    return rawValue;
  }

  return includes(list, rawValue) ? existsValue : doesNotExistValue;
};

var parseIsAnyOf = function parseIsAnyOf(data, field, list) {
  return parseIsAnyOfWithDefault(data, field, list, true, false);
};

var parseIsAnyOfEntry = function parseIsAnyOfEntry(data, field, list) {
  return parseIsAnyOfWithDefault(data, field, list, {}, null);
};

var parseFloatUnit = function parseFloatUnit(data, field, unit, operator) {
  var value = parseValue(data, field, 'float'); // remove undefined values

  var unitValue = pickBy({
    operator: operator,
    unit: unit,
    value: value
  });
  return value && !isNaN(value) ? unitValue : undefined;
};

var parseMultiSelect = function parseMultiSelect(data, field) {
  var rawValue = data[field];

  if (rawValue === null || typeof rawValue === 'undefined') {
    return rawValue;
  }

  if (typeof rawValue !== 'string') {
    return undefined;
  }

  return rawValue.split(' ');
};

var transformKoboToA11y = function transformKoboToA11y(data) {
  var usedLengthUnit = data['user/user_measuring'] || 'cm';
  var mapping = {
    geometry: data._geolocation ? {
      coordinates: data._geolocation.reverse(),
      type: 'Point'
    } : {},
    'properties.originalId': "".concat(data._id),
    'properties.infoPageUrl': null,
    'properties.originalData': JSON.stringify(data),
    // basic place data
    'properties.name': data['outside/name'],
    'properties.phoneNumber': data['place_phone_number'] || data['phone_number'],
    'properties.emailAddress': data['place_email_address'],
    'properties.placeWebsiteUrl': data['place_website_url'],
    'properties.category': data['outside/category/category_top'] || data['outside/category/category_sub'] || 'undefined',
    'properties.description': data['wheelchair_comment'],
    'properties.accessibility.accessibleWith.wheelchair': {
      "true": true,
      "false": false,
      partially: false
    }[data['is_wheelchair_accessible']],
    'properties.accessibility.partiallyAccessibleWith.wheelchair': data['is_wheelchair_accessible'] === 'partially' ? true : undefined,
    // entrances
    'properties.accessibility.isWellLit': parseYesNo(data, 'inside/is_well_lit'),
    'properties.accessibility.isQuiet': parseYesNo(data, 'inside/is_quiet'),
    'properties.accessibility.entrances': parseHasArray(data, 'outside/entrance/has_entrance'),
    'properties.accessibility.entrances.0': parseHasEntry(data, 'outside/entrance/has_entrance'),
    'properties.accessibility.entrances.0.hasFixedRamp': parseYesNo(data, 'outside/entrance/has_fixed_ramp'),
    // stairs
    'properties.accessibility.entrances.0.stairs': parseHasArray(data, 'outside/entrance/has_steps'),
    'properties.accessibility.entrances.0.stairs.0': parseHasEntry(data, 'outside/entrance/has_steps'),
    'properties.accessibility.entrances.0.stairs.0.count': parseValue(data, 'outside/entrance/steps_count', 'int'),
    'properties.accessibility.entrances.0.stairs.0.stepHeight': parseFloatUnit(data, 'outside/entrance/steps_height', usedLengthUnit) || parseHasWithDefault(data, 'outside/entrance/steps_low_height', flatStepHeight, undefined),
    'properties.accessibility.entrances.0.hasRemovableRamp': parseYesNo(data, 'outside/entrance/has_mobile_ramp'),
    // doors
    'properties.accessibility.entrances.0.doors': parseHasArray(data, 'outside/entrance/has_door'),
    'properties.accessibility.entrances.0.doors.0': parseHasEntry(data, 'outside/entrance/has_door'),
    'properties.accessibility.entrances.0.doors.0.isAutomaticOrAlwaysOpen': parseYesNo(data, 'outside/entrance/has_automatic_door'),
    // restrooms
    'properties.accessibility.restrooms': parseHasArray(data, 'inside/toilet/has_toilet'),
    'properties.accessibility.restrooms.0': parseHasEntry(data, 'inside/toilet/has_toilet'),
    // entrance
    'properties.accessibility.restrooms.0.entrance.isLevel': parseYesNo(data, 'inside/toilet/stepless_access'),
    'properties.accessibility.restrooms.0.entrance.door.width': parseFloatUnit(data, 'inside/toilet/door_width', usedLengthUnit),
    // toilet
    'properties.accessibility.restrooms.0.toilet': parseHasEntry(data, 'inside/toilet/has_toilet'),
    'properties.accessibility.restrooms.0.toilet.heightOfBase': parseFloatUnit(data, 'inside/toilet/seat_height', usedLengthUnit),
    'properties.accessibility.restrooms.0.toilet.spaceOnUsersLeftSide': parseFloatUnit(data, 'inside/toilet/free_space_front', usedLengthUnit),
    'properties.accessibility.restrooms.0.toilet.spaceOnUsersRightSide': parseFloatUnit(data, 'inside/toilet/free_space_left', usedLengthUnit),
    'properties.accessibility.restrooms.0.toilet.spaceInFront': parseFloatUnit(data, 'inside/toilet/free_space_right', usedLengthUnit),
    // handles
    'properties.accessibility.restrooms.0.toilet.hasFoldingHandles': parseIsAnyOf(data, 'inside/toilet/has_arm_rests', ['left_and_right', 'right', 'left']),
    'properties.accessibility.restrooms.0.toilet.foldingHandles': parseIsAnyOfEntry(data, 'inside/toilet/has_arm_rests', ['left_and_right', 'right', 'left']),
    'properties.accessibility.restrooms.0.toilet.foldingHandles.onUsersLeftSide': parseIsAnyOf(data, 'inside/toilet/has_arm_rests', ['left_and_right', 'left']),
    'properties.accessibility.restrooms.0.toilet.foldingHandles.onUsersRightSide': parseIsAnyOf(data, 'inside/toilet/has_arm_rests', ['left_and_right', 'right']),
    // washBasin
    'properties.accessibility.restrooms.0.washBasin': parseHasEntry(data, 'inside/toilet/has_basin'),
    'properties.accessibility.restrooms.0.washBasin.accessibleWithWheelchair': parseYesNo(data, 'inside/toilet/basin_wheelchair_reachable'),
    'properties.accessibility.restrooms.0.washBasin.spaceBelow': parseHasWithDefault(data, 'inside/toilet/basin_wheelchair_fits_belows', wheelChairWashBasin, null),
    'properties.accessibility.restrooms.0.washBasin.isLocatedInsideRestroom': parseYesNo(data, 'inside/toilet/basin_inside_cabin'),
    // animal policy
    'properties.accessibility.animalPolicy.allowsServiceAnimals': parseYesNo(data, 'inquire/are_service_animals_allowed'),
    // staff
    'properties.accessibility.staff.isTrainedForDisabilities': parseYesNo(data, 'inquire/staff_has_disabled_training'),
    'properties.accessibility.staff.spokenLanguages': parseMultiSelect(data, 'inquire/staff_spoken_sign_langs'),
    'properties.accessibility.staff.isTrainedInSigning': parseYesNo(data, 'inquire/staff_can_speak_sign_lang'),
    // media
    'properties.accessibility.media.isLargePrint': parseYesNo(data, 'inquire/media/has_large_print'),
    'properties.accessibility.media.isAudio': parseYesNo(data, 'inquire/media/has_audio'),
    'properties.accessibility.media.isBraille': parseYesNo(data, 'inquire/media/has_braille')
  };
  var result = {
    properties: {
      hasAccessibility: true
    }
  }; // if there is a null in the history, do not set a value

  var customizedSetter = function customizedSetter(currValue) {
    return currValue === null ? null : undefined;
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = entries(mapping)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          key = _step$value[0],
          value = _step$value[1];

      if (typeof value !== 'undefined') {
        setWith(result, key, value, customizedSetter);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var userDefinedA11y = data['is_wheelchair_accessible'];

  if (!userDefinedA11y || userDefinedA11y === 'undefined') {
    // rate place a11y automatically
    var a11y = evaluateWheelmapA11y(result); // Currently, these fields are exlusive.

    if (a11y === 'yes') {
      set(result, 'properties.accessibility.accessibleWith.wheelchair', true);
      unset(result, 'properties.accessibility.partiallyAccessibleWith.wheelchair');
    } else if (a11y === 'partial') {
      unset(result, 'properties.accessibility.accessibleWith.wheelchair');
      set(result, 'properties.accessibility.partiallyAccessibleWith.wheelchair', true);
    } else if (a11y === 'no') {
      set(result, 'properties.accessibility.accessibleWith.wheelchair', false);
      unset(result, 'properties.accessibility.partiallyAccessibleWith.wheelchair');
    }
  } else {
    // ensure that only one value is set to true
    if (get(result, 'properties.accessibility.accessibleWith.wheelchair') === true) {
      unset(result, 'properties.accessibility.partiallyAccessibleWith.wheelchair');
    } else if (get(result, 'properties.accessibility.partiallyAccessibleWith.wheelchair') === true) {
      unset(result, 'properties.accessibility.accessibleWith.wheelchair');
    }
  } // rate place a11y


  var toiletA11y = evaluateToiletWheelmapA11y(result); // rate toilet a11y
  // TODO this field doesn't exist in ac format! Clarify & align with wheelmap frontend & ac-format

  if (toiletA11y === 'yes') {
    setWith(result, 'properties.accessibility.restrooms.0.isAccessibleWithWheelchair', true, customizedSetter);
  } else if (toiletA11y === 'no') {
    setWith(result, 'properties.accessibility.restrooms.0.isAccessibleWithWheelchair', false, customizedSetter);
  }

  return result;
};

export { AccessibilitySchema, AccessibilitySchemaExtensionSchema, AccessibleTablesPrefab, AddressSchema, AllowedEquipmentTypes, AnimalPolicySchema, BaseQuantitySchema, DoorSchema, EntranceSchema, EquipmentInfoSchema, EquipmentPropertiesSchema, ExternalIdSchema, FoldingHandlesSchema, FormatVersion, GeometrySchema, GroundSchema, LengthQuantitySchema, LengthSchema, LengthUnitKind, LocalizedStringSchema, MediaSchema, MirrorSchema, OtherUnitKind, ParkingSchema, PathwaysSchema, PaymentSchema, PersonalProfileSchema, PlaceInfoSchema, PlacePropertiesSchema, PointGeometrySchema, QuestionFunctionContext, RestroomSchema, RoomSchema, ShowerSchema, StaffSchema, StairsSchema, StructuredAddressSchema, TablesSchema, ToiletSchema, VolumeQuantitySchema, VolumeSchema, WashBasinSchema, WheelchairParkingSchema, WheelchairPlacesSchema, createSchemaInstance, determineUnitKind, evaluateAccessibilitySchemaExtension, evaluateQuestionValue, evaluateRule, evaluateToiletWheelmapA11y, evaluateWheelmapA11y, flatStepHeight, forEachKeyInSchemas, fullWheelmapA11yRuleSet, getFirstSchemaFromDefinition, ietfLanguageTags, ietfLanguageTagsAndSignLanguageCodes, isDefinitionTypeArray, isDefinitionTypeSchema, isoAlphaThreeCountryCodes, makeQuestionContext, partialWheelmapA11yRuleSet, quantityDefinition, signLanguageCodes, smokingPolicies, transformKoboToA11y, validateUnit, wheelChairWashBasin, wheelmapToiletA11yRuleSet };
